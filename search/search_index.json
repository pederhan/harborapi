{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction harborapi is a Python wrapper for the Harbor REST API v2.0. Features Async API Fully typed Data validation with Pydantic HTTP handled by HTTPX Extensive test coverage powered by Hypothesis Installation pip install harborapi","title":"Introduction"},{"location":"#introduction","text":"harborapi is a Python wrapper for the Harbor REST API v2.0.","title":"Introduction"},{"location":"#features","text":"Async API Fully typed Data validation with Pydantic HTTP handled by HTTPX Extensive test coverage powered by Hypothesis","title":"Features"},{"location":"#installation","text":"pip install harborapi","title":"Installation"},{"location":"endpoints/_overview/","text":"Endpoints Overview This section contains API documentation for the methods implementing the different Harbor API endpoints. All methods described here are available on the HarborAsyncClient class. Implemented Endpoints Check the README for the most up to date overview of the implemented endpoints.","title":"Endpoints Overview"},{"location":"endpoints/_overview/#endpoints-overview","text":"This section contains API documentation for the methods implementing the different Harbor API endpoints. All methods described here are available on the HarborAsyncClient class.","title":"Endpoints Overview"},{"location":"endpoints/_overview/#implemented-endpoints","text":"Check the README for the most up to date overview of the implemented endpoints.","title":"Implemented Endpoints"},{"location":"endpoints/artifacts/","text":"Artifacts create_artifact_tag ( project_name , repository_name , reference , tag ) async Create a tag for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required tag Tag The tag to create required Returns: Type Description str The location of the created tag get_artifact_tags ( project_name , repository_name , reference , query = None , sort = None , page = 1 , page_size = 10 , with_signature = False , with_immutable_status = False , retrieve_all = True ) async Get the tags for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required query Optional [ str ] A query string to filter the tags Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the tags. TODO: document this parameter None page int The page of results to return 1 page_size int The number of results to return per page 10 with_signature bool Whether to include the signature of the tag in the response False with_immutable_status bool Whether to include the immutable status of the tag in the response False retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Tag ] A list of Tag objects for the artifact. delete_artifact_tag ( project_name , repository_name , reference , tag_name , missing_ok = False ) async Get the tags for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required tag_name str The name of the tag to delete required get_artifact_vulnerabilities ( project_name , repository_name , reference , mime_type = 'application/vnd.security.vulnerability.report; version=1.1' ) async Get the vulnerabilities for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required mime_type str A comma-separated lists of MIME types for the scan report or scan summary. 'application/vnd.security.vulnerability.report; version=1.1' Returns: Type Description Optional [ HarborVulnerabilityReport ] The vulnerabilities for the artifact, or None if the artifact is not found get_artifact_accessories ( project_name , repository_name , reference , query = None , sort = None , page = 1 , page_size = 10 , retrieve_all = True ) async Get the tags for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required query Optional [ str ] A query string to filter the accessories Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the tags. None page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Accessory ] A list of Accessory objects for the artifact. copy_artifact ( project_name , repository_name , source ) async Copy an artifact. Parameters: Name Type Description Default project_name str Name of new artifact's project required repository_name str Name of new artifact's repository required source str The source artifact to copy from in the form of \"project/repository:tag\" or \"project/repository@digest\" required Returns: Type Description str The location of the new artifact get_artifacts ( project_name , repository_name , query = None , sort = None , page = 1 , page_size = 10 , with_tag = True , with_label = False , with_scan_overview = False , with_signature = False , with_immutable_status = False , with_accessory = False , mime_type = 'application/vnd.security.vulnerability.report; version=1.1' , retrieve_all = True ) async Get the artifacts for a repository. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required query Optional [ str ] A query string to filter the artifacts Except the basic properties, the other supported queries includes: \"tags=*\" to list only tagged artifacts \"tags=nil\" to list only untagged artifacts \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\" \"tags=v\" to list artifact whose tag exactly matches \"v\" \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 with_tag bool Whether to include the tags of the artifact in the response True with_label bool Whether to include the labels of the artifact in the response False with_scan_overview bool Whether to include the scan overview of the artifact in the response False with_signature bool Whether the signature is included inside the tags of the returning artifacts. Only works when setting with_tag==True . False with_immutable_status bool Whether the immutable status is included inside the tags of the returning artifacts. False with_accessory bool Whether the accessories are included of the returning artifacts. False mime_type str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 application/vnd.security.vulnerability.report; version=1.1 'application/vnd.security.vulnerability.report; version=1.1' retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Artifact ] A list of artifacts in the repository matching the query. add_artifact_label ( project_name , repository_name , reference , label ) async Add a label to an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required label Label The label to add required delete_artifact_label ( project_name , repository_name , reference , label_id , missing_ok = False ) async Delete an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required label_id int The id of the label to delete required missing_ok bool Whether to ignore 404 error when deleting the label False get_artifact ( project_name , repository_name , reference , page = 1 , page_size = 10 , with_tag = True , with_label = False , with_scan_overview = False , with_signature = False , with_immutable_status = False , with_accessory = False , mime_type = 'application/vnd.security.vulnerability.report; version=1.1' ) async Get an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required page int The page of results to return 1 page_size int The number of results to return per page 10 with_tag bool Whether to include the tags of the artifact in the response True with_label bool Whether to include the labels of the artifact in the response False with_scan_overview bool Whether to include the scan overview of the artifact in the response False with_signature bool Whether the signature is included inside the tags of the returning artifact. Only works when setting with_tag==True . False with_immutable_status bool Whether the immutable status is included inside the tags of the returning artifact. False with_accessory bool Whether the accessories are included of the returning artifact. False mime_type str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 application/vnd.security.vulnerability.report; version=1.1 'application/vnd.security.vulnerability.report; version=1.1' Returns: Type Description Artifact An artifact. delete_artifact ( project_name , repository_name , reference , missing_ok = False ) async Delete an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required missing_ok bool Whether to ignore 404 error when deleting the artifact False","title":"Artifacts"},{"location":"endpoints/artifacts/#artifacts","text":"","title":"Artifacts"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.create_artifact_tag","text":"Create a tag for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required tag Tag The tag to create required Returns: Type Description str The location of the created tag","title":"create_artifact_tag()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_tags","text":"Get the tags for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required query Optional [ str ] A query string to filter the tags Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the tags. TODO: document this parameter None page int The page of results to return 1 page_size int The number of results to return per page 10 with_signature bool Whether to include the signature of the tag in the response False with_immutable_status bool Whether to include the immutable status of the tag in the response False retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Tag ] A list of Tag objects for the artifact.","title":"get_artifact_tags()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.delete_artifact_tag","text":"Get the tags for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required tag_name str The name of the tag to delete required","title":"delete_artifact_tag()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_vulnerabilities","text":"Get the vulnerabilities for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required mime_type str A comma-separated lists of MIME types for the scan report or scan summary. 'application/vnd.security.vulnerability.report; version=1.1' Returns: Type Description Optional [ HarborVulnerabilityReport ] The vulnerabilities for the artifact, or None if the artifact is not found","title":"get_artifact_vulnerabilities()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact_accessories","text":"Get the tags for an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required query Optional [ str ] A query string to filter the accessories Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the tags. None page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Accessory ] A list of Accessory objects for the artifact.","title":"get_artifact_accessories()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.copy_artifact","text":"Copy an artifact. Parameters: Name Type Description Default project_name str Name of new artifact's project required repository_name str Name of new artifact's repository required source str The source artifact to copy from in the form of \"project/repository:tag\" or \"project/repository@digest\" required Returns: Type Description str The location of the new artifact","title":"copy_artifact()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifacts","text":"Get the artifacts for a repository. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required query Optional [ str ] A query string to filter the artifacts Except the basic properties, the other supported queries includes: \"tags=*\" to list only tagged artifacts \"tags=nil\" to list only untagged artifacts \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\" \"tags=v\" to list artifact whose tag exactly matches \"v\" \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 with_tag bool Whether to include the tags of the artifact in the response True with_label bool Whether to include the labels of the artifact in the response False with_scan_overview bool Whether to include the scan overview of the artifact in the response False with_signature bool Whether the signature is included inside the tags of the returning artifacts. Only works when setting with_tag==True . False with_immutable_status bool Whether the immutable status is included inside the tags of the returning artifacts. False with_accessory bool Whether the accessories are included of the returning artifacts. False mime_type str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 application/vnd.security.vulnerability.report; version=1.1 'application/vnd.security.vulnerability.report; version=1.1' retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Artifact ] A list of artifacts in the repository matching the query.","title":"get_artifacts()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.add_artifact_label","text":"Add a label to an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required label Label The label to add required","title":"add_artifact_label()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.delete_artifact_label","text":"Delete an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required label_id int The id of the label to delete required missing_ok bool Whether to ignore 404 error when deleting the label False","title":"delete_artifact_label()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.get_artifact","text":"Get an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required page int The page of results to return 1 page_size int The number of results to return per page 10 with_tag bool Whether to include the tags of the artifact in the response True with_label bool Whether to include the labels of the artifact in the response False with_scan_overview bool Whether to include the scan overview of the artifact in the response False with_signature bool Whether the signature is included inside the tags of the returning artifact. Only works when setting with_tag==True . False with_immutable_status bool Whether the immutable status is included inside the tags of the returning artifact. False with_accessory bool Whether the accessories are included of the returning artifact. False mime_type str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 application/vnd.security.vulnerability.report; version=1.1 'application/vnd.security.vulnerability.report; version=1.1' Returns: Type Description Artifact An artifact.","title":"get_artifact()"},{"location":"endpoints/artifacts/#harborapi.client.HarborAsyncClient.delete_artifact","text":"Delete an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required missing_ok bool Whether to ignore 404 error when deleting the artifact False","title":"delete_artifact()"},{"location":"endpoints/audit/","text":"Audit get_audit_logs ( query = None , sort = None , page = 1 , page_size = 10 , retrieve_all = False ) async Get a list of audit logs for the projects the user is a member of. Note Set retrieve_all to True to retrieve the entire audit log for all projects. Parameters: Name Type Description Default query Optional [ str ] Query string to query resources. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with \"sort=field1,-field2\" None page int The page number to fetch resources from. 1 page_size int The number of resources to fetch per page. 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . False Returns: Type Description List [ AuditLog ] The list of audit logs.","title":"Audit"},{"location":"endpoints/audit/#audit","text":"","title":"Audit"},{"location":"endpoints/audit/#harborapi.client.HarborAsyncClient.get_audit_logs","text":"Get a list of audit logs for the projects the user is a member of. Note Set retrieve_all to True to retrieve the entire audit log for all projects. Parameters: Name Type Description Default query Optional [ str ] Query string to query resources. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with \"sort=field1,-field2\" None page int The page number to fetch resources from. 1 page_size int The number of resources to fetch per page. 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . False Returns: Type Description List [ AuditLog ] The list of audit logs.","title":"get_audit_logs()"},{"location":"endpoints/configure/","text":"Configure get_config () async Get the system configuration. Attention Requires admin privileges or a privileged Robot account. Returns: Type Description ConfigurationsResponse The system configuration. update_config ( config ) async Fully or partially update the system configuration. Attention Requires admin privileges or a privileged Robot account. Parameters: Name Type Description Default config Configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. required get_internal_config () async Get the internal configuration. Cannot be called by normal user accounts. Danger It is likely not possible to call this method due to its internal account requirement, but it is included for completeness and to allow for future use. Returns: Type Description InternalConfigurationsResponse Internal system configuration.","title":"Configure"},{"location":"endpoints/configure/#configure","text":"","title":"Configure"},{"location":"endpoints/configure/#harborapi.client.HarborAsyncClient.get_config","text":"Get the system configuration. Attention Requires admin privileges or a privileged Robot account. Returns: Type Description ConfigurationsResponse The system configuration.","title":"get_config()"},{"location":"endpoints/configure/#harborapi.client.HarborAsyncClient.update_config","text":"Fully or partially update the system configuration. Attention Requires admin privileges or a privileged Robot account. Parameters: Name Type Description Default config Configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. required","title":"update_config()"},{"location":"endpoints/configure/#harborapi.client.HarborAsyncClient.get_internal_config","text":"Get the internal configuration. Cannot be called by normal user accounts. Danger It is likely not possible to call this method due to its internal account requirement, but it is included for completeness and to allow for future use. Returns: Type Description InternalConfigurationsResponse Internal system configuration.","title":"get_internal_config()"},{"location":"endpoints/cveallowlist/","text":"CVE Allowlist get_cve_allowlist () async Gets the current CVE allowlist. Returns: Type Description CVEAllowlist The current CVE allowlist. update_cve_allowlist ( allowlist ) async Overwrites the existing CVE allowlist with a new one. Parameters: Name Type Description Default allowlist CVEAllowlist The new CVE allowlist. required","title":"CVE Allowlist"},{"location":"endpoints/cveallowlist/#cve-allowlist","text":"","title":"CVE Allowlist"},{"location":"endpoints/cveallowlist/#harborapi.client.HarborAsyncClient.get_cve_allowlist","text":"Gets the current CVE allowlist. Returns: Type Description CVEAllowlist The current CVE allowlist.","title":"get_cve_allowlist()"},{"location":"endpoints/cveallowlist/#harborapi.client.HarborAsyncClient.update_cve_allowlist","text":"Overwrites the existing CVE allowlist with a new one. Parameters: Name Type Description Default allowlist CVEAllowlist The new CVE allowlist. required","title":"update_cve_allowlist()"},{"location":"endpoints/health/","text":"Health Check health_check () async Gets the health status of the Harbor server. Returns: Type Description OverallHealthStatus The health status of the Harbor server.","title":"Health Check"},{"location":"endpoints/health/#health-check","text":"","title":"Health Check"},{"location":"endpoints/health/#harborapi.client.HarborAsyncClient.health_check","text":"Gets the health status of the Harbor server. Returns: Type Description OverallHealthStatus The health status of the Harbor server.","title":"health_check()"},{"location":"endpoints/oidc/","text":"OIDC test_oidc ( oidcreq ) async Tests an OIDC endpoint. Can only be called by system admin. Raises StatusError if endpoint is unreachable. Parameters: Name Type Description Default oidcreq OIDCTestReq The OIDC test request. required","title":"OIDC"},{"location":"endpoints/oidc/#oidc","text":"","title":"OIDC"},{"location":"endpoints/oidc/#harborapi.client.HarborAsyncClient.test_oidc","text":"Tests an OIDC endpoint. Can only be called by system admin. Raises StatusError if endpoint is unreachable. Parameters: Name Type Description Default oidcreq OIDCTestReq The OIDC test request. required","title":"test_oidc()"},{"location":"endpoints/ping/","text":"Ping ping_harbor_api () async Pings the Harbor server to check if it is alive. Returns: Type Description str Text response from the server.","title":"Ping"},{"location":"endpoints/ping/#ping","text":"","title":"Ping"},{"location":"endpoints/ping/#harborapi.client.HarborAsyncClient.ping_harbor_api","text":"Pings the Harbor server to check if it is alive. Returns: Type Description str Text response from the server.","title":"ping_harbor_api()"},{"location":"endpoints/projects/","text":"Projects set_project_scanner ( project_name_or_id , scanner_uuid ) async Set one of the system configured scanner registration as the indepndent scanner of the specified project. Parameters: Name Type Description Default project_name_or_id str The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. Strings arguments set the \"X-Is-Resource-Name\" header to true . required scanner_uuid str The UUID of the scanner to set as the independent scanner of the project required get_project_scanner ( project_name_or_id ) async Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned. Parameters: Name Type Description Default project_name_or_id str The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. Strings arguments set the \"X-Is-Resource-Name\" header to true . required Returns: Type Description ScannerRegistration The scanner registration of the specified project get_project_logs ( project_name , query = None , sort = None , page = 1 , page_size = 10 , retrieve_all = False ) async Get the audit logs of the specified project. Parameters: Name Type Description Default project_name str The name of the project required query Optional [ str ] Query string to filter the logs. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . False project_exists ( project_name ) async Check if a project exists. Parameters: Name Type Description Default project_name str The name of the project required create_project ( project ) async Create a new project. Returns location of the created project. get_projects ( query = None , sort = None , name = None , public = None , owner = None , with_detail = True , page = 1 , page_size = 10 , retrieve_all = True ) async Get the artifacts for a repository. Parameters: Name Type Description Default query Optional [ str ] Query string to query resources. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the projects. None name Optional [ str ] The name of the project. None public Optional [ bool ] Only fetch public projects. None owner Optional [ str ] The owner of the project. None with_detail bool Return detailed information about the project. True page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True update_project ( project_name_or_id , project ) async Update a project. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required project ProjectReq The updated project required get_project ( project_name_or_id ) async Fetch a project given its name or ID. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required delete_project ( project_name_or_id , missing_ok = False ) async Delete a project given its name or ID. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required missing_ok bool If true, ignore 404 error when the project is not found. False get_project_scanner_candidates ( project_name_or_id , query = None , sort = None , page = 1 , page_size = 10 ) async Get the scanner candidates for a project. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required query Optional [ str ] Query string to query resources. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the scanners. None page int The page of results to return 1 page_size int The number of results to return per page 10 get_project_summary ( project_name_or_id ) async Get the summary of a project. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required","title":"Projects"},{"location":"endpoints/projects/#projects","text":"","title":"Projects"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.set_project_scanner","text":"Set one of the system configured scanner registration as the indepndent scanner of the specified project. Parameters: Name Type Description Default project_name_or_id str The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. Strings arguments set the \"X-Is-Resource-Name\" header to true . required scanner_uuid str The UUID of the scanner to set as the independent scanner of the project required","title":"set_project_scanner()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_scanner","text":"Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned. Parameters: Name Type Description Default project_name_or_id str The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. Strings arguments set the \"X-Is-Resource-Name\" header to true . required Returns: Type Description ScannerRegistration The scanner registration of the specified project","title":"get_project_scanner()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_logs","text":"Get the audit logs of the specified project. Parameters: Name Type Description Default project_name str The name of the project required query Optional [ str ] Query string to filter the logs. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . False","title":"get_project_logs()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.project_exists","text":"Check if a project exists. Parameters: Name Type Description Default project_name str The name of the project required","title":"project_exists()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.create_project","text":"Create a new project. Returns location of the created project.","title":"create_project()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.get_projects","text":"Get the artifacts for a repository. Parameters: Name Type Description Default query Optional [ str ] Query string to query resources. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the projects. None name Optional [ str ] The name of the project. None public Optional [ bool ] Only fetch public projects. None owner Optional [ str ] The owner of the project. None with_detail bool Return detailed information about the project. True page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True","title":"get_projects()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.update_project","text":"Update a project. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required project ProjectReq The updated project required","title":"update_project()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.get_project","text":"Fetch a project given its name or ID. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required","title":"get_project()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.delete_project","text":"Delete a project given its name or ID. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required missing_ok bool If true, ignore 404 error when the project is not found. False","title":"delete_project()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_scanner_candidates","text":"Get the scanner candidates for a project. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required query Optional [ str ] Query string to query resources. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the scanners. None page int The page of results to return 1 page_size int The number of results to return per page 10","title":"get_project_scanner_candidates()"},{"location":"endpoints/projects/#harborapi.client.HarborAsyncClient.get_project_summary","text":"Get the summary of a project. Parameters: Name Type Description Default project_name_or_id Union [ str , int ] The name or ID of the project String arguments are treated as project names. Integer arguments are treated as project IDs. required","title":"get_project_summary()"},{"location":"endpoints/quota/","text":"Quota get_quotas ( reference = None , reference_id = None , sort = None , page = 1 , page_size = 10 , retrieve_all = True ) async Get quotas. Parameters: Name Type Description Default reference str The reference type of the quota. TODO: document what these values can be. None reference_id str The reference id of the quota None sort str Sort method. Valid values include: \"hard.resource_name\" \"-hard.resource_name\" \"used.resource_name\" \"-used.resource_name\" - denotes descending order resource_name should be the real resource name of the quota None page int The page number to retrieve resources from. 1 page_size int The number of resources to retrieve per page. 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Quota ] The quotas update_quota ( id , quota ) async Update a quota. Parameters: Name Type Description Default id int The id of the quota to update. required quota QuotaUpdateReq The new quota values. QuotaUpdateReq.hard allows assignment of any attribute with an int value. Example: QuotaUpdateReq ( hard = { \"storage\" : 100000 , \"other_property\" : 1234 } ) required get_quota ( id ) async Get a quota by id. Parameters: Name Type Description Default id int The id of the quota to get. required Returns: Type Description Quota The quota","title":"Quota"},{"location":"endpoints/quota/#quota","text":"","title":"Quota"},{"location":"endpoints/quota/#harborapi.client.HarborAsyncClient.get_quotas","text":"Get quotas. Parameters: Name Type Description Default reference str The reference type of the quota. TODO: document what these values can be. None reference_id str The reference id of the quota None sort str Sort method. Valid values include: \"hard.resource_name\" \"-hard.resource_name\" \"used.resource_name\" \"-used.resource_name\" - denotes descending order resource_name should be the real resource name of the quota None page int The page number to retrieve resources from. 1 page_size int The number of resources to retrieve per page. 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Quota ] The quotas","title":"get_quotas()"},{"location":"endpoints/quota/#harborapi.client.HarborAsyncClient.update_quota","text":"Update a quota. Parameters: Name Type Description Default id int The id of the quota to update. required quota QuotaUpdateReq The new quota values. QuotaUpdateReq.hard allows assignment of any attribute with an int value. Example: QuotaUpdateReq ( hard = { \"storage\" : 100000 , \"other_property\" : 1234 } ) required","title":"update_quota()"},{"location":"endpoints/quota/#harborapi.client.HarborAsyncClient.get_quota","text":"Get a quota by id. Parameters: Name Type Description Default id int The id of the quota to get. required Returns: Type Description Quota The quota","title":"get_quota()"},{"location":"endpoints/registries/","text":"Registries check_registry_status ( ping ) async Check the status of the registry. Parameters: Name Type Description Default ping RegistryPing The ping request required get_registry_adapters () async Get the list of available registry adapters. Returns: Type Description List [ str ] The list of available registry adapters get_registry_info ( id ) async Get the info of a registry. Parameters: Name Type Description Default id int The ID of the registry required Returns: Type Description RegistryInfo The info of a registry get_registry_providers () async Get all registered registry provider information. Returns: Type Description List [ RegistryProviderInfo ] A list of RegistryProviderInfo objects. update_registry ( id , registry ) async Update a registry. Parameters: Name Type Description Default id int The ID of the registry required registry RegistryUpdate The updated registry values. required get_registry ( id ) async Get a registry. Parameters: Name Type Description Default id int The ID of the registry required Returns: Type Description Registry The registry delete_registry ( id , missing_ok = False ) async Delete a registry. Parameters: Name Type Description Default id int The ID of the registry required missing_ok bool If True, don't raise an exception if the registry doesn't exist. False create_registry ( registry ) async Create a new registry. Parameters: Name Type Description Default registry Registry The new registry values. required Returns: Type Description str The location of the created registry. get_registries ( query = None , sort = None , page = 1 , page_size = 10 , name = None , retrieve_all = True ) async Get all registries. Parameters: Name Type Description Default query Optional [ str ] A query string to filter the registries. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 name Optional [ str ] The name of the registry (deprecated, use query instead) None retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Registry ] A list of Registry objects.","title":"Registries"},{"location":"endpoints/registries/#registries","text":"","title":"Registries"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.check_registry_status","text":"Check the status of the registry. Parameters: Name Type Description Default ping RegistryPing The ping request required","title":"check_registry_status()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry_adapters","text":"Get the list of available registry adapters. Returns: Type Description List [ str ] The list of available registry adapters","title":"get_registry_adapters()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry_info","text":"Get the info of a registry. Parameters: Name Type Description Default id int The ID of the registry required Returns: Type Description RegistryInfo The info of a registry","title":"get_registry_info()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry_providers","text":"Get all registered registry provider information. Returns: Type Description List [ RegistryProviderInfo ] A list of RegistryProviderInfo objects.","title":"get_registry_providers()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.update_registry","text":"Update a registry. Parameters: Name Type Description Default id int The ID of the registry required registry RegistryUpdate The updated registry values. required","title":"update_registry()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.get_registry","text":"Get a registry. Parameters: Name Type Description Default id int The ID of the registry required Returns: Type Description Registry The registry","title":"get_registry()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.delete_registry","text":"Delete a registry. Parameters: Name Type Description Default id int The ID of the registry required missing_ok bool If True, don't raise an exception if the registry doesn't exist. False","title":"delete_registry()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.create_registry","text":"Create a new registry. Parameters: Name Type Description Default registry Registry The new registry values. required Returns: Type Description str The location of the created registry.","title":"create_registry()"},{"location":"endpoints/registries/#harborapi.client.HarborAsyncClient.get_registries","text":"Get all registries. Parameters: Name Type Description Default query Optional [ str ] A query string to filter the registries. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 name Optional [ str ] The name of the registry (deprecated, use query instead) None retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Registry ] A list of Registry objects.","title":"get_registries()"},{"location":"endpoints/repositories/","text":"Repositories get_repository ( project_id , repository_name ) async Get a repository. Parameters: Name Type Description Default project_id int The id of the project the repository belongs to. required repository_name str The name of the repository. required Returns: Type Description Repository The repository. update_repository ( project_name , repository_name , repository ) async Update a repository. Parameters: Name Type Description Default project_name str The name of the project the repository belongs to. required repository_name str The name of the repository. required repository Repository The new repository values. required delete_repository ( project_id , repository_name , missing_ok = False ) async Get a repository. Parameters: Name Type Description Default project_id int The id of the project the repository belongs to. required repository_name str The name of the repository. required missing_ok bool If true, do not raise an error if the repository does not exist. False get_repositories ( project_name = None , query = None , sort = None , page = 1 , page_size = 10 , retrieve_all = True ) async Get a list of repositories Parameters: Name Type Description Default project_name str The name of the project. None query str The query string to filter the repositories. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort str The sort method. TODO: add boilerplate sort documentation None page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Repository ] A list of repositories matching the query.","title":"Repositories"},{"location":"endpoints/repositories/#repositories","text":"","title":"Repositories"},{"location":"endpoints/repositories/#harborapi.client.HarborAsyncClient.get_repository","text":"Get a repository. Parameters: Name Type Description Default project_id int The id of the project the repository belongs to. required repository_name str The name of the repository. required Returns: Type Description Repository The repository.","title":"get_repository()"},{"location":"endpoints/repositories/#harborapi.client.HarborAsyncClient.update_repository","text":"Update a repository. Parameters: Name Type Description Default project_name str The name of the project the repository belongs to. required repository_name str The name of the repository. required repository Repository The new repository values. required","title":"update_repository()"},{"location":"endpoints/repositories/#harborapi.client.HarborAsyncClient.delete_repository","text":"Get a repository. Parameters: Name Type Description Default project_id int The id of the project the repository belongs to. required repository_name str The name of the repository. required missing_ok bool If true, do not raise an error if the repository does not exist. False","title":"delete_repository()"},{"location":"endpoints/repositories/#harborapi.client.HarborAsyncClient.get_repositories","text":"Get a list of repositories Parameters: Name Type Description Default project_name str The name of the project. None query str The query string to filter the repositories. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort str The sort method. TODO: add boilerplate sort documentation None page int The page of results to return 1 page_size int The number of results to return per page 10 retrieve_all bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by page_size . True Returns: Type Description List [ Repository ] A list of repositories matching the query.","title":"get_repositories()"},{"location":"endpoints/robots/","text":"Robots create_robot ( robot , path = None , overwrite = False ) async Create a new robot account. Attention This action requires a sysadmin account to perform. Parameters: Name Type Description Default robot RobotCreate The definition for the robot account to create. required path Optional [ Union [ str , Path ]] Optional path to save the robot credentials to. None overwrite bool If True, overwrite the existing credentials file. Has no effect if path is None . False Returns: Type Description RobotCreated Information about the created robot account. get_robots ( query = None , sort = None , page = 1 , page_size = 10 ) async Get all robot accounts, optionally filtered by query. Parameters: Name Type Description Default query Optional [ str ] A query string to filter the resources. Except the basic properties, the other supported queries includes: \"tags=*\" to list only tagged resources \"tags=nil\" to list only untagged resources \"tags=~v\" to list resources whose tag fuzzy matches \"v\" \"tags=v\" to list artifact whose tag exactly matches \"v\" \"labels=(id1, id2)\" to list resources that both labels with id1 and id2 are added to The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 Returns: Type Description List [ Robot ] A list of registered robot accounts matching the query. get_robot ( robot_id ) async Fetch a robot account by its ID. Parameters: Name Type Description Default robot_id int The ID of the robot account to get. required Returns: Type Description Robot Information about the robot account. update_robot ( robot_id , robot ) async Update a robot account. Parameters: Name Type Description Default robot_id int The ID of the robot account to update. required robot Robot The new definition for the robot account. required delete_robot ( robot_id , missing_ok = False ) async Delete a robot account. Parameters: Name Type Description Default robot_id int The ID of the robot account to delete. required missing_ok bool Do not raise an error if the robot account does not exist. False update_robot_secret ( robot_id , secret ) async Give the robot account a new secret. Parameters: Name Type Description Default robot_id int The ID of the robot account to refresh. required secret str The new secret for the robot account. required","title":"Robots"},{"location":"endpoints/robots/#robots","text":"","title":"Robots"},{"location":"endpoints/robots/#harborapi.client.HarborAsyncClient.create_robot","text":"Create a new robot account. Attention This action requires a sysadmin account to perform. Parameters: Name Type Description Default robot RobotCreate The definition for the robot account to create. required path Optional [ Union [ str , Path ]] Optional path to save the robot credentials to. None overwrite bool If True, overwrite the existing credentials file. Has no effect if path is None . False Returns: Type Description RobotCreated Information about the created robot account.","title":"create_robot()"},{"location":"endpoints/robots/#harborapi.client.HarborAsyncClient.get_robots","text":"Get all robot accounts, optionally filtered by query. Parameters: Name Type Description Default query Optional [ str ] A query string to filter the resources. Except the basic properties, the other supported queries includes: \"tags=*\" to list only tagged resources \"tags=nil\" to list only untagged resources \"tags=~v\" to list resources whose tag fuzzy matches \"v\" \"tags=v\" to list artifact whose tag exactly matches \"v\" \"labels=(id1, id2)\" to list resources that both labels with id1 and id2 are added to The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the artifacts. None page int The page of results to return 1 page_size int The number of results to return per page 10 Returns: Type Description List [ Robot ] A list of registered robot accounts matching the query.","title":"get_robots()"},{"location":"endpoints/robots/#harborapi.client.HarborAsyncClient.get_robot","text":"Fetch a robot account by its ID. Parameters: Name Type Description Default robot_id int The ID of the robot account to get. required Returns: Type Description Robot Information about the robot account.","title":"get_robot()"},{"location":"endpoints/robots/#harborapi.client.HarborAsyncClient.update_robot","text":"Update a robot account. Parameters: Name Type Description Default robot_id int The ID of the robot account to update. required robot Robot The new definition for the robot account. required","title":"update_robot()"},{"location":"endpoints/robots/#harborapi.client.HarborAsyncClient.delete_robot","text":"Delete a robot account. Parameters: Name Type Description Default robot_id int The ID of the robot account to delete. required missing_ok bool Do not raise an error if the robot account does not exist. False","title":"delete_robot()"},{"location":"endpoints/robots/#harborapi.client.HarborAsyncClient.update_robot_secret","text":"Give the robot account a new secret. Parameters: Name Type Description Default robot_id int The ID of the robot account to refresh. required secret str The new secret for the robot account. required","title":"update_robot_secret()"},{"location":"endpoints/scan/","text":"Scan scan_artifact ( project_name , repository_name , reference ) async Scan an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required get_artifact_scan_report_log ( project_name , repository_name , reference , report_id ) async Get the log of a scan report. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required report_id str The ID of the scan report required Returns: Type Description str The log of a scan report stop_artifact_scan ( project_name , repository_name , reference ) async Stop a scan for a particular artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required","title":"Scan"},{"location":"endpoints/scan/#scan","text":"","title":"Scan"},{"location":"endpoints/scan/#harborapi.client.HarborAsyncClient.scan_artifact","text":"Scan an artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required","title":"scan_artifact()"},{"location":"endpoints/scan/#harborapi.client.HarborAsyncClient.get_artifact_scan_report_log","text":"Get the log of a scan report. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required report_id str The ID of the scan report required Returns: Type Description str The log of a scan report","title":"get_artifact_scan_report_log()"},{"location":"endpoints/scan/#harborapi.client.HarborAsyncClient.stop_artifact_scan","text":"Stop a scan for a particular artifact. Parameters: Name Type Description Default project_name str The name of the project required repository_name str The name of the repository required reference str The reference of the artifact, can be digest or tag required","title":"stop_artifact_scan()"},{"location":"endpoints/scanall/","text":"Scan All get_scan_all_metrics () async Get metrics for a Scan All job. Returns: Type Description Stats The metrics for the Scan All job. update_scan_all_schedule ( schedule ) async Update the schedule for a Scan All job. Parameters: Name Type Description Default schedule Schedule The new schedule for the Scan All job required create_scan_all_schedule ( schedule ) async Create a new scan all job schedule. Returns location of the created schedule. Parameters: Name Type Description Default schedule Schedule The schedule to create required Returns: Type Description str The location of the created schedule get_scan_all_schedule () async Get the schedule for a Scan All job. Returns: Type Description Schedule The schedule for the Scan All job. stop_scan_all_job () async Stop a Scan All job.","title":"Scan All"},{"location":"endpoints/scanall/#scan-all","text":"","title":"Scan All"},{"location":"endpoints/scanall/#harborapi.client.HarborAsyncClient.get_scan_all_metrics","text":"Get metrics for a Scan All job. Returns: Type Description Stats The metrics for the Scan All job.","title":"get_scan_all_metrics()"},{"location":"endpoints/scanall/#harborapi.client.HarborAsyncClient.update_scan_all_schedule","text":"Update the schedule for a Scan All job. Parameters: Name Type Description Default schedule Schedule The new schedule for the Scan All job required","title":"update_scan_all_schedule()"},{"location":"endpoints/scanall/#harborapi.client.HarborAsyncClient.create_scan_all_schedule","text":"Create a new scan all job schedule. Returns location of the created schedule. Parameters: Name Type Description Default schedule Schedule The schedule to create required Returns: Type Description str The location of the created schedule","title":"create_scan_all_schedule()"},{"location":"endpoints/scanall/#harborapi.client.HarborAsyncClient.get_scan_all_schedule","text":"Get the schedule for a Scan All job. Returns: Type Description Schedule The schedule for the Scan All job.","title":"get_scan_all_schedule()"},{"location":"endpoints/scanall/#harborapi.client.HarborAsyncClient.stop_scan_all_job","text":"Stop a Scan All job.","title":"stop_scan_all_job()"},{"location":"endpoints/scanners/","text":"Scanners create_scanner ( scanner ) async Creates a new scanner. Returns location of the created scanner. Parameters: Name Type Description Default scanner ScannerRegistrationReq The scanner to create. required Returns: Type Description str The location of the created scanner. get_scanners ( query = None , sort = None , page = 1 , page_size = 10 ) async Get a list of scanners. Parameters: Name Type Description Default query Optional [ str ] A query string to filter the scanners. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the scanners. None page int The page of results to return 1 page_size int The number of results to return per page 10 Returns: Type Description List [ ScannerRegistration ] description get_scanner ( registration_id ) async Fetch a scanner by ID. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to fetch. required Returns: Type Description ScannerRegistration The scanner. delete_scanner ( registration_id , missing_ok = False ) async Delete a scanner by ID. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to delete. required missing_ok bool Whether to ignore 404 error when deleting the scanner. False Returns: Type Description Optional [ ScannerRegistration ] The scanner, or None if the scanner is not found and missing_ok is True. Raises: Type Description HarborAPIException Successful deletion request that returns an empty response. set_default_scanner ( registration_id , is_default = True ) async Set a scanner as the default scanner. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to set as the default. required is_default bool Whether to set the scanner as the default, by default True . Set to False to unset the scanner as the default. True ping_scanner_adapter ( settings ) async Ping a scanner adapter. Parameters: Name Type Description Default settings ScannerRegistrationSettings The settings of the scanner adapter. required update_scanner ( registration_id , scanner ) async Update a scanner. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to update. required scanner ScannerRegistrationReq The updated scanner definition. required","title":"Scanners"},{"location":"endpoints/scanners/#scanners","text":"","title":"Scanners"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.create_scanner","text":"Creates a new scanner. Returns location of the created scanner. Parameters: Name Type Description Default scanner ScannerRegistrationReq The scanner to create. required Returns: Type Description str The location of the created scanner.","title":"create_scanner()"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.get_scanners","text":"Get a list of scanners. Parameters: Name Type Description Default query Optional [ str ] A query string to filter the scanners. Supported query patterns are: exact match( \"k=v\" ) fuzzy match( \"k=~v\" ) range( \"k=[min~max]\" ) list with union releationship( \"k={v1 v2 v3}\" ) list with intersection relationship( \"k=(v1 v2 v3)\" ). The value of range and list can be: string(enclosed by \" or ' ) integer time(in format \"2020-04-09 02:36:00\" ) All of these query patterns should be put in the query string and separated by \",\" . e.g. \"k1=v1,k2=~v2,k3=[min~max]\" None sort Optional [ str ] The sort order of the scanners. None page int The page of results to return 1 page_size int The number of results to return per page 10 Returns: Type Description List [ ScannerRegistration ] description","title":"get_scanners()"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.get_scanner","text":"Fetch a scanner by ID. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to fetch. required Returns: Type Description ScannerRegistration The scanner.","title":"get_scanner()"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.delete_scanner","text":"Delete a scanner by ID. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to delete. required missing_ok bool Whether to ignore 404 error when deleting the scanner. False Returns: Type Description Optional [ ScannerRegistration ] The scanner, or None if the scanner is not found and missing_ok is True. Raises: Type Description HarborAPIException Successful deletion request that returns an empty response.","title":"delete_scanner()"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.set_default_scanner","text":"Set a scanner as the default scanner. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to set as the default. required is_default bool Whether to set the scanner as the default, by default True . Set to False to unset the scanner as the default. True","title":"set_default_scanner()"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.ping_scanner_adapter","text":"Ping a scanner adapter. Parameters: Name Type Description Default settings ScannerRegistrationSettings The settings of the scanner adapter. required","title":"ping_scanner_adapter()"},{"location":"endpoints/scanners/#harborapi.client.HarborAsyncClient.update_scanner","text":"Update a scanner. Parameters: Name Type Description Default registration_id Union [ int , str ] The ID of the scanner to update. required scanner ScannerRegistrationReq The updated scanner definition. required","title":"update_scanner()"},{"location":"endpoints/search/","text":"Search search ( query ) async Search for projects, repositories and helm charts that the user has access to. WARNING This method's API seems immature and may change in the future. Right now we just copy the API spec, which only takes a query string. Parameters: Name Type Description Default query str Project and/or repository name to search for. required Returns: Type Description Search The search results.","title":"Search"},{"location":"endpoints/search/#search","text":"","title":"Search"},{"location":"endpoints/search/#harborapi.client.HarborAsyncClient.search","text":"Search for projects, repositories and helm charts that the user has access to.","title":"search()"},{"location":"endpoints/search/#harborapi.client.HarborAsyncClient.search--warning","text":"This method's API seems immature and may change in the future. Right now we just copy the API spec, which only takes a query string. Parameters: Name Type Description Default query str Project and/or repository name to search for. required Returns: Type Description Search The search results.","title":"WARNING"},{"location":"endpoints/statistics/","text":"Statistics get_statistics () async Get statistics on the Harbor server. Returns: Type Description Statistic The statistics on the Harbor server","title":"Statistics"},{"location":"endpoints/statistics/#statistics","text":"","title":"Statistics"},{"location":"endpoints/statistics/#harborapi.client.HarborAsyncClient.get_statistics","text":"Get statistics on the Harbor server. Returns: Type Description Statistic The statistics on the Harbor server","title":"get_statistics()"},{"location":"endpoints/systeminfo/","text":"System Info get_system_volume_info () async Get info about the system's volumes. Returns: Type Description SystemInfo Information about the system's volumes. get_system_info () async Get general info about the system. Returns: Type Description GeneralInfo The general info about the system","title":"System Info"},{"location":"endpoints/systeminfo/#system-info","text":"","title":"System Info"},{"location":"endpoints/systeminfo/#harborapi.client.HarborAsyncClient.get_system_volume_info","text":"Get info about the system's volumes. Returns: Type Description SystemInfo Information about the system's volumes.","title":"get_system_volume_info()"},{"location":"endpoints/systeminfo/#harborapi.client.HarborAsyncClient.get_system_info","text":"Get general info about the system. Returns: Type Description GeneralInfo The general info about the system","title":"get_system_info()"},{"location":"endpoints/users/","text":"Users get_users ( sort = None , ** kwargs ) async Get all users. Parameters: Name Type Description Default sort Optional [ str ] The sort order for the results. None Returns: Type Description List [ UserResp ] A list of users. get_users_by_username ( username , page = 1 , page_size = 100 , retrieve_all = True ) async Search for users by username. Parameters: Name Type Description Default username str The username to search for required page int The page of results to return 1 page_size int The number of results to return per page 100 retrieve_all bool If True, retrieve all results, otherwise, retrieve only the first page True get_user ( user_id ) async Get information about a user. Parameters: Name Type Description Default user_id int The ID of the user to get information about required Returns: Type Description UserResp Information about the user. create_user ( user ) async Create a new user. Can only be used when the authentication mode is for local DB, when self registration is disabled. Parameters: Name Type Description Default user UserCreationReq The user to create required Returns: Type Description str The location of the created user delete_user ( user_id , missing_ok = False ) async Delete a user. Parameters: Name Type Description Default user_id int The ID of the user to delete required missing_ok bool Do not raise an error if the user does not exist. False update_user_profile ( user_id , user ) async Update a user's profile. Parameters: Name Type Description Default user_id int The ID of the user to update required user UserProfile The user profile to update required set_user_admin ( user_id , is_admin ) async Set a user's admin status. Parameters: Name Type Description Default user_id int The ID of the user to set the admin status for required is_admin bool Whether the user should be an admin or not required set_user_password ( user_id , new_password , old_password = None ) async Set a user's password. Admin users can change any user's password. Non-admin users can only change their own password. Parameters: Name Type Description Default user_id int The ID of the user to set the password for required new_password str The new password to set for the user required old_password str The old password for the user, not required if API user is admin. None Raises: Type Description BadRequest Raised for any of the following reasons: Invalid user ID Password does not meet requirement Old password is incorrect set_user_cli_secret ( user_id , secret ) async Set the CLI secret for a user. Parameters: Name Type Description Default user_id int The ID of the user to set the secret for required secret str The secret to set for the user required Raises: Type Description BadRequest Invalid user ID. Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard. (This is a Harbor API implementation detail.) get_current_user () async Get information about the current user. Returns: Type Description UserResp Information about the current user. get_current_user_permissions ( scope = None , relative = False ) async Get current user permissions. Parameters: Name Type Description Default scope Optional [ str ] The scope for the permission None relative bool Display resource paths relative to the scope. Has no effect if scope is not specified False Returns: Type Description List [ Permission ] A list of Permission objects for the current user.","title":"Users"},{"location":"endpoints/users/#users","text":"","title":"Users"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.get_users","text":"Get all users. Parameters: Name Type Description Default sort Optional [ str ] The sort order for the results. None Returns: Type Description List [ UserResp ] A list of users.","title":"get_users()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.get_users_by_username","text":"Search for users by username. Parameters: Name Type Description Default username str The username to search for required page int The page of results to return 1 page_size int The number of results to return per page 100 retrieve_all bool If True, retrieve all results, otherwise, retrieve only the first page True","title":"get_users_by_username()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.get_user","text":"Get information about a user. Parameters: Name Type Description Default user_id int The ID of the user to get information about required Returns: Type Description UserResp Information about the user.","title":"get_user()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.create_user","text":"Create a new user. Can only be used when the authentication mode is for local DB, when self registration is disabled. Parameters: Name Type Description Default user UserCreationReq The user to create required Returns: Type Description str The location of the created user","title":"create_user()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.delete_user","text":"Delete a user. Parameters: Name Type Description Default user_id int The ID of the user to delete required missing_ok bool Do not raise an error if the user does not exist. False","title":"delete_user()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.update_user_profile","text":"Update a user's profile. Parameters: Name Type Description Default user_id int The ID of the user to update required user UserProfile The user profile to update required","title":"update_user_profile()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.set_user_admin","text":"Set a user's admin status. Parameters: Name Type Description Default user_id int The ID of the user to set the admin status for required is_admin bool Whether the user should be an admin or not required","title":"set_user_admin()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.set_user_password","text":"Set a user's password. Admin users can change any user's password. Non-admin users can only change their own password. Parameters: Name Type Description Default user_id int The ID of the user to set the password for required new_password str The new password to set for the user required old_password str The old password for the user, not required if API user is admin. None Raises: Type Description BadRequest Raised for any of the following reasons: Invalid user ID Password does not meet requirement Old password is incorrect","title":"set_user_password()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.set_user_cli_secret","text":"Set the CLI secret for a user. Parameters: Name Type Description Default user_id int The ID of the user to set the secret for required secret str The secret to set for the user required Raises: Type Description BadRequest Invalid user ID. Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard. (This is a Harbor API implementation detail.)","title":"set_user_cli_secret()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.get_current_user","text":"Get information about the current user. Returns: Type Description UserResp Information about the current user.","title":"get_current_user()"},{"location":"endpoints/users/#harborapi.client.HarborAsyncClient.get_current_user_permissions","text":"Get current user permissions. Parameters: Name Type Description Default scope Optional [ str ] The scope for the permission None relative bool Display resource paths relative to the scope. Has no effect if scope is not specified False Returns: Type Description List [ Permission ] A list of Permission objects for the current user.","title":"get_current_user_permissions()"},{"location":"reference/client/","text":"HarborAsyncClient See Endpoints for all methods implemented on the class used to interact with the Harbor API. Source code in harborapi/client.pyclass HarborAsyncClient : def __init__ ( self , url : str , username : Optional [ str ] = None , secret : Optional [ str ] = None , credentials : Optional [ str ] = None , credentials_file : Optional [ Union [ str , Path ]] = None , logging : bool = False , config : Optional [ Any ] = None , # NYI version : str = \"2.0\" , ** kwargs : Any , ) -> None : \"\"\"Initialize a new HarborAsyncClient with either a username and secret, an authentication token, or a credentials file. Parameters ---------- url : str The URL of the Harbor server in the format `http://host:[port]/api/v<version>` Example: `http://localhost:8080/api/v2.0` username : Optional[str] Username to use for authentication. If not provided, the client attempts to use `credentials` to authenticate. secret : Optional[str] Secret to use for authentication along with `username`. credentials : Optional[str] base64-encoded Basic Access Authentication credentials to use for authentication in place of `username` and `secret`. credentials_file : Optional[Union[str, Path]] Path to a JSON-encoded credentials file from which to load credentials. logging : bool Enable client logging with `Loguru`. config : Optional[Any] (NYI) config version : str Used to construct URL if the specified URL does not contain the version. Raises ------ ValueError Neither `username` and `secret`, `credentials` nor `credentials_file` are provided. \"\"\" if username and secret : self . credentials = get_credentials ( username , secret ) elif credentials : self . credentials = credentials elif credentials_file : crfile = load_harbor_auth_file ( credentials_file ) self . credentials = get_credentials ( crfile . name , crfile . secret ) # type: ignore # load_harbor_auth_file guarantees these are not None else : raise ValueError ( \"Must provide username and secret, credentials, or credentials_file\" ) # TODO: add URL regex and improve parsing OR don't police this at all url = url . strip ( \"/\" ) # remove trailing slash if version and not \"/api/v\" in url : version = str ( version ) if \"v\" not in version : version = f \"v { version } \" if \"/api\" in url : url = url . strip ( \"/\" ) + \"/\" + version else : url = url + \"/api/\" + version self . url = url . strip ( \"/\" ) # make sure we haven't added a trailing slash again self . config = config self . client = httpx . AsyncClient () # NOTE: make env var? if logging : # we explicitly enable the logger here, because previous instantiations # of the client may have disabled it. logger . enable ( \"harborapi\" ) else : logger . disable ( \"harborapi\" ) # NOTE: add destructor that closes client? # CATEGORY: user # PUT /users/{user_id}/cli_secret async def set_user_cli_secret ( self , user_id : int , secret : str , ) -> None : \"\"\"Set the CLI secret for a user. Parameters ---------- user_id : int The ID of the user to set the secret for secret : str The secret to set for the user Raises ------ BadRequest Invalid user ID. Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard. (This is a Harbor API implementation detail.) \"\"\" try : await self . put ( f \"/users/ { user_id } /cli_secret\" , json = { \"secret\" : secret }) except BadRequest as e : logger . error ( e . __cause__ . response . text if e . __cause__ else e . __str__ ()) # TODO: do anything else here? Raise a more specific exception? raise # GET /users/search async def get_users_by_username ( self , username : str , page : int = 1 , page_size : int = 100 , retrieve_all : bool = True , ) -> List [ UserSearchRespItem ]: \"\"\"Search for users by username. Parameters ---------- username : str The username to search for page : int The page of results to return page_size : int The number of results to return per page retrieve_all : bool If True, retrieve all results, otherwise, retrieve only the first page \"\"\" params = { \"username\" : username , \"page\" : page , \"page_size\" : page_size } users_resp = await self . get ( \"/users/search\" , params = params , follow_links = retrieve_all , ) return [ construct_model ( UserSearchRespItem , u ) for u in users_resp ] # GET /users/current/permissions async def get_current_user_permissions ( self , scope : Optional [ str ] = None , relative : bool = False ) -> List [ Permission ]: \"\"\"Get current user permissions. Parameters ---------- scope : Optional[str] The scope for the permission relative : bool Display resource paths relative to the scope. Has no effect if `scope` is not specified Returns ------- List[Permission] A list of Permission objects for the current user. \"\"\" params = {} # type: Dict[str, Any] if scope : params [ \"scope\" ] = scope params [ \"relative\" ] = relative resp = await self . get ( \"/users/current/permissions\" , params = params ) return [ construct_model ( Permission , p ) for p in resp ] # GET /users/current async def get_current_user ( self ) -> UserResp : \"\"\"Get information about the current user. Returns ------- UserResp Information about the current user. \"\"\" user_resp = await self . get ( \"/users/current\" ) return construct_model ( UserResp , user_resp ) # PUT /users/{user_id}/sysadmin async def set_user_admin ( self , user_id : int , is_admin : bool ) -> None : \"\"\"Set a user's admin status. Parameters ---------- user_id : int The ID of the user to set the admin status for is_admin : bool Whether the user should be an admin or not \"\"\" await self . put ( f \"/users/ { user_id } /sysadmin\" , json = UserSysAdminFlag ( sysadmin_flag = is_admin ) ) # PUT /users/{user_id}/password async def set_user_password ( self , user_id : int , new_password : str , old_password : Optional [ str ] = None , ) -> None : \"\"\"Set a user's password. Admin users can change any user's password. Non-admin users can only change their own password. Parameters ---------- user_id : int The ID of the user to set the password for new_password : str The new password to set for the user old_password : str The old password for the user, not required if API user is admin. Raises ------ BadRequest Raised for any of the following reasons: * Invalid user ID * Password does not meet requirement * Old password is incorrect \"\"\" try : await self . put ( f \"/users/ { user_id } /password\" , json = PasswordReq ( old_password = old_password , new_password = new_password ), ) except BadRequest as e : logger . error ( e . __cause__ . response . text if e . __cause__ else e . __str__ ()) raise # POST /users async def create_user ( self , user : UserCreationReq ) -> str : \"\"\"Create a new user. Can only be used when the authentication mode is for local DB, when self registration is disabled. Parameters ---------- user : UserCreationReq The user to create Returns ------- str The location of the created user \"\"\" resp = await self . post ( \"/users\" , json = user ) return urldecode_header ( resp , \"Location\" ) # GET /users async def get_users ( self , sort : Optional [ str ] = None , ** kwargs ) -> List [ UserResp ]: \"\"\"Get all users. Parameters ---------- sort : Optional[str] The sort order for the results. Returns ------- List[UserResp] A list of users. \"\"\" params = { ** kwargs } if sort : params [ \"sort\" ] = sort users_resp = await self . get ( \"/users\" , params = params ) return [ construct_model ( UserResp , u ) for u in users_resp ] # PUT /users/{user_id} async def update_user_profile ( self , user_id : int , user : UserProfile ) -> None : \"\"\"Update a user's profile. Parameters ---------- user_id : int The ID of the user to update user : UserProfile The user profile to update \"\"\" await self . put ( f \"/users/ { user_id } \" , json = user ) # GET /users/{user_id} async def get_user ( self , user_id : int ) -> UserResp : \"\"\"Get information about a user. Parameters ---------- user_id : int The ID of the user to get information about Returns ------- UserResp Information about the user. \"\"\" user_resp = await self . get ( f \"/users/ { user_id } \" ) return construct_model ( UserResp , user_resp ) # DELETE /users/{user_id} async def delete_user ( self , user_id : int , missing_ok : bool = False ) -> None : \"\"\"Delete a user. Parameters ---------- user_id : int The ID of the user to delete missing_ok : bool Do not raise an error if the user does not exist. \"\"\" await self . delete ( f \"/users/ { user_id } \" , missing_ok = missing_ok ) # CATEGORY: gc # CATEGORY: scanAll # GET /scans/all/metrics async def get_scan_all_metrics ( self ) -> Stats : \"\"\"Get metrics for a Scan All job. Returns ------- Stats The metrics for the Scan All job. \"\"\" resp = await self . get ( \"/scans/all/metrics\" ) return construct_model ( Stats , resp ) # PUT /system/scanAll/schedule async def update_scan_all_schedule ( self , schedule : Schedule ) -> None : \"\"\"Update the schedule for a Scan All job. Parameters ---------- schedule : Schedule The new schedule for the Scan All job \"\"\" await self . put ( \"/system/scanAll/schedule\" , json = schedule ) # POST /system/scanAll/schedule async def create_scan_all_schedule ( self , schedule : Schedule ) -> str : \"\"\"Create a new scan all job schedule. Returns location of the created schedule. Parameters ---------- schedule : Schedule The schedule to create Returns ------- str The location of the created schedule \"\"\" resp = await self . post ( \"/system/scanAll/schedule\" , json = schedule ) return urldecode_header ( resp , \"Location\" ) # GET /system/scanAll/schedule async def get_scan_all_schedule ( self ) -> Schedule : \"\"\"Get the schedule for a Scan All job. Returns ------- Schedule The schedule for the Scan All job. \"\"\" resp = await self . get ( \"/system/scanAll/schedule\" ) return construct_model ( Schedule , resp ) # POST /system/scanAll/stop async def stop_scan_all_job ( self ) -> None : \"\"\"Stop a Scan All job.\"\"\" await self . post ( \"/system/scanAll/stop\" ) # CATEGORY: configure # GET /internalconfig async def get_internal_config ( self ) -> InternalConfigurationsResponse : \"\"\" Get the internal configuration. Cannot be called by normal user accounts. !!! danger It is likely not possible to call this method due to its internal account requirement, but it is included for completeness and to allow for future use. Returns ------- InternalConfigurationsResponse Internal system configuration. \"\"\" resp = await self . get ( \"/internalconfig\" ) return construct_model ( InternalConfigurationsResponse , resp ) # PUT /internalconfig async def update_config ( self , config : Configurations ) -> None : \"\"\"Fully or partially update the system configuration. !!! attention Requires admin privileges or a privileged Robot account. Parameters ---------- config : Configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. \"\"\" await self . put ( \"/configurations\" , json = config ) # GET /configurations async def get_config ( self ) -> ConfigurationsResponse : \"\"\"Get the system configuration. !!! attention Requires admin privileges or a privileged Robot account. Returns ------- ConfigurationsResponse The system configuration. \"\"\" resp = await self . get ( \"/configurations\" ) return construct_model ( ConfigurationsResponse , resp ) # CATEGORY: usergroup # CATEGORY: preheat # CATEGORY: replication # CATEGORY: label # CATEGORY: robot # POST /robots async def create_robot ( self , robot : RobotCreate , path : Optional [ Union [ str , Path ]] = None , overwrite : bool = False , ) -> RobotCreated : \"\"\"Create a new robot account. !!! attention This action requires a sysadmin account to perform. Parameters ---------- robot : RobotCreate The definition for the robot account to create. path : Optional[Union[str, Path]] Optional path to save the robot credentials to. overwrite: bool If True, overwrite the existing credentials file. Has no effect if `path` is `None`. Returns ------- RobotCreated Information about the created robot account. \"\"\" resp = await self . post ( \"/robots\" , json = robot ) j = handle_optional_json_response ( resp ) if not j : raise HarborAPIException ( \"Server did not return a JSON response.\" ) robot_created = construct_model ( RobotCreated , j ) if path : new_authfile_from_robotcreate ( path , robot , robot_created , overwrite = overwrite ) logger . debug ( \"Saved robot credentials to {path} \" , path = path ) return robot_created # GET /robots async def get_robots ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , ) -> List [ Robot ]: \"\"\"Get all robot accounts, optionally filtered by query. Parameters ---------- query : Optional[str] A query string to filter the resources. Except the basic properties, the other supported queries includes: * `\"tags=*\"` to list only tagged resources * `\"tags=nil\"` to list only untagged resources * `\"tags=~v\"` to list resources whose tag fuzzy matches \"v\" * `\"tags=v\"` to list artifact whose tag exactly matches \"v\" * `\"labels=(id1, id2)\"` to list resources that both labels with id1 and id2 are added to The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page Returns ------- List[Robot] A list of registered robot accounts matching the query. \"\"\" params = { \"page\" : page , \"page_size\" : page_size , \"query\" : query , \"sort\" : sort , } params = { k : v for k , v in params . items () if v is not None } resp = await self . get ( \"/robots\" , params = params ) return [ construct_model ( Robot , r ) for r in resp ] # GET /robots/{robot_id} async def get_robot ( self , robot_id : int ) -> Robot : \"\"\"Fetch a robot account by its ID. Parameters ---------- robot_id : int The ID of the robot account to get. Returns ------- Robot Information about the robot account. \"\"\" resp = await self . get ( f \"/robots/ { robot_id } \" ) return construct_model ( Robot , resp ) # PUT /robots/{robot_id} async def update_robot ( self , robot_id : int , robot : Robot ) -> None : \"\"\"Update a robot account. Parameters ---------- robot_id : int The ID of the robot account to update. robot : Robot The new definition for the robot account. \"\"\" await self . put ( f \"/robots/ { robot_id } \" , json = robot ) # DELETE /robots/{robot_id} async def delete_robot ( self , robot_id : int , missing_ok : bool = False ) -> None : \"\"\"Delete a robot account. Parameters ---------- robot_id : int The ID of the robot account to delete. missing_ok : bool Do not raise an error if the robot account does not exist. \"\"\" await self . delete ( f \"/robots/ { robot_id } \" , missing_ok = missing_ok ) # PATCH /robots/{robot_id} async def update_robot_secret ( self , robot_id : int , secret : str ) -> RobotSec : \"\"\"Give the robot account a new secret. Parameters ---------- robot_id : int The ID of the robot account to refresh. secret : str The new secret for the robot account. \"\"\" resp = await self . patch ( f \"/robots/ { robot_id } \" , json = RobotSec ( secret = secret )) return construct_model ( RobotSec , resp ) # CATEGORY: webhookjob # CATEGORY: icon # CATEGORY: project # PUT /projects/{project_name_or_id}/scanner async def set_project_scanner ( self , project_name_or_id : str , scanner_uuid : str ) -> None : \"\"\"Set one of the system configured scanner registration as the indepndent scanner of the specified project. Parameters ---------- project_name_or_id: Union[str, int] The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. Strings arguments set the `\"X-Is-Resource-Name\"` header to `true`. scanner_uuid: str The UUID of the scanner to set as the independent scanner of the project \"\"\" headers = get_project_headers ( project_name_or_id ) await self . put ( f \"/projects/ { project_name_or_id } /scanner\" , json = ProjectScanner ( uuid = scanner_uuid ), headers = headers , ) # GET /projects/{project_name_or_id}/scanner async def get_project_scanner ( self , project_name_or_id : str ) -> ScannerRegistration : \"\"\"Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned. Parameters ---------- project_name_or_id: Union[str, int] The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. Strings arguments set the `\"X-Is-Resource-Name\"` header to `true`. Returns ------- ScannerRegistration The scanner registration of the specified project \"\"\" headers = get_project_headers ( project_name_or_id ) resp = await self . get ( f \"/projects/ { project_name_or_id } /scanner\" , headers = headers ) return construct_model ( ScannerRegistration , resp ) # GET /projects/{project_name}/logs async def get_project_logs ( self , project_name : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = False , ) -> List [ AuditLog ]: \"\"\" Get the audit logs of the specified project. Parameters ---------- project_name: str The name of the project query : Optional[str] Query string to filter the logs. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } logs = await self . get ( f \"/projects/ { project_name } /logs\" , params = params , follow_links = retrieve_all ) return [ construct_model ( AuditLog , l ) for l in logs ] # HEAD /projects async def project_exists ( self , project_name : str ) -> bool : \"\"\"Check if a project exists. Parameters ---------- project_name: str The name of the project \"\"\" try : await self . head ( f \"/projects\" , params = { \"project_name\" : project_name }) except NotFound : return False return True # POST /projects async def create_project ( self , project : ProjectReq ) -> str : \"\"\"Create a new project. Returns location of the created project.\"\"\" resp = await self . post ( \"/projects\" , json = project , headers = { \"X-Resource-Name-In-Location\" : \"true\" } ) return urldecode_header ( resp , \"Location\" ) # GET /projects async def get_projects ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , name : Optional [ str ] = None , public : Optional [ bool ] = None , owner : Optional [ str ] = None , with_detail : bool = True , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Project ]: \"\"\"Get the artifacts for a repository. Parameters ---------- query: Optional[str] Query string to query resources. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the projects. name: str The name of the project. public: bool Only fetch public projects. owner: str The owner of the project. with_detail : bool Return detailed information about the project. page : int The page of results to return page_size : int The number of results to return per page retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"name\" : name , \"public\" : public , \"owner\" : owner , \"with_detail\" : with_detail , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } projects = await self . get ( \"/projects\" , params = params , follow_links = retrieve_all ) return [ construct_model ( Project , p ) for p in projects ] # PUT /projects/{project_name_or_id} async def update_project ( self , project_name_or_id : Union [ str , int ], project : ProjectReq ) -> None : \"\"\"Update a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. project: ProjectReq The updated project \"\"\" headers = get_project_headers ( project_name_or_id ) await self . put ( f \"/projects/ { project_name_or_id } \" , json = project , headers = headers ) # GET /projects/{project_name_or_id} async def get_project ( self , project_name_or_id : Union [ str , int ]) -> Project : \"\"\"Fetch a project given its name or ID. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. \"\"\" headers = get_project_headers ( project_name_or_id ) project = await self . get ( f \"/projects/ { project_name_or_id } \" , headers = headers ) return construct_model ( Project , project ) # DELETE /projects/{project_name_or_id} async def delete_project ( self , project_name_or_id : Union [ str , int ], missing_ok : bool = False ) -> None : \"\"\"Delete a project given its name or ID. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. missing_ok: bool If true, ignore 404 error when the project is not found. \"\"\" headers = get_project_headers ( project_name_or_id ) await self . delete ( f \"/projects/ { project_name_or_id } \" , headers = headers , missing_ok = missing_ok ) # GET /projects/{project_name_or_id}/scanner/candidates async def get_project_scanner_candidates ( self , project_name_or_id : Union [ str , int ], query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , ) -> List [ ScannerRegistration ]: \"\"\"Get the scanner candidates for a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. query: Optional[str] Query string to query resources. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the scanners. page : int The page of results to return page_size : int The number of results to return per page \"\"\" headers = get_project_headers ( project_name_or_id ) params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } candidates = await self . get ( f \"/projects/ { project_name_or_id } /scanner/candidates\" , params = params , headers = headers , ) return [ construct_model ( ScannerRegistration , c ) for c in candidates ] # GET /projects/{project_name_or_id}/summary async def get_project_summary ( self , project_name_or_id : Union [ str , int ] ) -> ProjectSummary : \"\"\"Get the summary of a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. \"\"\" headers = get_project_headers ( project_name_or_id ) summary = await self . get ( f \"/projects/ { project_name_or_id } /summary\" , headers = headers ) return construct_model ( ProjectSummary , summary ) # GET /projects/{project_name_or_id}/_deletable async def get_project_deletable ( self , project_name_or_id : Union [ str , int ] ) -> ProjectDeletable : \"\"\"Get the deletable status of a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. Returns ------- ProjectDeletable The deletable status of a project. If `.deletable` is `None`, the project is not deletable. This is an implementation detail, and might change in the future. \"\"\" headers = get_project_headers ( project_name_or_id ) deletable = await self . get ( f \"/projects/ { project_name_or_id } /_deletable\" , headers = headers ) return construct_model ( ProjectDeletable , deletable ) # CATEGORY: webhook # CATEGORY: scan # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan async def scan_artifact ( self , project_name : str , repository_name : str , reference : str ) -> None : \"\"\"Scan an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . post ( f \" { path } /scan\" ) if resp . status_code != 202 : logger . warning ( \"Scan request for {} returned status code {} , expected 202\" , path , resp . status_code , ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log async def get_artifact_scan_report_log ( self , project_name : str , repository_name : str , reference : str , report_id : str ) -> str : \"\"\"Get the log of a scan report. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag report_id : str The ID of the scan report Returns ------- str The log of a scan report \"\"\" \"\"\"\"\"\" # TODO: investigate what exactly this endpoint returns path = get_artifact_path ( project_name , repository_name , reference ) return await self . get_text ( f \" { path } /scan/ { report_id } /log\" ) # # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop async def stop_artifact_scan ( self , project_name : str , repository_name : str , reference : str ) -> None : \"\"\"Stop a scan for a particular artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . post ( f \" { path } /scan/stop\" ) if resp . status_code != 202 : logger . warning ( \"Stop scan request for {} returned status code {} , expected 202\" , path , resp . status_code , ) # CATEGORY: member # CATEGORY: ldap # CATEGORY: registry # POST /registries/ping async def check_registry_status ( self , ping : RegistryPing ) -> None : \"\"\"Check the status of the registry. Parameters ---------- ping : RegistryPing The ping request \"\"\" await self . post ( \"/registries/ping\" , json = ping ) # GET /replication/adapters async def get_registry_adapters ( self ) -> List [ str ]: \"\"\"Get the list of available registry adapters. Returns ------- List[str] The list of available registry adapters \"\"\" resp = await self . get ( \"/replication/adapters\" ) return resp # type: ignore # we know this is a list of strings # GET /registries/{id}/info async def get_registry_info ( self , id : int ) -> RegistryInfo : \"\"\"Get the info of a registry. Parameters ---------- id : int The ID of the registry Returns ------- RegistryInfo The info of a registry \"\"\" resp = await self . get ( f \"/registries/ { id } /info\" ) return construct_model ( RegistryInfo , resp ) # GET /replication/adapterinfos async def get_registry_providers ( self ) -> List [ RegistryProviderInfo ]: \"\"\"Get all registered registry provider information. Returns ------- List[RegistryProviderInfo] A list of RegistryProviderInfo objects. \"\"\" resp = await self . get ( \"/replication/adapterinfos\" ) return [ construct_model ( RegistryProviderInfo , p ) for p in resp ] # PUT /registries/{id} async def update_registry ( self , id : int , registry : RegistryUpdate ) -> None : \"\"\"Update a registry. Parameters ---------- id : int The ID of the registry registry : RegistryUpdate The updated registry values. \"\"\" await self . put ( f \"/registries/ { id } \" , json = registry ) # GET /registries/{id} async def get_registry ( self , id : int ) -> Registry : \"\"\"Get a registry. Parameters ---------- id : int The ID of the registry Returns ------- Registry The registry \"\"\" resp = await self . get ( f \"/registries/ { id } \" ) return construct_model ( Registry , resp ) # DELETE /registries/{id} async def delete_registry ( self , id : int , missing_ok : bool = False ) -> None : \"\"\"Delete a registry. Parameters ---------- id : int The ID of the registry missing_ok : bool If True, don't raise an exception if the registry doesn't exist. \"\"\" await self . delete ( f \"/registries/ { id } \" , missing_ok = missing_ok ) # POST /registries async def create_registry ( self , registry : Registry ) -> str : \"\"\"Create a new registry. Parameters ---------- registry : Registry The new registry values. Returns ------- str The location of the created registry. \"\"\" resp = await self . post ( \"/registries\" , json = registry ) return urldecode_header ( resp , \"Location\" ) # GET /registries async def get_registries ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , name : Optional [ str ] = None , retrieve_all : bool = True , ) -> List [ Registry ]: \"\"\"Get all registries. Parameters ---------- query : Optional[str] A query string to filter the registries. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page name: str: Optional[str] The name of the registry (deprecated, use `query` instead) retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Registry] A list of Registry objects. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , \"name\" : name , } params = { k : v for k , v in params . items () if v is not None } resp = await self . get ( \"/registries\" , params = params , follow_links = retrieve_all ) return [ construct_model ( Registry , r ) for r in resp ] # CATEGORY: search # GET /search async def search ( self , query : str ) -> Search : \"\"\"Search for projects, repositories and helm charts that the user has access to. WARNING ------- This method's API seems immature and may change in the future. Right now we just copy the API spec, which only takes a query string. Parameters ---------- query : str Project and/or repository name to search for. Returns ------- Search The search results. \"\"\" resp = await self . get ( \"/search\" , params = { \"q\" : query }) return construct_model ( Search , resp ) # CATEGORY: artifact # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def create_artifact_tag ( self , project_name : str , repository_name : str , reference : str , tag : Tag ) -> str : \"\"\"Create a tag for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag tag : Tag The tag to create Returns ------- str The location of the created tag \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . post ( f \" { path } /tags\" , json = tag ) if resp . status_code != 201 : logger . warning ( \"Create tag request for {} returned status code {} , expected 201\" , path , resp . status_code , ) return urldecode_header ( resp , \"Location\" ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def get_artifact_tags ( self , project_name : str , repository_name : str , reference : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , with_signature : bool = False , with_immutable_status : bool = False , retrieve_all : bool = True , ) -> List [ Tag ]: \"\"\"Get the tags for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag query : Optional[str] A query string to filter the tags Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the tags. TODO: document this parameter page : int The page of results to return page_size : int The number of results to return per page with_signature : bool Whether to include the signature of the tag in the response with_immutable_status : bool Whether to include the immutable status of the tag in the response retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Tag] A list of Tag objects for the artifact. \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) params = { \"page\" : page , \"page_size\" : page_size , \"with_signature\" : with_signature , \"with_immutable_status\" : with_immutable_status , } # type: Dict[str, Any] if query : params [ \"q\" ] = query if sort : params [ \"sort\" ] = sort resp = await self . get ( f \" { path } /tags\" , follow_links = retrieve_all ) return [ construct_model ( Tag , t ) for t in resp ] # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def get_artifact_accessories ( self , project_name : str , repository_name : str , reference : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Accessory ]: \"\"\"Get the tags for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag query : Optional[str] A query string to filter the accessories Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the tags. page : int The page of results to return page_size : int The number of results to return per page retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Accessory] A list of Accessory objects for the artifact. \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) params = { \"page\" : page , \"page_size\" : page_size , } # type: Dict[str, Any] if query : params [ \"q\" ] = query if sort : params [ \"sort\" ] = sort resp = await self . get ( f \" { path } /accessories\" , follow_links = retrieve_all ) return [ construct_model ( Accessory , a ) for a in resp ] # DELETE /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def delete_artifact_tag ( self , project_name : str , repository_name : str , reference : str , tag_name : str , missing_ok : bool = False , ) -> None : \"\"\"Get the tags for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag tag_name : str The name of the tag to delete \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) # TODO: implement missing_ok for all delete methods await self . delete ( f \" { path } /tags/ { tag_name } \" , missing_ok = missing_ok ) # POST /projects/{project_name}/repositories/{repository_name}/artifacts async def copy_artifact ( self , project_name : str , repository_name : str , source : str ) -> str : \"\"\"Copy an artifact. Parameters ---------- project_name : str Name of new artifact's project repository_name : str Name of new artifact's repository source : str The source artifact to copy from in the form of `\"project/repository:tag\"` or `\"project/repository@digest\"` Returns ------- str The location of the new artifact \"\"\" # We have to encode the destination repo name, but NOT the source repo name. path = get_repo_path ( project_name , repository_name ) resp = await self . post ( f \" { path } /artifacts\" , params = { \"from\" : source }) if resp . status_code != 201 : logger . warning ( \"Copy artifact request for {} returned status code {} , expected 201\" , path , resp . status_code , ) return urldecode_header ( resp , \"Location\" ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts async def get_artifacts ( self , project_name : str , repository_name : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , with_tag : bool = True , with_label : bool = False , with_scan_overview : bool = False , with_signature : bool = False , with_immutable_status : bool = False , with_accessory : bool = False , mime_type : str = \"application/vnd.security.vulnerability.report; version=1.1\" , retrieve_all : bool = True , ) -> List [ Artifact ]: \"\"\"Get the artifacts for a repository. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository query : Optional[str] A query string to filter the artifacts Except the basic properties, the other supported queries includes: * `\"tags=*\"` to list only tagged artifacts * `\"tags=nil\"` to list only untagged artifacts * `\"tags=~v\"` to list artifacts whose tag fuzzy matches \"v\" * `\"tags=v\"` to list artifact whose tag exactly matches \"v\" * `\"labels=(id1, id2)\"` to list artifacts that both labels with id1 and id2 are added to The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page with_tag : bool Whether to include the tags of the artifact in the response with_label : bool Whether to include the labels of the artifact in the response with_scan_overview : bool Whether to include the scan overview of the artifact in the response with_signature : bool Whether the signature is included inside the tags of the returning artifacts. Only works when setting `with_tag==True`. with_immutable_status : bool Whether the immutable status is included inside the tags of the returning artifacts. with_accessory : bool Whether the accessories are included of the returning artifacts. mime_type : str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: * application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 * application/vnd.security.vulnerability.report; version=1.1 retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Artifact] A list of artifacts in the repository matching the query. \"\"\" path = f \"/projects/ { project_name } /repositories/ { repository_name } /artifacts\" params = { \"page\" : page , \"page_size\" : page_size , \"with_tag\" : with_tag , \"with_label\" : with_label , \"with_scan_overview\" : with_scan_overview , \"with_signature\" : with_signature , \"with_immutable_status\" : with_immutable_status , \"with_accessory\" : with_accessory , } # type: Dict[str, Union[str, int, bool]] if query : params [ \"q\" ] = query if sort : params [ \"sort\" ] = sort resp = await self . get ( f \" { path } \" , params = params , headers = { \"X-Accept-Vulnerabilities\" : mime_type }, follow_links = retrieve_all , ) return [ construct_model ( Artifact , a ) for a in resp ] # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels async def add_artifact_label ( self , project_name : str , repository_name : str , reference : str , label : Label , ) -> None : \"\"\"Add a label to an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag label : Label The label to add \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) await self . post ( f \" { path } /labels\" , json = label , ) # response should have status code 201, but API spec says it's 200 # so we don't check it async def get_artifact ( self , project_name : str , repository_name : str , reference : str , page : int = 1 , page_size : int = 10 , with_tag : bool = True , with_label : bool = False , with_scan_overview : bool = False , with_signature : bool = False , with_immutable_status : bool = False , with_accessory : bool = False , mime_type : str = \"application/vnd.security.vulnerability.report; version=1.1\" , ) -> Artifact : \"\"\"Get an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag page : int The page of results to return page_size : int The number of results to return per page with_tag : bool Whether to include the tags of the artifact in the response with_label : bool Whether to include the labels of the artifact in the response with_scan_overview : bool Whether to include the scan overview of the artifact in the response with_signature : bool Whether the signature is included inside the tags of the returning artifact. Only works when setting `with_tag==True`. with_immutable_status : bool Whether the immutable status is included inside the tags of the returning artifact. with_accessory : bool Whether the accessories are included of the returning artifact. mime_type : str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: * application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 * application/vnd.security.vulnerability.report; version=1.1 Returns ------- Artifact An artifact. \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . get ( f \" { path } \" , params = { \"page\" : page , \"page_size\" : page_size , \"with_tag\" : with_tag , \"with_label\" : with_label , \"with_scan_overview\" : with_scan_overview , \"with_signature\" : with_signature , \"with_immutable_status\" : with_immutable_status , \"with_accessory\" : with_accessory , }, headers = { \"X-Accept-Vulnerabilities\" : mime_type }, ) return construct_model ( Artifact , resp ) async def delete_artifact ( self , project_name : str , repository_name : str , reference : str , missing_ok : bool = False , ) -> None : \"\"\"Delete an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag missing_ok : bool Whether to ignore 404 error when deleting the artifact \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) await self . delete ( path , missing_ok = missing_ok ) async def delete_artifact_label ( self , project_name : str , repository_name : str , reference : str , label_id : int , missing_ok : bool = False , ) -> None : \"\"\"Delete an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag label_id : int The id of the label to delete missing_ok : bool Whether to ignore 404 error when deleting the label \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) url = f \" { path } /labels/ { label_id } \" await self . delete ( url , missing_ok = missing_ok ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities async def get_artifact_vulnerabilities ( self , project_name : str , repository_name : str , reference : str , # Make this default to \"latest\"? # TODO: support multiple mime types? mime_type : str = \"application/vnd.security.vulnerability.report; version=1.1\" , ) -> Optional [ HarborVulnerabilityReport ]: \"\"\"Get the vulnerabilities for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag mime_type : str A comma-separated lists of MIME types for the scan report or scan summary. Returns ------- Optional[HarborVulnerabilityReport] The vulnerabilities for the artifact, or None if the artifact is not found \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) url = f \" { path } /additions/vulnerabilities\" resp = await self . get ( url , headers = { \"X-Accept-Vulnerabilities\" : mime_type }) if not isinstance ( resp , dict ): logger . bind ( response = resp ) . warning ( \" {} returned non-dict response\" , url ) return None # Get the report, which is stored under the key of the mime type report = resp . get ( mime_type ) if not report : logger . warning ( \" {} returned no report\" , url ) # Is this an error? return None return construct_model ( HarborVulnerabilityReport , report ) # CATEGORY: immutable # CATEGORY: retention # CATEGORY: scanner # POST /scanners async def create_scanner ( self , scanner : ScannerRegistrationReq ) -> str : \"\"\"Creates a new scanner. Returns location of the created scanner. Parameters ---------- scanner : ScannerRegistrationReq The scanner to create. Returns ------- str The location of the created scanner. \"\"\" resp = await self . post ( \"/scanners\" , json = scanner ) return urldecode_header ( resp , \"Location\" ) # GET /scanners async def get_scanners ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , ) -> List [ ScannerRegistration ]: \"\"\"Get a list of scanners. Parameters ---------- query : Optional[str] A query string to filter the scanners. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the scanners. page : int The page of results to return page_size : int The number of results to return per page Returns ------- List[ScannerRegistration] _description_ \"\"\" params = { \"q\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } scanners = await self . get ( \"/scanners\" , params = params ) return [ construct_model ( ScannerRegistration , s ) for s in scanners ] # PUT /scanners/{registration_id} async def update_scanner ( self , registration_id : Union [ int , str ], scanner : ScannerRegistrationReq ) -> None : \"\"\"Update a scanner. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to update. scanner : ScannerRegistrationReq The updated scanner definition. \"\"\" await self . put ( f \"/scanners/ { registration_id } \" , json = scanner ) # GET /scanners/{registration_id} async def get_scanner ( self , registration_id : Union [ int , str ] ) -> ScannerRegistration : \"\"\"Fetch a scanner by ID. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to fetch. Returns ------- ScannerRegistration The scanner. \"\"\" scanner = await self . get ( f \"/scanners/ { registration_id } \" ) return construct_model ( ScannerRegistration , scanner ) # DELETE /scanners/{registration_id} async def delete_scanner ( self , registration_id : Union [ int , str ], missing_ok : bool = False , ) -> Optional [ ScannerRegistration ]: \"\"\"Delete a scanner by ID. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to delete. missing_ok : bool Whether to ignore 404 error when deleting the scanner. Returns ------- Optional[ScannerRegistration] The scanner, or None if the scanner is not found and `missing_ok` is True. Raises ------ HarborAPIException Successful deletion request that returns an empty response. \"\"\" scanner = await self . delete ( f \"/scanners/ { registration_id } \" , missing_ok = missing_ok ) # TODO: differentiate between 404 and no return value (how?) if not scanner : if missing_ok : return None raise HarborAPIException ( \"Deletion request returned no data. Is the scanner registered?\" ) return construct_model ( ScannerRegistration , scanner ) # PATCH /scanners/{registration_id} async def set_default_scanner ( self , registration_id : Union [ int , str ], is_default : bool = True ) -> None : \"\"\"Set a scanner as the default scanner. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to set as the default. is_default : bool Whether to set the scanner as the default, by default `True`. Set to `False` to unset the scanner as the default. \"\"\" await self . patch ( f \"/scanners/ { registration_id } \" , json = IsDefault ( is_default = is_default ) ) # POST /scanners/ping async def ping_scanner_adapter ( self , settings : ScannerRegistrationSettings ) -> None : \"\"\"Ping a scanner adapter. Parameters ---------- settings : ScannerRegistrationSettings The settings of the scanner adapter. \"\"\" await self . post ( \"/scanners/ping\" , json = settings ) # GET /scanners/{registration_id}/metadata async def get_scanner_metadata ( self , registration_id : int ) -> ScannerAdapterMetadata : \"\"\"Get metadata of a scanner adapter given its registration ID. Parameters ---------- registration_id : int The ID of the scanner adapter. Returns ------- ScannerAdapterMetadata The metadata of the scanner adapter. \"\"\" scanner = await self . get ( f \"/scanners/ { registration_id } /metadata\" ) return construct_model ( ScannerAdapterMetadata , scanner ) # CATEGORY: systeminfo # GET /systeminfo/volumes async def get_system_volume_info ( self ) -> SystemInfo : \"\"\"Get info about the system's volumes. Returns ------- SystemInfo Information about the system's volumes. \"\"\" resp = await self . get ( \"/systeminfo/volumes\" ) return construct_model ( SystemInfo , resp ) # GET /systeminfo/getcert # async def get_system_certificate(self) -> str: # \"\"\"Get the certificate for the system.\"\"\" # raise NotImplementedError(\"File download not yet implemented\") # GET /systeminfo async def get_system_info ( self ) -> GeneralInfo : \"\"\"Get general info about the system. Returns ------- GeneralInfo The general info about the system \"\"\" resp = await self . get ( \"/systeminfo\" ) return construct_model ( GeneralInfo , resp ) # CATEGORY: statistic async def get_statistics ( self ) -> Statistic : \"\"\"Get statistics on the Harbor server. Returns ------- Statistic The statistics on the Harbor server \"\"\" stats = await self . get ( \"/statistics\" ) return construct_model ( Statistic , stats ) # CATEGORY: quota async def get_quotas ( self , reference : Optional [ str ] = None , reference_id : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Quota ]: \"\"\"Get quotas. Parameters ---------- reference : str The reference type of the quota. TODO: document what these values can be. reference_id : str The reference id of the quota sort : str Sort method. Valid values include: - `\"hard.resource_name\"` - `\"-hard.resource_name\"` - `\"used.resource_name\"` - `\"-used.resource_name\"` `-` denotes descending order `resource_name` should be the real resource name of the quota page: int The page number to retrieve resources from. page_size: int The number of resources to retrieve per page. retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Quota] The quotas \"\"\" params = { \"reference\" : reference , \"reference_id\" : reference_id , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } quotas = await self . get ( \"/quotas\" , params = params , follow_links = retrieve_all ) return [ construct_model ( Quota , q ) for q in quotas ] async def update_quota ( self , id : int , quota : QuotaUpdateReq ) -> None : \"\"\"Update a quota. Parameters ---------- id : int The id of the quota to update. quota : QuotaUpdateReq The new quota values. `QuotaUpdateReq.hard` allows assignment of any attribute with an `int` value. Example: ```py QuotaUpdateReq( hard={\"storage\": 100000, \"other_property\": 1234} ) ``` \"\"\" await self . put ( f \"/quotas/ { id } \" , json = quota ) async def get_quota ( self , id : int ) -> Quota : \"\"\"Get a quota by id. Parameters ---------- id : int The id of the quota to get. Returns ------- Quota The quota \"\"\" quota = await self . get ( f \"/quotas/ { id } \" ) return construct_model ( Quota , quota ) # CATEGORY: repository # GET /projects/{project_name}/repositories/{repository_name} async def get_repository ( self , project_id : str , repository_name : str , ) -> Repository : \"\"\"Get a repository. Parameters ---------- project_id : int The id of the project the repository belongs to. repository_name : str The name of the repository. Returns ------- Repository The repository. \"\"\" path = get_repo_path ( project_id , repository_name ) resp = await self . get ( path ) return construct_model ( Repository , resp ) # PUT /projects/{project_name}/repositories/{repository_name} async def update_repository ( self , project_name : str , repository_name : str , repository : Repository , ) -> None : \"\"\"Update a repository. Parameters ---------- project_name : str The name of the project the repository belongs to. repository_name : str The name of the repository. repository : Repository The new repository values. \"\"\" path = get_repo_path ( project_name , repository_name ) await self . put ( path , json = repository ) # DELETE /projects/{project_name}/repositories/{repository_name} async def delete_repository ( self , project_id : str , repository_name : str , missing_ok : bool = False , ) -> None : \"\"\"Get a repository. Parameters ---------- project_id : int The id of the project the repository belongs to. repository_name : str The name of the repository. missing_ok : bool If true, do not raise an error if the repository does not exist. \"\"\" path = get_repo_path ( project_id , repository_name ) await self . delete ( path , missing_ok = missing_ok , ) # GET /projects/{project_name}/repositories # & # GET /repositories async def get_repositories ( self , project_name : Optional [ str ] = None , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Repository ]: \"\"\"Get a list of repositories Parameters ---------- project_name : str The name of the project. query : str The query string to filter the repositories. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : str The sort method. TODO: add boilerplate sort documentation page : int The page of results to return page_size : int The number of results to return per page retrieve_all : bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Repository] A list of repositories matching the query. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } if project_name : url = f \"/projects/ { project_name } /repositories\" else : url = \"/repositories\" resp = await self . get ( url , params = params , follow_links = retrieve_all ) return [ construct_model ( Repository , r ) for r in resp ] # CATEGORY: ping # GET /ping async def ping_harbor_api ( self ) -> str : \"\"\"Pings the Harbor server to check if it is alive. Returns ------- str Text response from the server. \"\"\" return await self . get_text ( \"/ping\" ) # CATEGORY: oidc # POST /system/oidc/ping async def test_oidc ( self , oidcreq : OIDCTestReq ) -> None : \"\"\"Tests an OIDC endpoint. Can only be called by system admin. Raises `StatusError` if endpoint is unreachable. Parameters ---------- oidcreq : OIDCTestReq The OIDC test request. \"\"\" await self . post ( \"/system/oidc/ping\" , json = oidcreq ) # CATEGORY: SystemCVEAllowlist # PUT /system/CVEAllowlist async def update_cve_allowlist ( self , allowlist : CVEAllowlist ) -> None : \"\"\"Overwrites the existing CVE allowlist with a new one. Parameters ---------- allowlist : CVEAllowlist The new CVE allowlist. \"\"\" await self . put ( \"/system/CVEAllowlist\" , json = allowlist ) # GET /system/CVEAllowlist async def get_cve_allowlist ( self ) -> CVEAllowlist : \"\"\"Gets the current CVE allowlist. Returns ------- CVEAllowlist The current CVE allowlist. \"\"\" resp = await self . get ( \"/system/CVEAllowlist\" ) return construct_model ( CVEAllowlist , resp ) # CATEGORY: health # GET /health async def health_check ( self ) -> OverallHealthStatus : \"\"\"Gets the health status of the Harbor server. Returns ------- OverallHealthStatus The health status of the Harbor server. \"\"\" resp = await self . get ( \"/health\" ) return construct_model ( OverallHealthStatus , resp ) # CATEGORY: robotv1 # CATEGORY: projectMetadata # CATEGORY: auditlog # GET /audit-logs async def get_audit_logs ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = False , ) -> List [ AuditLog ]: \"\"\"Get a list of audit logs for the projects the user is a member of. !!! note Set `retrieve_all` to `True` to retrieve the entire audit log for all projects. Parameters ---------- query: Optional[str] Query string to query resources. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort: Optional[str] Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with `\"sort=field1,-field2\"` page: int The page number to fetch resources from. page_size: int The number of resources to fetch per page. retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[AuditLog] The list of audit logs. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } resp = await self . get ( \"/audit-logs\" , params = params , follow_links = retrieve_all ) return [ construct_model ( AuditLog , r ) for r in resp ] def _get_headers ( self , headers : Optional [ Dict [ str , Any ]] = None ) -> Dict [ str , str ]: headers = headers or {} base_headers = { \"Authorization\" : \"Basic \" + self . credentials , \"Accept\" : \"application/json\" , } base_headers . update ( headers ) # Override defaults with provided headers return base_headers @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def get ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , follow_links : bool = True , ** kwargs : Any , ) -> JSONType : return await self . _get ( path , params = params , headers = headers , follow_links = follow_links , ** kwargs , ) @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def get_text ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> str : \"\"\"Bad workaround in order to have a cleaner API for text/plain responses.\"\"\" headers = headers or {} headers . update ({ \"Accept\" : \"text/plain\" }) resp = await self . _get ( path , params = params , headers = headers , ** kwargs ) return resp # type: ignore # TODO: refactor this method so it looks like the other methods, while still supporting pagination. async def _get ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , follow_links : bool = True , ** kwargs : Any , ) -> JSONType : \"\"\"Sends a GET request to the Harbor API. Returns JSON unless the response is text/plain. Parameters ---------- path : str URL path to resource params : Optional[dict] Request parameters headers : Optional[dict] Request headers follow_links : bool Enable pagination by following links in response header Returns ------- JSONType JSON data returned by the API \"\"\" # async with httpx.AsyncClient() as client: resp = await self . client . get ( self . url + path , params = params , headers = self . _get_headers ( headers ), ) check_response_status ( resp ) j = handle_optional_json_response ( resp ) if j is None : return resp . text # type: ignore # FIXME: resolve this ASAP (use overload?) # If we have \"Link\" in headers, we need to handle paginated results if ( link := resp . headers . get ( \"link\" )) and 'rel=\"next\"' in link and follow_links : logger . debug ( \"Handling paginated results. Header value: {} \" , link ) j = await self . _handle_pagination ( j , link ) # recursion (refactor?) return j async def _handle_pagination ( self , data : JSONType , link : str ) -> JSONType : \"\"\"Handles paginated results by recursing until all results are returned.\"\"\" # Parse the link header value and get next page URL next_url = parse_pagination_url ( link ) # ignoring params and only using the next URL # the next URL should contain the original params with page number adjusted j = await self . get ( next_url ) if not isinstance ( j , list ) or not isinstance ( data , list ): logger . warning ( \"Unable to handle paginated results, received non-list value. URL: {} \" , next_url , ) # TODO: add more diagnostics info here return data data . extend ( j ) return data # NOTE: POST is not idempotent, should we still retry? # TODO: fix abstraction of post/_post. Put everything into _post? @backoff . on_exception ( backoff . expo , RequestError , max_tries = 1 ) async def post ( self , path : str , json : Optional [ Union [ BaseModel , JSONType ]] = None , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ) -> Response : \"\"\"Sends a POST request to a path, optionally with a JSON body.\"\"\" return await self . _post ( path , json = json , params = params , headers = headers , ) async def _post ( self , path : str , json : Optional [ Union [ BaseModel , JSONType ]] = None , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ) -> Response : if isinstance ( json , BaseModel ): json = json . dict () resp = await self . client . post ( self . url + path , json = json , params = params , headers = self . _get_headers ( headers ), ) check_response_status ( resp ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def put ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Optional [ JSONType ]: resp = await self . _put ( path , json = json , params = params , headers = headers , ** kwargs , ) return handle_optional_json_response ( resp ) async def _put ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Response : if isinstance ( json , BaseModel ): json = json . dict () resp = await self . client . put ( self . url + path , json = json , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def patch ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Optional [ JSONType ]: resp = await self . _patch ( path , json = json , headers = headers , params = params , ** kwargs , ) return handle_optional_json_response ( resp ) async def _patch ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Response : if isinstance ( json , BaseModel ): json = json . dict () resp = await self . client . patch ( self . url + path , json = json , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def delete ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Optional [ JSONType ]: resp = await self . _delete ( path , headers = headers , params = params , missing_ok = missing_ok , ** kwargs , ) return handle_optional_json_response ( resp ) async def _delete ( self , path : str , headers : Optional [ Dict [ str , Any ]] = None , params : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Response : resp = await self . client . delete ( self . url + path , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp , missing_ok = missing_ok ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def head ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Response : resp = await self . _head ( path , headers = headers , params = params , missing_ok = missing_ok , ** kwargs , ) return resp async def _head ( self , path : str , headers : Optional [ Dict [ str , Any ]] = None , params : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Response : resp = await self . client . head ( self . url + path , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp , missing_ok = missing_ok ) return resp __init__ ( url , username = None , secret = None , credentials = None , credentials_file = None , logging = False , config = None , version = '2.0' , ** kwargs ) Initialize a new HarborAsyncClient with either a username and secret, an authentication token, or a credentials file. Parameters: Name Type Description Default url str The URL of the Harbor server in the format http://host:[port]/api/v<version> Example: http://localhost:8080/api/v2.0 required username Optional [ str ] Username to use for authentication. If not provided, the client attempts to use credentials to authenticate. None secret Optional [ str ] Secret to use for authentication along with username . None credentials Optional [ str ] base64-encoded Basic Access Authentication credentials to use for authentication in place of username and secret . None credentials_file Optional [ Union [ str , Path ]] Path to a JSON-encoded credentials file from which to load credentials. None logging bool Enable client logging with Loguru . False config Optional [ Any ] (NYI) config None version str Used to construct URL if the specified URL does not contain the version. '2.0' Raises: Type Description ValueError Neither username and secret , credentials nor credentials_file are provided. Source code in harborapi/client.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def __init__ ( self , url : str , username : Optional [ str ] = None , secret : Optional [ str ] = None , credentials : Optional [ str ] = None , credentials_file : Optional [ Union [ str , Path ]] = None , logging : bool = False , config : Optional [ Any ] = None , # NYI version : str = \"2.0\" , ** kwargs : Any , ) -> None : \"\"\"Initialize a new HarborAsyncClient with either a username and secret, an authentication token, or a credentials file. Parameters ---------- url : str The URL of the Harbor server in the format `http://host:[port]/api/v<version>` Example: `http://localhost:8080/api/v2.0` username : Optional[str] Username to use for authentication. If not provided, the client attempts to use `credentials` to authenticate. secret : Optional[str] Secret to use for authentication along with `username`. credentials : Optional[str] base64-encoded Basic Access Authentication credentials to use for authentication in place of `username` and `secret`. credentials_file : Optional[Union[str, Path]] Path to a JSON-encoded credentials file from which to load credentials. logging : bool Enable client logging with `Loguru`. config : Optional[Any] (NYI) config version : str Used to construct URL if the specified URL does not contain the version. Raises ------ ValueError Neither `username` and `secret`, `credentials` nor `credentials_file` are provided. \"\"\" if username and secret : self . credentials = get_credentials ( username , secret ) elif credentials : self . credentials = credentials elif credentials_file : crfile = load_harbor_auth_file ( credentials_file ) self . credentials = get_credentials ( crfile . name , crfile . secret ) # type: ignore # load_harbor_auth_file guarantees these are not None else : raise ValueError ( \"Must provide username and secret, credentials, or credentials_file\" ) # TODO: add URL regex and improve parsing OR don't police this at all url = url . strip ( \"/\" ) # remove trailing slash if version and not \"/api/v\" in url : version = str ( version ) if \"v\" not in version : version = f \"v { version } \" if \"/api\" in url : url = url . strip ( \"/\" ) + \"/\" + version else : url = url + \"/api/\" + version self . url = url . strip ( \"/\" ) # make sure we haven't added a trailing slash again self . config = config self . client = httpx . AsyncClient () # NOTE: make env var? if logging : # we explicitly enable the logger here, because previous instantiations # of the client may have disabled it. logger . enable ( \"harborapi\" ) else : logger . disable ( \"harborapi\" )","title":"HarborAsyncClient"},{"location":"reference/client/#harborasyncclient","text":"See Endpoints for all methods implemented on the class used to interact with the Harbor API. Source code in harborapi/client.pyclass HarborAsyncClient : def __init__ ( self , url : str , username : Optional [ str ] = None , secret : Optional [ str ] = None , credentials : Optional [ str ] = None , credentials_file : Optional [ Union [ str , Path ]] = None , logging : bool = False , config : Optional [ Any ] = None , # NYI version : str = \"2.0\" , ** kwargs : Any , ) -> None : \"\"\"Initialize a new HarborAsyncClient with either a username and secret, an authentication token, or a credentials file. Parameters ---------- url : str The URL of the Harbor server in the format `http://host:[port]/api/v<version>` Example: `http://localhost:8080/api/v2.0` username : Optional[str] Username to use for authentication. If not provided, the client attempts to use `credentials` to authenticate. secret : Optional[str] Secret to use for authentication along with `username`. credentials : Optional[str] base64-encoded Basic Access Authentication credentials to use for authentication in place of `username` and `secret`. credentials_file : Optional[Union[str, Path]] Path to a JSON-encoded credentials file from which to load credentials. logging : bool Enable client logging with `Loguru`. config : Optional[Any] (NYI) config version : str Used to construct URL if the specified URL does not contain the version. Raises ------ ValueError Neither `username` and `secret`, `credentials` nor `credentials_file` are provided. \"\"\" if username and secret : self . credentials = get_credentials ( username , secret ) elif credentials : self . credentials = credentials elif credentials_file : crfile = load_harbor_auth_file ( credentials_file ) self . credentials = get_credentials ( crfile . name , crfile . secret ) # type: ignore # load_harbor_auth_file guarantees these are not None else : raise ValueError ( \"Must provide username and secret, credentials, or credentials_file\" ) # TODO: add URL regex and improve parsing OR don't police this at all url = url . strip ( \"/\" ) # remove trailing slash if version and not \"/api/v\" in url : version = str ( version ) if \"v\" not in version : version = f \"v { version } \" if \"/api\" in url : url = url . strip ( \"/\" ) + \"/\" + version else : url = url + \"/api/\" + version self . url = url . strip ( \"/\" ) # make sure we haven't added a trailing slash again self . config = config self . client = httpx . AsyncClient () # NOTE: make env var? if logging : # we explicitly enable the logger here, because previous instantiations # of the client may have disabled it. logger . enable ( \"harborapi\" ) else : logger . disable ( \"harborapi\" ) # NOTE: add destructor that closes client? # CATEGORY: user # PUT /users/{user_id}/cli_secret async def set_user_cli_secret ( self , user_id : int , secret : str , ) -> None : \"\"\"Set the CLI secret for a user. Parameters ---------- user_id : int The ID of the user to set the secret for secret : str The secret to set for the user Raises ------ BadRequest Invalid user ID. Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard. (This is a Harbor API implementation detail.) \"\"\" try : await self . put ( f \"/users/ { user_id } /cli_secret\" , json = { \"secret\" : secret }) except BadRequest as e : logger . error ( e . __cause__ . response . text if e . __cause__ else e . __str__ ()) # TODO: do anything else here? Raise a more specific exception? raise # GET /users/search async def get_users_by_username ( self , username : str , page : int = 1 , page_size : int = 100 , retrieve_all : bool = True , ) -> List [ UserSearchRespItem ]: \"\"\"Search for users by username. Parameters ---------- username : str The username to search for page : int The page of results to return page_size : int The number of results to return per page retrieve_all : bool If True, retrieve all results, otherwise, retrieve only the first page \"\"\" params = { \"username\" : username , \"page\" : page , \"page_size\" : page_size } users_resp = await self . get ( \"/users/search\" , params = params , follow_links = retrieve_all , ) return [ construct_model ( UserSearchRespItem , u ) for u in users_resp ] # GET /users/current/permissions async def get_current_user_permissions ( self , scope : Optional [ str ] = None , relative : bool = False ) -> List [ Permission ]: \"\"\"Get current user permissions. Parameters ---------- scope : Optional[str] The scope for the permission relative : bool Display resource paths relative to the scope. Has no effect if `scope` is not specified Returns ------- List[Permission] A list of Permission objects for the current user. \"\"\" params = {} # type: Dict[str, Any] if scope : params [ \"scope\" ] = scope params [ \"relative\" ] = relative resp = await self . get ( \"/users/current/permissions\" , params = params ) return [ construct_model ( Permission , p ) for p in resp ] # GET /users/current async def get_current_user ( self ) -> UserResp : \"\"\"Get information about the current user. Returns ------- UserResp Information about the current user. \"\"\" user_resp = await self . get ( \"/users/current\" ) return construct_model ( UserResp , user_resp ) # PUT /users/{user_id}/sysadmin async def set_user_admin ( self , user_id : int , is_admin : bool ) -> None : \"\"\"Set a user's admin status. Parameters ---------- user_id : int The ID of the user to set the admin status for is_admin : bool Whether the user should be an admin or not \"\"\" await self . put ( f \"/users/ { user_id } /sysadmin\" , json = UserSysAdminFlag ( sysadmin_flag = is_admin ) ) # PUT /users/{user_id}/password async def set_user_password ( self , user_id : int , new_password : str , old_password : Optional [ str ] = None , ) -> None : \"\"\"Set a user's password. Admin users can change any user's password. Non-admin users can only change their own password. Parameters ---------- user_id : int The ID of the user to set the password for new_password : str The new password to set for the user old_password : str The old password for the user, not required if API user is admin. Raises ------ BadRequest Raised for any of the following reasons: * Invalid user ID * Password does not meet requirement * Old password is incorrect \"\"\" try : await self . put ( f \"/users/ { user_id } /password\" , json = PasswordReq ( old_password = old_password , new_password = new_password ), ) except BadRequest as e : logger . error ( e . __cause__ . response . text if e . __cause__ else e . __str__ ()) raise # POST /users async def create_user ( self , user : UserCreationReq ) -> str : \"\"\"Create a new user. Can only be used when the authentication mode is for local DB, when self registration is disabled. Parameters ---------- user : UserCreationReq The user to create Returns ------- str The location of the created user \"\"\" resp = await self . post ( \"/users\" , json = user ) return urldecode_header ( resp , \"Location\" ) # GET /users async def get_users ( self , sort : Optional [ str ] = None , ** kwargs ) -> List [ UserResp ]: \"\"\"Get all users. Parameters ---------- sort : Optional[str] The sort order for the results. Returns ------- List[UserResp] A list of users. \"\"\" params = { ** kwargs } if sort : params [ \"sort\" ] = sort users_resp = await self . get ( \"/users\" , params = params ) return [ construct_model ( UserResp , u ) for u in users_resp ] # PUT /users/{user_id} async def update_user_profile ( self , user_id : int , user : UserProfile ) -> None : \"\"\"Update a user's profile. Parameters ---------- user_id : int The ID of the user to update user : UserProfile The user profile to update \"\"\" await self . put ( f \"/users/ { user_id } \" , json = user ) # GET /users/{user_id} async def get_user ( self , user_id : int ) -> UserResp : \"\"\"Get information about a user. Parameters ---------- user_id : int The ID of the user to get information about Returns ------- UserResp Information about the user. \"\"\" user_resp = await self . get ( f \"/users/ { user_id } \" ) return construct_model ( UserResp , user_resp ) # DELETE /users/{user_id} async def delete_user ( self , user_id : int , missing_ok : bool = False ) -> None : \"\"\"Delete a user. Parameters ---------- user_id : int The ID of the user to delete missing_ok : bool Do not raise an error if the user does not exist. \"\"\" await self . delete ( f \"/users/ { user_id } \" , missing_ok = missing_ok ) # CATEGORY: gc # CATEGORY: scanAll # GET /scans/all/metrics async def get_scan_all_metrics ( self ) -> Stats : \"\"\"Get metrics for a Scan All job. Returns ------- Stats The metrics for the Scan All job. \"\"\" resp = await self . get ( \"/scans/all/metrics\" ) return construct_model ( Stats , resp ) # PUT /system/scanAll/schedule async def update_scan_all_schedule ( self , schedule : Schedule ) -> None : \"\"\"Update the schedule for a Scan All job. Parameters ---------- schedule : Schedule The new schedule for the Scan All job \"\"\" await self . put ( \"/system/scanAll/schedule\" , json = schedule ) # POST /system/scanAll/schedule async def create_scan_all_schedule ( self , schedule : Schedule ) -> str : \"\"\"Create a new scan all job schedule. Returns location of the created schedule. Parameters ---------- schedule : Schedule The schedule to create Returns ------- str The location of the created schedule \"\"\" resp = await self . post ( \"/system/scanAll/schedule\" , json = schedule ) return urldecode_header ( resp , \"Location\" ) # GET /system/scanAll/schedule async def get_scan_all_schedule ( self ) -> Schedule : \"\"\"Get the schedule for a Scan All job. Returns ------- Schedule The schedule for the Scan All job. \"\"\" resp = await self . get ( \"/system/scanAll/schedule\" ) return construct_model ( Schedule , resp ) # POST /system/scanAll/stop async def stop_scan_all_job ( self ) -> None : \"\"\"Stop a Scan All job.\"\"\" await self . post ( \"/system/scanAll/stop\" ) # CATEGORY: configure # GET /internalconfig async def get_internal_config ( self ) -> InternalConfigurationsResponse : \"\"\" Get the internal configuration. Cannot be called by normal user accounts. !!! danger It is likely not possible to call this method due to its internal account requirement, but it is included for completeness and to allow for future use. Returns ------- InternalConfigurationsResponse Internal system configuration. \"\"\" resp = await self . get ( \"/internalconfig\" ) return construct_model ( InternalConfigurationsResponse , resp ) # PUT /internalconfig async def update_config ( self , config : Configurations ) -> None : \"\"\"Fully or partially update the system configuration. !!! attention Requires admin privileges or a privileged Robot account. Parameters ---------- config : Configurations The configuration map can contain a subset of the attributes of the schema, which are to be updated. \"\"\" await self . put ( \"/configurations\" , json = config ) # GET /configurations async def get_config ( self ) -> ConfigurationsResponse : \"\"\"Get the system configuration. !!! attention Requires admin privileges or a privileged Robot account. Returns ------- ConfigurationsResponse The system configuration. \"\"\" resp = await self . get ( \"/configurations\" ) return construct_model ( ConfigurationsResponse , resp ) # CATEGORY: usergroup # CATEGORY: preheat # CATEGORY: replication # CATEGORY: label # CATEGORY: robot # POST /robots async def create_robot ( self , robot : RobotCreate , path : Optional [ Union [ str , Path ]] = None , overwrite : bool = False , ) -> RobotCreated : \"\"\"Create a new robot account. !!! attention This action requires a sysadmin account to perform. Parameters ---------- robot : RobotCreate The definition for the robot account to create. path : Optional[Union[str, Path]] Optional path to save the robot credentials to. overwrite: bool If True, overwrite the existing credentials file. Has no effect if `path` is `None`. Returns ------- RobotCreated Information about the created robot account. \"\"\" resp = await self . post ( \"/robots\" , json = robot ) j = handle_optional_json_response ( resp ) if not j : raise HarborAPIException ( \"Server did not return a JSON response.\" ) robot_created = construct_model ( RobotCreated , j ) if path : new_authfile_from_robotcreate ( path , robot , robot_created , overwrite = overwrite ) logger . debug ( \"Saved robot credentials to {path} \" , path = path ) return robot_created # GET /robots async def get_robots ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , ) -> List [ Robot ]: \"\"\"Get all robot accounts, optionally filtered by query. Parameters ---------- query : Optional[str] A query string to filter the resources. Except the basic properties, the other supported queries includes: * `\"tags=*\"` to list only tagged resources * `\"tags=nil\"` to list only untagged resources * `\"tags=~v\"` to list resources whose tag fuzzy matches \"v\" * `\"tags=v\"` to list artifact whose tag exactly matches \"v\" * `\"labels=(id1, id2)\"` to list resources that both labels with id1 and id2 are added to The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page Returns ------- List[Robot] A list of registered robot accounts matching the query. \"\"\" params = { \"page\" : page , \"page_size\" : page_size , \"query\" : query , \"sort\" : sort , } params = { k : v for k , v in params . items () if v is not None } resp = await self . get ( \"/robots\" , params = params ) return [ construct_model ( Robot , r ) for r in resp ] # GET /robots/{robot_id} async def get_robot ( self , robot_id : int ) -> Robot : \"\"\"Fetch a robot account by its ID. Parameters ---------- robot_id : int The ID of the robot account to get. Returns ------- Robot Information about the robot account. \"\"\" resp = await self . get ( f \"/robots/ { robot_id } \" ) return construct_model ( Robot , resp ) # PUT /robots/{robot_id} async def update_robot ( self , robot_id : int , robot : Robot ) -> None : \"\"\"Update a robot account. Parameters ---------- robot_id : int The ID of the robot account to update. robot : Robot The new definition for the robot account. \"\"\" await self . put ( f \"/robots/ { robot_id } \" , json = robot ) # DELETE /robots/{robot_id} async def delete_robot ( self , robot_id : int , missing_ok : bool = False ) -> None : \"\"\"Delete a robot account. Parameters ---------- robot_id : int The ID of the robot account to delete. missing_ok : bool Do not raise an error if the robot account does not exist. \"\"\" await self . delete ( f \"/robots/ { robot_id } \" , missing_ok = missing_ok ) # PATCH /robots/{robot_id} async def update_robot_secret ( self , robot_id : int , secret : str ) -> RobotSec : \"\"\"Give the robot account a new secret. Parameters ---------- robot_id : int The ID of the robot account to refresh. secret : str The new secret for the robot account. \"\"\" resp = await self . patch ( f \"/robots/ { robot_id } \" , json = RobotSec ( secret = secret )) return construct_model ( RobotSec , resp ) # CATEGORY: webhookjob # CATEGORY: icon # CATEGORY: project # PUT /projects/{project_name_or_id}/scanner async def set_project_scanner ( self , project_name_or_id : str , scanner_uuid : str ) -> None : \"\"\"Set one of the system configured scanner registration as the indepndent scanner of the specified project. Parameters ---------- project_name_or_id: Union[str, int] The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. Strings arguments set the `\"X-Is-Resource-Name\"` header to `true`. scanner_uuid: str The UUID of the scanner to set as the independent scanner of the project \"\"\" headers = get_project_headers ( project_name_or_id ) await self . put ( f \"/projects/ { project_name_or_id } /scanner\" , json = ProjectScanner ( uuid = scanner_uuid ), headers = headers , ) # GET /projects/{project_name_or_id}/scanner async def get_project_scanner ( self , project_name_or_id : str ) -> ScannerRegistration : \"\"\"Get the scanner registration of the specified project. If no scanner registration is configured for the specified project, the system default scanner registration will be returned. Parameters ---------- project_name_or_id: Union[str, int] The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. Strings arguments set the `\"X-Is-Resource-Name\"` header to `true`. Returns ------- ScannerRegistration The scanner registration of the specified project \"\"\" headers = get_project_headers ( project_name_or_id ) resp = await self . get ( f \"/projects/ { project_name_or_id } /scanner\" , headers = headers ) return construct_model ( ScannerRegistration , resp ) # GET /projects/{project_name}/logs async def get_project_logs ( self , project_name : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = False , ) -> List [ AuditLog ]: \"\"\" Get the audit logs of the specified project. Parameters ---------- project_name: str The name of the project query : Optional[str] Query string to filter the logs. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } logs = await self . get ( f \"/projects/ { project_name } /logs\" , params = params , follow_links = retrieve_all ) return [ construct_model ( AuditLog , l ) for l in logs ] # HEAD /projects async def project_exists ( self , project_name : str ) -> bool : \"\"\"Check if a project exists. Parameters ---------- project_name: str The name of the project \"\"\" try : await self . head ( f \"/projects\" , params = { \"project_name\" : project_name }) except NotFound : return False return True # POST /projects async def create_project ( self , project : ProjectReq ) -> str : \"\"\"Create a new project. Returns location of the created project.\"\"\" resp = await self . post ( \"/projects\" , json = project , headers = { \"X-Resource-Name-In-Location\" : \"true\" } ) return urldecode_header ( resp , \"Location\" ) # GET /projects async def get_projects ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , name : Optional [ str ] = None , public : Optional [ bool ] = None , owner : Optional [ str ] = None , with_detail : bool = True , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Project ]: \"\"\"Get the artifacts for a repository. Parameters ---------- query: Optional[str] Query string to query resources. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the projects. name: str The name of the project. public: bool Only fetch public projects. owner: str The owner of the project. with_detail : bool Return detailed information about the project. page : int The page of results to return page_size : int The number of results to return per page retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"name\" : name , \"public\" : public , \"owner\" : owner , \"with_detail\" : with_detail , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } projects = await self . get ( \"/projects\" , params = params , follow_links = retrieve_all ) return [ construct_model ( Project , p ) for p in projects ] # PUT /projects/{project_name_or_id} async def update_project ( self , project_name_or_id : Union [ str , int ], project : ProjectReq ) -> None : \"\"\"Update a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. project: ProjectReq The updated project \"\"\" headers = get_project_headers ( project_name_or_id ) await self . put ( f \"/projects/ { project_name_or_id } \" , json = project , headers = headers ) # GET /projects/{project_name_or_id} async def get_project ( self , project_name_or_id : Union [ str , int ]) -> Project : \"\"\"Fetch a project given its name or ID. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. \"\"\" headers = get_project_headers ( project_name_or_id ) project = await self . get ( f \"/projects/ { project_name_or_id } \" , headers = headers ) return construct_model ( Project , project ) # DELETE /projects/{project_name_or_id} async def delete_project ( self , project_name_or_id : Union [ str , int ], missing_ok : bool = False ) -> None : \"\"\"Delete a project given its name or ID. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. missing_ok: bool If true, ignore 404 error when the project is not found. \"\"\" headers = get_project_headers ( project_name_or_id ) await self . delete ( f \"/projects/ { project_name_or_id } \" , headers = headers , missing_ok = missing_ok ) # GET /projects/{project_name_or_id}/scanner/candidates async def get_project_scanner_candidates ( self , project_name_or_id : Union [ str , int ], query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , ) -> List [ ScannerRegistration ]: \"\"\"Get the scanner candidates for a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. query: Optional[str] Query string to query resources. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the scanners. page : int The page of results to return page_size : int The number of results to return per page \"\"\" headers = get_project_headers ( project_name_or_id ) params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } candidates = await self . get ( f \"/projects/ { project_name_or_id } /scanner/candidates\" , params = params , headers = headers , ) return [ construct_model ( ScannerRegistration , c ) for c in candidates ] # GET /projects/{project_name_or_id}/summary async def get_project_summary ( self , project_name_or_id : Union [ str , int ] ) -> ProjectSummary : \"\"\"Get the summary of a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. \"\"\" headers = get_project_headers ( project_name_or_id ) summary = await self . get ( f \"/projects/ { project_name_or_id } /summary\" , headers = headers ) return construct_model ( ProjectSummary , summary ) # GET /projects/{project_name_or_id}/_deletable async def get_project_deletable ( self , project_name_or_id : Union [ str , int ] ) -> ProjectDeletable : \"\"\"Get the deletable status of a project. Parameters ---------- project_name_or_id: str The name or ID of the project * String arguments are treated as project names. * Integer arguments are treated as project IDs. Returns ------- ProjectDeletable The deletable status of a project. If `.deletable` is `None`, the project is not deletable. This is an implementation detail, and might change in the future. \"\"\" headers = get_project_headers ( project_name_or_id ) deletable = await self . get ( f \"/projects/ { project_name_or_id } /_deletable\" , headers = headers ) return construct_model ( ProjectDeletable , deletable ) # CATEGORY: webhook # CATEGORY: scan # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan async def scan_artifact ( self , project_name : str , repository_name : str , reference : str ) -> None : \"\"\"Scan an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . post ( f \" { path } /scan\" ) if resp . status_code != 202 : logger . warning ( \"Scan request for {} returned status code {} , expected 202\" , path , resp . status_code , ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log async def get_artifact_scan_report_log ( self , project_name : str , repository_name : str , reference : str , report_id : str ) -> str : \"\"\"Get the log of a scan report. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag report_id : str The ID of the scan report Returns ------- str The log of a scan report \"\"\" \"\"\"\"\"\" # TODO: investigate what exactly this endpoint returns path = get_artifact_path ( project_name , repository_name , reference ) return await self . get_text ( f \" { path } /scan/ { report_id } /log\" ) # # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/stop async def stop_artifact_scan ( self , project_name : str , repository_name : str , reference : str ) -> None : \"\"\"Stop a scan for a particular artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . post ( f \" { path } /scan/stop\" ) if resp . status_code != 202 : logger . warning ( \"Stop scan request for {} returned status code {} , expected 202\" , path , resp . status_code , ) # CATEGORY: member # CATEGORY: ldap # CATEGORY: registry # POST /registries/ping async def check_registry_status ( self , ping : RegistryPing ) -> None : \"\"\"Check the status of the registry. Parameters ---------- ping : RegistryPing The ping request \"\"\" await self . post ( \"/registries/ping\" , json = ping ) # GET /replication/adapters async def get_registry_adapters ( self ) -> List [ str ]: \"\"\"Get the list of available registry adapters. Returns ------- List[str] The list of available registry adapters \"\"\" resp = await self . get ( \"/replication/adapters\" ) return resp # type: ignore # we know this is a list of strings # GET /registries/{id}/info async def get_registry_info ( self , id : int ) -> RegistryInfo : \"\"\"Get the info of a registry. Parameters ---------- id : int The ID of the registry Returns ------- RegistryInfo The info of a registry \"\"\" resp = await self . get ( f \"/registries/ { id } /info\" ) return construct_model ( RegistryInfo , resp ) # GET /replication/adapterinfos async def get_registry_providers ( self ) -> List [ RegistryProviderInfo ]: \"\"\"Get all registered registry provider information. Returns ------- List[RegistryProviderInfo] A list of RegistryProviderInfo objects. \"\"\" resp = await self . get ( \"/replication/adapterinfos\" ) return [ construct_model ( RegistryProviderInfo , p ) for p in resp ] # PUT /registries/{id} async def update_registry ( self , id : int , registry : RegistryUpdate ) -> None : \"\"\"Update a registry. Parameters ---------- id : int The ID of the registry registry : RegistryUpdate The updated registry values. \"\"\" await self . put ( f \"/registries/ { id } \" , json = registry ) # GET /registries/{id} async def get_registry ( self , id : int ) -> Registry : \"\"\"Get a registry. Parameters ---------- id : int The ID of the registry Returns ------- Registry The registry \"\"\" resp = await self . get ( f \"/registries/ { id } \" ) return construct_model ( Registry , resp ) # DELETE /registries/{id} async def delete_registry ( self , id : int , missing_ok : bool = False ) -> None : \"\"\"Delete a registry. Parameters ---------- id : int The ID of the registry missing_ok : bool If True, don't raise an exception if the registry doesn't exist. \"\"\" await self . delete ( f \"/registries/ { id } \" , missing_ok = missing_ok ) # POST /registries async def create_registry ( self , registry : Registry ) -> str : \"\"\"Create a new registry. Parameters ---------- registry : Registry The new registry values. Returns ------- str The location of the created registry. \"\"\" resp = await self . post ( \"/registries\" , json = registry ) return urldecode_header ( resp , \"Location\" ) # GET /registries async def get_registries ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , name : Optional [ str ] = None , retrieve_all : bool = True , ) -> List [ Registry ]: \"\"\"Get all registries. Parameters ---------- query : Optional[str] A query string to filter the registries. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page name: str: Optional[str] The name of the registry (deprecated, use `query` instead) retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Registry] A list of Registry objects. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , \"name\" : name , } params = { k : v for k , v in params . items () if v is not None } resp = await self . get ( \"/registries\" , params = params , follow_links = retrieve_all ) return [ construct_model ( Registry , r ) for r in resp ] # CATEGORY: search # GET /search async def search ( self , query : str ) -> Search : \"\"\"Search for projects, repositories and helm charts that the user has access to. WARNING ------- This method's API seems immature and may change in the future. Right now we just copy the API spec, which only takes a query string. Parameters ---------- query : str Project and/or repository name to search for. Returns ------- Search The search results. \"\"\" resp = await self . get ( \"/search\" , params = { \"q\" : query }) return construct_model ( Search , resp ) # CATEGORY: artifact # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def create_artifact_tag ( self , project_name : str , repository_name : str , reference : str , tag : Tag ) -> str : \"\"\"Create a tag for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag tag : Tag The tag to create Returns ------- str The location of the created tag \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . post ( f \" { path } /tags\" , json = tag ) if resp . status_code != 201 : logger . warning ( \"Create tag request for {} returned status code {} , expected 201\" , path , resp . status_code , ) return urldecode_header ( resp , \"Location\" ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def get_artifact_tags ( self , project_name : str , repository_name : str , reference : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , with_signature : bool = False , with_immutable_status : bool = False , retrieve_all : bool = True , ) -> List [ Tag ]: \"\"\"Get the tags for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag query : Optional[str] A query string to filter the tags Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the tags. TODO: document this parameter page : int The page of results to return page_size : int The number of results to return per page with_signature : bool Whether to include the signature of the tag in the response with_immutable_status : bool Whether to include the immutable status of the tag in the response retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Tag] A list of Tag objects for the artifact. \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) params = { \"page\" : page , \"page_size\" : page_size , \"with_signature\" : with_signature , \"with_immutable_status\" : with_immutable_status , } # type: Dict[str, Any] if query : params [ \"q\" ] = query if sort : params [ \"sort\" ] = sort resp = await self . get ( f \" { path } /tags\" , follow_links = retrieve_all ) return [ construct_model ( Tag , t ) for t in resp ] # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def get_artifact_accessories ( self , project_name : str , repository_name : str , reference : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Accessory ]: \"\"\"Get the tags for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag query : Optional[str] A query string to filter the accessories Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the tags. page : int The page of results to return page_size : int The number of results to return per page retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Accessory] A list of Accessory objects for the artifact. \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) params = { \"page\" : page , \"page_size\" : page_size , } # type: Dict[str, Any] if query : params [ \"q\" ] = query if sort : params [ \"sort\" ] = sort resp = await self . get ( f \" { path } /accessories\" , follow_links = retrieve_all ) return [ construct_model ( Accessory , a ) for a in resp ] # DELETE /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags async def delete_artifact_tag ( self , project_name : str , repository_name : str , reference : str , tag_name : str , missing_ok : bool = False , ) -> None : \"\"\"Get the tags for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag tag_name : str The name of the tag to delete \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) # TODO: implement missing_ok for all delete methods await self . delete ( f \" { path } /tags/ { tag_name } \" , missing_ok = missing_ok ) # POST /projects/{project_name}/repositories/{repository_name}/artifacts async def copy_artifact ( self , project_name : str , repository_name : str , source : str ) -> str : \"\"\"Copy an artifact. Parameters ---------- project_name : str Name of new artifact's project repository_name : str Name of new artifact's repository source : str The source artifact to copy from in the form of `\"project/repository:tag\"` or `\"project/repository@digest\"` Returns ------- str The location of the new artifact \"\"\" # We have to encode the destination repo name, but NOT the source repo name. path = get_repo_path ( project_name , repository_name ) resp = await self . post ( f \" { path } /artifacts\" , params = { \"from\" : source }) if resp . status_code != 201 : logger . warning ( \"Copy artifact request for {} returned status code {} , expected 201\" , path , resp . status_code , ) return urldecode_header ( resp , \"Location\" ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts async def get_artifacts ( self , project_name : str , repository_name : str , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , with_tag : bool = True , with_label : bool = False , with_scan_overview : bool = False , with_signature : bool = False , with_immutable_status : bool = False , with_accessory : bool = False , mime_type : str = \"application/vnd.security.vulnerability.report; version=1.1\" , retrieve_all : bool = True , ) -> List [ Artifact ]: \"\"\"Get the artifacts for a repository. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository query : Optional[str] A query string to filter the artifacts Except the basic properties, the other supported queries includes: * `\"tags=*\"` to list only tagged artifacts * `\"tags=nil\"` to list only untagged artifacts * `\"tags=~v\"` to list artifacts whose tag fuzzy matches \"v\" * `\"tags=v\"` to list artifact whose tag exactly matches \"v\" * `\"labels=(id1, id2)\"` to list artifacts that both labels with id1 and id2 are added to The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the artifacts. page : int The page of results to return page_size : int The number of results to return per page with_tag : bool Whether to include the tags of the artifact in the response with_label : bool Whether to include the labels of the artifact in the response with_scan_overview : bool Whether to include the scan overview of the artifact in the response with_signature : bool Whether the signature is included inside the tags of the returning artifacts. Only works when setting `with_tag==True`. with_immutable_status : bool Whether the immutable status is included inside the tags of the returning artifacts. with_accessory : bool Whether the accessories are included of the returning artifacts. mime_type : str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: * application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 * application/vnd.security.vulnerability.report; version=1.1 retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Artifact] A list of artifacts in the repository matching the query. \"\"\" path = f \"/projects/ { project_name } /repositories/ { repository_name } /artifacts\" params = { \"page\" : page , \"page_size\" : page_size , \"with_tag\" : with_tag , \"with_label\" : with_label , \"with_scan_overview\" : with_scan_overview , \"with_signature\" : with_signature , \"with_immutable_status\" : with_immutable_status , \"with_accessory\" : with_accessory , } # type: Dict[str, Union[str, int, bool]] if query : params [ \"q\" ] = query if sort : params [ \"sort\" ] = sort resp = await self . get ( f \" { path } \" , params = params , headers = { \"X-Accept-Vulnerabilities\" : mime_type }, follow_links = retrieve_all , ) return [ construct_model ( Artifact , a ) for a in resp ] # POST /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels async def add_artifact_label ( self , project_name : str , repository_name : str , reference : str , label : Label , ) -> None : \"\"\"Add a label to an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag label : Label The label to add \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) await self . post ( f \" { path } /labels\" , json = label , ) # response should have status code 201, but API spec says it's 200 # so we don't check it async def get_artifact ( self , project_name : str , repository_name : str , reference : str , page : int = 1 , page_size : int = 10 , with_tag : bool = True , with_label : bool = False , with_scan_overview : bool = False , with_signature : bool = False , with_immutable_status : bool = False , with_accessory : bool = False , mime_type : str = \"application/vnd.security.vulnerability.report; version=1.1\" , ) -> Artifact : \"\"\"Get an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag page : int The page of results to return page_size : int The number of results to return per page with_tag : bool Whether to include the tags of the artifact in the response with_label : bool Whether to include the labels of the artifact in the response with_scan_overview : bool Whether to include the scan overview of the artifact in the response with_signature : bool Whether the signature is included inside the tags of the returning artifact. Only works when setting `with_tag==True`. with_immutable_status : bool Whether the immutable status is included inside the tags of the returning artifact. with_accessory : bool Whether the accessories are included of the returning artifact. mime_type : str A comma-separated lists of MIME types for the scan report or scan summary. The first mime type will be used when the report found for it. Currently the mime type supports: * application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0 * application/vnd.security.vulnerability.report; version=1.1 Returns ------- Artifact An artifact. \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) resp = await self . get ( f \" { path } \" , params = { \"page\" : page , \"page_size\" : page_size , \"with_tag\" : with_tag , \"with_label\" : with_label , \"with_scan_overview\" : with_scan_overview , \"with_signature\" : with_signature , \"with_immutable_status\" : with_immutable_status , \"with_accessory\" : with_accessory , }, headers = { \"X-Accept-Vulnerabilities\" : mime_type }, ) return construct_model ( Artifact , resp ) async def delete_artifact ( self , project_name : str , repository_name : str , reference : str , missing_ok : bool = False , ) -> None : \"\"\"Delete an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag missing_ok : bool Whether to ignore 404 error when deleting the artifact \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) await self . delete ( path , missing_ok = missing_ok ) async def delete_artifact_label ( self , project_name : str , repository_name : str , reference : str , label_id : int , missing_ok : bool = False , ) -> None : \"\"\"Delete an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag label_id : int The id of the label to delete missing_ok : bool Whether to ignore 404 error when deleting the label \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) url = f \" { path } /labels/ { label_id } \" await self . delete ( url , missing_ok = missing_ok ) # GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities async def get_artifact_vulnerabilities ( self , project_name : str , repository_name : str , reference : str , # Make this default to \"latest\"? # TODO: support multiple mime types? mime_type : str = \"application/vnd.security.vulnerability.report; version=1.1\" , ) -> Optional [ HarborVulnerabilityReport ]: \"\"\"Get the vulnerabilities for an artifact. Parameters ---------- project_name : str The name of the project repository_name : str The name of the repository reference : str The reference of the artifact, can be digest or tag mime_type : str A comma-separated lists of MIME types for the scan report or scan summary. Returns ------- Optional[HarborVulnerabilityReport] The vulnerabilities for the artifact, or None if the artifact is not found \"\"\" path = get_artifact_path ( project_name , repository_name , reference ) url = f \" { path } /additions/vulnerabilities\" resp = await self . get ( url , headers = { \"X-Accept-Vulnerabilities\" : mime_type }) if not isinstance ( resp , dict ): logger . bind ( response = resp ) . warning ( \" {} returned non-dict response\" , url ) return None # Get the report, which is stored under the key of the mime type report = resp . get ( mime_type ) if not report : logger . warning ( \" {} returned no report\" , url ) # Is this an error? return None return construct_model ( HarborVulnerabilityReport , report ) # CATEGORY: immutable # CATEGORY: retention # CATEGORY: scanner # POST /scanners async def create_scanner ( self , scanner : ScannerRegistrationReq ) -> str : \"\"\"Creates a new scanner. Returns location of the created scanner. Parameters ---------- scanner : ScannerRegistrationReq The scanner to create. Returns ------- str The location of the created scanner. \"\"\" resp = await self . post ( \"/scanners\" , json = scanner ) return urldecode_header ( resp , \"Location\" ) # GET /scanners async def get_scanners ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , ) -> List [ ScannerRegistration ]: \"\"\"Get a list of scanners. Parameters ---------- query : Optional[str] A query string to filter the scanners. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : Optional[str] The sort order of the scanners. page : int The page of results to return page_size : int The number of results to return per page Returns ------- List[ScannerRegistration] _description_ \"\"\" params = { \"q\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } scanners = await self . get ( \"/scanners\" , params = params ) return [ construct_model ( ScannerRegistration , s ) for s in scanners ] # PUT /scanners/{registration_id} async def update_scanner ( self , registration_id : Union [ int , str ], scanner : ScannerRegistrationReq ) -> None : \"\"\"Update a scanner. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to update. scanner : ScannerRegistrationReq The updated scanner definition. \"\"\" await self . put ( f \"/scanners/ { registration_id } \" , json = scanner ) # GET /scanners/{registration_id} async def get_scanner ( self , registration_id : Union [ int , str ] ) -> ScannerRegistration : \"\"\"Fetch a scanner by ID. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to fetch. Returns ------- ScannerRegistration The scanner. \"\"\" scanner = await self . get ( f \"/scanners/ { registration_id } \" ) return construct_model ( ScannerRegistration , scanner ) # DELETE /scanners/{registration_id} async def delete_scanner ( self , registration_id : Union [ int , str ], missing_ok : bool = False , ) -> Optional [ ScannerRegistration ]: \"\"\"Delete a scanner by ID. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to delete. missing_ok : bool Whether to ignore 404 error when deleting the scanner. Returns ------- Optional[ScannerRegistration] The scanner, or None if the scanner is not found and `missing_ok` is True. Raises ------ HarborAPIException Successful deletion request that returns an empty response. \"\"\" scanner = await self . delete ( f \"/scanners/ { registration_id } \" , missing_ok = missing_ok ) # TODO: differentiate between 404 and no return value (how?) if not scanner : if missing_ok : return None raise HarborAPIException ( \"Deletion request returned no data. Is the scanner registered?\" ) return construct_model ( ScannerRegistration , scanner ) # PATCH /scanners/{registration_id} async def set_default_scanner ( self , registration_id : Union [ int , str ], is_default : bool = True ) -> None : \"\"\"Set a scanner as the default scanner. Parameters ---------- registration_id : Union[int, str] The ID of the scanner to set as the default. is_default : bool Whether to set the scanner as the default, by default `True`. Set to `False` to unset the scanner as the default. \"\"\" await self . patch ( f \"/scanners/ { registration_id } \" , json = IsDefault ( is_default = is_default ) ) # POST /scanners/ping async def ping_scanner_adapter ( self , settings : ScannerRegistrationSettings ) -> None : \"\"\"Ping a scanner adapter. Parameters ---------- settings : ScannerRegistrationSettings The settings of the scanner adapter. \"\"\" await self . post ( \"/scanners/ping\" , json = settings ) # GET /scanners/{registration_id}/metadata async def get_scanner_metadata ( self , registration_id : int ) -> ScannerAdapterMetadata : \"\"\"Get metadata of a scanner adapter given its registration ID. Parameters ---------- registration_id : int The ID of the scanner adapter. Returns ------- ScannerAdapterMetadata The metadata of the scanner adapter. \"\"\" scanner = await self . get ( f \"/scanners/ { registration_id } /metadata\" ) return construct_model ( ScannerAdapterMetadata , scanner ) # CATEGORY: systeminfo # GET /systeminfo/volumes async def get_system_volume_info ( self ) -> SystemInfo : \"\"\"Get info about the system's volumes. Returns ------- SystemInfo Information about the system's volumes. \"\"\" resp = await self . get ( \"/systeminfo/volumes\" ) return construct_model ( SystemInfo , resp ) # GET /systeminfo/getcert # async def get_system_certificate(self) -> str: # \"\"\"Get the certificate for the system.\"\"\" # raise NotImplementedError(\"File download not yet implemented\") # GET /systeminfo async def get_system_info ( self ) -> GeneralInfo : \"\"\"Get general info about the system. Returns ------- GeneralInfo The general info about the system \"\"\" resp = await self . get ( \"/systeminfo\" ) return construct_model ( GeneralInfo , resp ) # CATEGORY: statistic async def get_statistics ( self ) -> Statistic : \"\"\"Get statistics on the Harbor server. Returns ------- Statistic The statistics on the Harbor server \"\"\" stats = await self . get ( \"/statistics\" ) return construct_model ( Statistic , stats ) # CATEGORY: quota async def get_quotas ( self , reference : Optional [ str ] = None , reference_id : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Quota ]: \"\"\"Get quotas. Parameters ---------- reference : str The reference type of the quota. TODO: document what these values can be. reference_id : str The reference id of the quota sort : str Sort method. Valid values include: - `\"hard.resource_name\"` - `\"-hard.resource_name\"` - `\"used.resource_name\"` - `\"-used.resource_name\"` `-` denotes descending order `resource_name` should be the real resource name of the quota page: int The page number to retrieve resources from. page_size: int The number of resources to retrieve per page. retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Quota] The quotas \"\"\" params = { \"reference\" : reference , \"reference_id\" : reference_id , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } quotas = await self . get ( \"/quotas\" , params = params , follow_links = retrieve_all ) return [ construct_model ( Quota , q ) for q in quotas ] async def update_quota ( self , id : int , quota : QuotaUpdateReq ) -> None : \"\"\"Update a quota. Parameters ---------- id : int The id of the quota to update. quota : QuotaUpdateReq The new quota values. `QuotaUpdateReq.hard` allows assignment of any attribute with an `int` value. Example: ```py QuotaUpdateReq( hard={\"storage\": 100000, \"other_property\": 1234} ) ``` \"\"\" await self . put ( f \"/quotas/ { id } \" , json = quota ) async def get_quota ( self , id : int ) -> Quota : \"\"\"Get a quota by id. Parameters ---------- id : int The id of the quota to get. Returns ------- Quota The quota \"\"\" quota = await self . get ( f \"/quotas/ { id } \" ) return construct_model ( Quota , quota ) # CATEGORY: repository # GET /projects/{project_name}/repositories/{repository_name} async def get_repository ( self , project_id : str , repository_name : str , ) -> Repository : \"\"\"Get a repository. Parameters ---------- project_id : int The id of the project the repository belongs to. repository_name : str The name of the repository. Returns ------- Repository The repository. \"\"\" path = get_repo_path ( project_id , repository_name ) resp = await self . get ( path ) return construct_model ( Repository , resp ) # PUT /projects/{project_name}/repositories/{repository_name} async def update_repository ( self , project_name : str , repository_name : str , repository : Repository , ) -> None : \"\"\"Update a repository. Parameters ---------- project_name : str The name of the project the repository belongs to. repository_name : str The name of the repository. repository : Repository The new repository values. \"\"\" path = get_repo_path ( project_name , repository_name ) await self . put ( path , json = repository ) # DELETE /projects/{project_name}/repositories/{repository_name} async def delete_repository ( self , project_id : str , repository_name : str , missing_ok : bool = False , ) -> None : \"\"\"Get a repository. Parameters ---------- project_id : int The id of the project the repository belongs to. repository_name : str The name of the repository. missing_ok : bool If true, do not raise an error if the repository does not exist. \"\"\" path = get_repo_path ( project_id , repository_name ) await self . delete ( path , missing_ok = missing_ok , ) # GET /projects/{project_name}/repositories # & # GET /repositories async def get_repositories ( self , project_name : Optional [ str ] = None , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = True , ) -> List [ Repository ]: \"\"\"Get a list of repositories Parameters ---------- project_name : str The name of the project. query : str The query string to filter the repositories. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort : str The sort method. TODO: add boilerplate sort documentation page : int The page of results to return page_size : int The number of results to return per page retrieve_all : bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[Repository] A list of repositories matching the query. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } if project_name : url = f \"/projects/ { project_name } /repositories\" else : url = \"/repositories\" resp = await self . get ( url , params = params , follow_links = retrieve_all ) return [ construct_model ( Repository , r ) for r in resp ] # CATEGORY: ping # GET /ping async def ping_harbor_api ( self ) -> str : \"\"\"Pings the Harbor server to check if it is alive. Returns ------- str Text response from the server. \"\"\" return await self . get_text ( \"/ping\" ) # CATEGORY: oidc # POST /system/oidc/ping async def test_oidc ( self , oidcreq : OIDCTestReq ) -> None : \"\"\"Tests an OIDC endpoint. Can only be called by system admin. Raises `StatusError` if endpoint is unreachable. Parameters ---------- oidcreq : OIDCTestReq The OIDC test request. \"\"\" await self . post ( \"/system/oidc/ping\" , json = oidcreq ) # CATEGORY: SystemCVEAllowlist # PUT /system/CVEAllowlist async def update_cve_allowlist ( self , allowlist : CVEAllowlist ) -> None : \"\"\"Overwrites the existing CVE allowlist with a new one. Parameters ---------- allowlist : CVEAllowlist The new CVE allowlist. \"\"\" await self . put ( \"/system/CVEAllowlist\" , json = allowlist ) # GET /system/CVEAllowlist async def get_cve_allowlist ( self ) -> CVEAllowlist : \"\"\"Gets the current CVE allowlist. Returns ------- CVEAllowlist The current CVE allowlist. \"\"\" resp = await self . get ( \"/system/CVEAllowlist\" ) return construct_model ( CVEAllowlist , resp ) # CATEGORY: health # GET /health async def health_check ( self ) -> OverallHealthStatus : \"\"\"Gets the health status of the Harbor server. Returns ------- OverallHealthStatus The health status of the Harbor server. \"\"\" resp = await self . get ( \"/health\" ) return construct_model ( OverallHealthStatus , resp ) # CATEGORY: robotv1 # CATEGORY: projectMetadata # CATEGORY: auditlog # GET /audit-logs async def get_audit_logs ( self , query : Optional [ str ] = None , sort : Optional [ str ] = None , page : int = 1 , page_size : int = 10 , retrieve_all : bool = False , ) -> List [ AuditLog ]: \"\"\"Get a list of audit logs for the projects the user is a member of. !!! note Set `retrieve_all` to `True` to retrieve the entire audit log for all projects. Parameters ---------- query: Optional[str] Query string to query resources. Supported query patterns are: * exact match(`\"k=v\"`) * fuzzy match(`\"k=~v\"`) * range(`\"k=[min~max]\"`) * list with union releationship(`\"k={v1 v2 v3}\"`) * list with intersection relationship(`\"k=(v1 v2 v3)\"`). The value of range and list can be: * string(enclosed by `\"` or `'`) * integer * time(in format `\"2020-04-09 02:36:00\"`) All of these query patterns should be put in the query string and separated by `\",\"`. e.g. `\"k1=v1,k2=~v2,k3=[min~max]\"` sort: Optional[str] Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with `\"sort=field1,-field2\"` page: int The page number to fetch resources from. page_size: int The number of resources to fetch per page. retrieve_all: bool If true, retrieve all the resources, otherwise, retrieve only the number of resources specified by `page_size`. Returns ------- List[AuditLog] The list of audit logs. \"\"\" params = { \"query\" : query , \"sort\" : sort , \"page\" : page , \"page_size\" : page_size , } params = { k : v for k , v in params . items () if v is not None } resp = await self . get ( \"/audit-logs\" , params = params , follow_links = retrieve_all ) return [ construct_model ( AuditLog , r ) for r in resp ] def _get_headers ( self , headers : Optional [ Dict [ str , Any ]] = None ) -> Dict [ str , str ]: headers = headers or {} base_headers = { \"Authorization\" : \"Basic \" + self . credentials , \"Accept\" : \"application/json\" , } base_headers . update ( headers ) # Override defaults with provided headers return base_headers @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def get ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , follow_links : bool = True , ** kwargs : Any , ) -> JSONType : return await self . _get ( path , params = params , headers = headers , follow_links = follow_links , ** kwargs , ) @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def get_text ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> str : \"\"\"Bad workaround in order to have a cleaner API for text/plain responses.\"\"\" headers = headers or {} headers . update ({ \"Accept\" : \"text/plain\" }) resp = await self . _get ( path , params = params , headers = headers , ** kwargs ) return resp # type: ignore # TODO: refactor this method so it looks like the other methods, while still supporting pagination. async def _get ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , follow_links : bool = True , ** kwargs : Any , ) -> JSONType : \"\"\"Sends a GET request to the Harbor API. Returns JSON unless the response is text/plain. Parameters ---------- path : str URL path to resource params : Optional[dict] Request parameters headers : Optional[dict] Request headers follow_links : bool Enable pagination by following links in response header Returns ------- JSONType JSON data returned by the API \"\"\" # async with httpx.AsyncClient() as client: resp = await self . client . get ( self . url + path , params = params , headers = self . _get_headers ( headers ), ) check_response_status ( resp ) j = handle_optional_json_response ( resp ) if j is None : return resp . text # type: ignore # FIXME: resolve this ASAP (use overload?) # If we have \"Link\" in headers, we need to handle paginated results if ( link := resp . headers . get ( \"link\" )) and 'rel=\"next\"' in link and follow_links : logger . debug ( \"Handling paginated results. Header value: {} \" , link ) j = await self . _handle_pagination ( j , link ) # recursion (refactor?) return j async def _handle_pagination ( self , data : JSONType , link : str ) -> JSONType : \"\"\"Handles paginated results by recursing until all results are returned.\"\"\" # Parse the link header value and get next page URL next_url = parse_pagination_url ( link ) # ignoring params and only using the next URL # the next URL should contain the original params with page number adjusted j = await self . get ( next_url ) if not isinstance ( j , list ) or not isinstance ( data , list ): logger . warning ( \"Unable to handle paginated results, received non-list value. URL: {} \" , next_url , ) # TODO: add more diagnostics info here return data data . extend ( j ) return data # NOTE: POST is not idempotent, should we still retry? # TODO: fix abstraction of post/_post. Put everything into _post? @backoff . on_exception ( backoff . expo , RequestError , max_tries = 1 ) async def post ( self , path : str , json : Optional [ Union [ BaseModel , JSONType ]] = None , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ) -> Response : \"\"\"Sends a POST request to a path, optionally with a JSON body.\"\"\" return await self . _post ( path , json = json , params = params , headers = headers , ) async def _post ( self , path : str , json : Optional [ Union [ BaseModel , JSONType ]] = None , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ) -> Response : if isinstance ( json , BaseModel ): json = json . dict () resp = await self . client . post ( self . url + path , json = json , params = params , headers = self . _get_headers ( headers ), ) check_response_status ( resp ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def put ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Optional [ JSONType ]: resp = await self . _put ( path , json = json , params = params , headers = headers , ** kwargs , ) return handle_optional_json_response ( resp ) async def _put ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Response : if isinstance ( json , BaseModel ): json = json . dict () resp = await self . client . put ( self . url + path , json = json , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def patch ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Optional [ JSONType ]: resp = await self . _patch ( path , json = json , headers = headers , params = params , ** kwargs , ) return handle_optional_json_response ( resp ) async def _patch ( self , path : str , json : Union [ BaseModel , JSONType ], params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , ** kwargs : Any , ) -> Response : if isinstance ( json , BaseModel ): json = json . dict () resp = await self . client . patch ( self . url + path , json = json , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def delete ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Optional [ JSONType ]: resp = await self . _delete ( path , headers = headers , params = params , missing_ok = missing_ok , ** kwargs , ) return handle_optional_json_response ( resp ) async def _delete ( self , path : str , headers : Optional [ Dict [ str , Any ]] = None , params : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Response : resp = await self . client . delete ( self . url + path , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp , missing_ok = missing_ok ) return resp @backoff . on_exception ( backoff . expo , RequestError , max_time = 30 ) async def head ( self , path : str , params : Optional [ Dict [ str , Any ]] = None , headers : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Response : resp = await self . _head ( path , headers = headers , params = params , missing_ok = missing_ok , ** kwargs , ) return resp async def _head ( self , path : str , headers : Optional [ Dict [ str , Any ]] = None , params : Optional [ Dict [ str , Any ]] = None , missing_ok : bool = False , ** kwargs : Any , ) -> Response : resp = await self . client . head ( self . url + path , params = params , headers = self . _get_headers ( headers ), ** kwargs , ) check_response_status ( resp , missing_ok = missing_ok ) return resp","title":"HarborAsyncClient"},{"location":"reference/client/#harborapi.client.HarborAsyncClient.__init__","text":"Initialize a new HarborAsyncClient with either a username and secret, an authentication token, or a credentials file. Parameters: Name Type Description Default url str The URL of the Harbor server in the format http://host:[port]/api/v<version> Example: http://localhost:8080/api/v2.0 required username Optional [ str ] Username to use for authentication. If not provided, the client attempts to use credentials to authenticate. None secret Optional [ str ] Secret to use for authentication along with username . None credentials Optional [ str ] base64-encoded Basic Access Authentication credentials to use for authentication in place of username and secret . None credentials_file Optional [ Union [ str , Path ]] Path to a JSON-encoded credentials file from which to load credentials. None logging bool Enable client logging with Loguru . False config Optional [ Any ] (NYI) config None version str Used to construct URL if the specified URL does not contain the version. '2.0' Raises: Type Description ValueError Neither username and secret , credentials nor credentials_file are provided. Source code in harborapi/client.py 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 def __init__ ( self , url : str , username : Optional [ str ] = None , secret : Optional [ str ] = None , credentials : Optional [ str ] = None , credentials_file : Optional [ Union [ str , Path ]] = None , logging : bool = False , config : Optional [ Any ] = None , # NYI version : str = \"2.0\" , ** kwargs : Any , ) -> None : \"\"\"Initialize a new HarborAsyncClient with either a username and secret, an authentication token, or a credentials file. Parameters ---------- url : str The URL of the Harbor server in the format `http://host:[port]/api/v<version>` Example: `http://localhost:8080/api/v2.0` username : Optional[str] Username to use for authentication. If not provided, the client attempts to use `credentials` to authenticate. secret : Optional[str] Secret to use for authentication along with `username`. credentials : Optional[str] base64-encoded Basic Access Authentication credentials to use for authentication in place of `username` and `secret`. credentials_file : Optional[Union[str, Path]] Path to a JSON-encoded credentials file from which to load credentials. logging : bool Enable client logging with `Loguru`. config : Optional[Any] (NYI) config version : str Used to construct URL if the specified URL does not contain the version. Raises ------ ValueError Neither `username` and `secret`, `credentials` nor `credentials_file` are provided. \"\"\" if username and secret : self . credentials = get_credentials ( username , secret ) elif credentials : self . credentials = credentials elif credentials_file : crfile = load_harbor_auth_file ( credentials_file ) self . credentials = get_credentials ( crfile . name , crfile . secret ) # type: ignore # load_harbor_auth_file guarantees these are not None else : raise ValueError ( \"Must provide username and secret, credentials, or credentials_file\" ) # TODO: add URL regex and improve parsing OR don't police this at all url = url . strip ( \"/\" ) # remove trailing slash if version and not \"/api/v\" in url : version = str ( version ) if \"v\" not in version : version = f \"v { version } \" if \"/api\" in url : url = url . strip ( \"/\" ) + \"/\" + version else : url = url + \"/api/\" + version self . url = url . strip ( \"/\" ) # make sure we haven't added a trailing slash again self . config = config self . client = httpx . AsyncClient () # NOTE: make env var? if logging : # we explicitly enable the logger here, because previous instantiations # of the client may have disabled it. logger . enable ( \"harborapi\" ) else : logger . disable ( \"harborapi\" )","title":"__init__()"},{"location":"reference/client_sync/","text":"HarborClient Bases: HarborAsyncClient Non-async Harbor API client. Source code in harborapi/client_sync.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class HarborClient ( HarborAsyncClient ): \"\"\"Non-async Harbor API client.\"\"\" def __init__ ( self , loop : Optional [ asyncio . AbstractEventLoop ] = None , * args : Any , ** kwargs : Any ): super () . __init__ ( * args , ** kwargs ) self . loop = loop or asyncio . new_event_loop () asyncio . set_event_loop ( self . loop ) def __getattribute__ ( self , name : str ) -> Any : \"\"\"Overrides the `__getattribute__` method to wrap coroutine functions Intercepts attribute access and wraps coroutine functions with `_wrap_coro`. Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop. \"\"\" attr = super () . __getattribute__ ( name ) name = name . lower () # Filter out internal methods if name . startswith ( \"_\" ) or any ( name == http_method for http_method in ( \"get\" , \"get_text\" , # get for text/plain (hack) \"post\" , \"put\" , \"patch\" , \"delete\" , \"head\" , \"options\" , ) ): return attr if inspect . iscoroutinefunction ( attr ): return self . _wrap_coro ( attr ) return attr def _wrap_coro ( self , coro : Any ) -> Callable [[ Any ], Any ]: \"\"\"Wraps a coroutine function in an `AbstractEventLoop.run_until_complete()` call that runs the coroutine in the event loop. This is a hacky way to make the client behave like a synchronous client. Parameters ---------- coro : Any The coroutine function to wrap. Returns ------- Callable[[Any], Any] A function that runs the coroutine in the event loop. \"\"\" def wrapper ( * args : Any , ** kwargs : Any ): return self . loop . run_until_complete ( coro ( * args , ** kwargs )) return wrapper __init__ ( loop = None , * args , ** kwargs ) Source code in harborapi/client_sync.py 11 12 13 14 15 16 17 18 19 def __init__ ( self , loop : Optional [ asyncio . AbstractEventLoop ] = None , * args : Any , ** kwargs : Any ): super () . __init__ ( * args , ** kwargs ) self . loop = loop or asyncio . new_event_loop () asyncio . set_event_loop ( self . loop ) __getattribute__ ( name ) Overrides the __getattribute__ method to wrap coroutine functions Intercepts attribute access and wraps coroutine functions with _wrap_coro . Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop. Source code in harborapi/client_sync.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def __getattribute__ ( self , name : str ) -> Any : \"\"\"Overrides the `__getattribute__` method to wrap coroutine functions Intercepts attribute access and wraps coroutine functions with `_wrap_coro`. Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop. \"\"\" attr = super () . __getattribute__ ( name ) name = name . lower () # Filter out internal methods if name . startswith ( \"_\" ) or any ( name == http_method for http_method in ( \"get\" , \"get_text\" , # get for text/plain (hack) \"post\" , \"put\" , \"patch\" , \"delete\" , \"head\" , \"options\" , ) ): return attr if inspect . iscoroutinefunction ( attr ): return self . _wrap_coro ( attr ) return attr _wrap_coro ( coro ) Wraps a coroutine function in an AbstractEventLoop.run_until_complete() call that runs the coroutine in the event loop. This is a hacky way to make the client behave like a synchronous client. Parameters: Name Type Description Default coro Any The coroutine function to wrap. required Returns: Type Description Callable [[ Any ], Any ] A function that runs the coroutine in the event loop. Source code in harborapi/client_sync.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def _wrap_coro ( self , coro : Any ) -> Callable [[ Any ], Any ]: \"\"\"Wraps a coroutine function in an `AbstractEventLoop.run_until_complete()` call that runs the coroutine in the event loop. This is a hacky way to make the client behave like a synchronous client. Parameters ---------- coro : Any The coroutine function to wrap. Returns ------- Callable[[Any], Any] A function that runs the coroutine in the event loop. \"\"\" def wrapper ( * args : Any , ** kwargs : Any ): return self . loop . run_until_complete ( coro ( * args , ** kwargs )) return wrapper","title":"HarborClient"},{"location":"reference/client_sync/#harborclient","text":"Bases: HarborAsyncClient Non-async Harbor API client. Source code in harborapi/client_sync.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class HarborClient ( HarborAsyncClient ): \"\"\"Non-async Harbor API client.\"\"\" def __init__ ( self , loop : Optional [ asyncio . AbstractEventLoop ] = None , * args : Any , ** kwargs : Any ): super () . __init__ ( * args , ** kwargs ) self . loop = loop or asyncio . new_event_loop () asyncio . set_event_loop ( self . loop ) def __getattribute__ ( self , name : str ) -> Any : \"\"\"Overrides the `__getattribute__` method to wrap coroutine functions Intercepts attribute access and wraps coroutine functions with `_wrap_coro`. Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop. \"\"\" attr = super () . __getattribute__ ( name ) name = name . lower () # Filter out internal methods if name . startswith ( \"_\" ) or any ( name == http_method for http_method in ( \"get\" , \"get_text\" , # get for text/plain (hack) \"post\" , \"put\" , \"patch\" , \"delete\" , \"head\" , \"options\" , ) ): return attr if inspect . iscoroutinefunction ( attr ): return self . _wrap_coro ( attr ) return attr def _wrap_coro ( self , coro : Any ) -> Callable [[ Any ], Any ]: \"\"\"Wraps a coroutine function in an `AbstractEventLoop.run_until_complete()` call that runs the coroutine in the event loop. This is a hacky way to make the client behave like a synchronous client. Parameters ---------- coro : Any The coroutine function to wrap. Returns ------- Callable[[Any], Any] A function that runs the coroutine in the event loop. \"\"\" def wrapper ( * args : Any , ** kwargs : Any ): return self . loop . run_until_complete ( coro ( * args , ** kwargs )) return wrapper","title":"HarborClient"},{"location":"reference/client_sync/#harborapi.client_sync.HarborClient.__init__","text":"Source code in harborapi/client_sync.py 11 12 13 14 15 16 17 18 19 def __init__ ( self , loop : Optional [ asyncio . AbstractEventLoop ] = None , * args : Any , ** kwargs : Any ): super () . __init__ ( * args , ** kwargs ) self . loop = loop or asyncio . new_event_loop () asyncio . set_event_loop ( self . loop )","title":"__init__()"},{"location":"reference/client_sync/#harborapi.client_sync.HarborClient.__getattribute__","text":"Overrides the __getattribute__ method to wrap coroutine functions Intercepts attribute access and wraps coroutine functions with _wrap_coro . Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop. Source code in harborapi/client_sync.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 def __getattribute__ ( self , name : str ) -> Any : \"\"\"Overrides the `__getattribute__` method to wrap coroutine functions Intercepts attribute access and wraps coroutine functions with `_wrap_coro`. Internal methods are not wrapped in order to run them normally in an asynchronous manner within the event loop. \"\"\" attr = super () . __getattribute__ ( name ) name = name . lower () # Filter out internal methods if name . startswith ( \"_\" ) or any ( name == http_method for http_method in ( \"get\" , \"get_text\" , # get for text/plain (hack) \"post\" , \"put\" , \"patch\" , \"delete\" , \"head\" , \"options\" , ) ): return attr if inspect . iscoroutinefunction ( attr ): return self . _wrap_coro ( attr ) return attr","title":"__getattribute__()"},{"location":"reference/client_sync/#harborapi.client_sync.HarborClient._wrap_coro","text":"Wraps a coroutine function in an AbstractEventLoop.run_until_complete() call that runs the coroutine in the event loop. This is a hacky way to make the client behave like a synchronous client. Parameters: Name Type Description Default coro Any The coroutine function to wrap. required Returns: Type Description Callable [[ Any ], Any ] A function that runs the coroutine in the event loop. Source code in harborapi/client_sync.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def _wrap_coro ( self , coro : Any ) -> Callable [[ Any ], Any ]: \"\"\"Wraps a coroutine function in an `AbstractEventLoop.run_until_complete()` call that runs the coroutine in the event loop. This is a hacky way to make the client behave like a synchronous client. Parameters ---------- coro : Any The coroutine function to wrap. Returns ------- Callable[[Any], Any] A function that runs the coroutine in the event loop. \"\"\" def wrapper ( * args : Any , ** kwargs : Any ): return self . loop . run_until_complete ( coro ( * args , ** kwargs )) return wrapper","title":"_wrap_coro()"},{"location":"reference/exceptions/","text":"Exceptions HarborAPIException Bases: Exception StatusError ( errors = None , * args , ** kwargs ) Bases: HarborAPIException Initialize a StatusError. Parameters: Name Type Description Default errors Optional [ Errors ] A list of errors returned by the Harbor API. None Source code in harborapi/exceptions.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , errors : Optional [ Errors ] = None , * args , ** kwargs ): \"\"\"Initialize a StatusError. Parameters ---------- errors : Optional[Errors] A list of errors returned by the Harbor API. \"\"\" super () . __init__ ( * args , ** kwargs ) self . __cause__ : Optional [ HTTPStatusError ] = None \"\"\"The underlying HTTPX exception that caused this exception. Automatically assigned when raised from a HTTPX exception.\"\"\" self . errors : List [ Error ] = [] \"\"\"A list of errors returned by the Harbor API.\"\"\" if isinstance ( errors , Errors ) and errors . errors : self . errors = errors . errors __cause__ : Optional [ HTTPStatusError ] = None instance-attribute The underlying HTTPX exception that caused this exception. Automatically assigned when raised from a HTTPX exception. errors : List [ Error ] = [] instance-attribute A list of errors returned by the Harbor API. status_code () property The status code of the underlying HTTPX exception. Returns: Type Description Optional [ int ] The status code of the underlying HTTPX exception, or None if this exception was not raised from an HTTPX exception. Source code in harborapi/exceptions.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @property def status_code ( self ) -> Optional [ int ]: \"\"\"The status code of the underlying HTTPX exception. Returns ------- Optional[int] The status code of the underlying HTTPX exception, or None if this exception was not raised from an HTTPX exception. \"\"\" # should always return int, but we can't guarantee it try : return self . __cause__ . response . status_code # type: ignore except : return None BadRequest Bases: StatusError Unauthorized Bases: StatusError Forbidden Bases: StatusError NotFound Bases: StatusError MethodNotAllowed Bases: StatusError Conflict Bases: StatusError PreconditionFailed Bases: StatusError UnsupportedMediaType Bases: StatusError InternalServerError Bases: StatusError check_response_status ( response , missing_ok = False ) Raises an exception if the response status is not 2xx. Exceptions are wrapped in a StatusError if the response contains errors. Parameters: Name Type Description Default response Response The response to check. required missing_ok bool If True , do not raise an exception if the status is 404. False Source code in harborapi/exceptions.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def check_response_status ( response : Response , missing_ok : bool = False ) -> None : \"\"\"Raises an exception if the response status is not 2xx. Exceptions are wrapped in a `StatusError` if the response contains errors. Parameters ---------- response : Response The response to check. missing_ok : bool If `True`, do not raise an exception if the status is 404. \"\"\" try : response . raise_for_status () except HTTPStatusError as e : status_code = response . status_code if missing_ok and status_code == 404 : logger . debug ( \" {} not found\" , response . request . url ) return errors = try_parse_errors ( response ) logger . bind ( httpx_err = e , errors = errors ) . error ( \"Harbor API returned status code {} for {} \" , response . status_code , response . url , ) exceptions = { 400 : BadRequest , 401 : Unauthorized , 403 : Forbidden , 404 : NotFound , 405 : MethodNotAllowed , 409 : Conflict , 412 : PreconditionFailed , 415 : UnsupportedMediaType , 500 : InternalServerError , } exc = exceptions . get ( status_code , StatusError ) raise exc from e try_parse_errors ( response ) Attempts to return the errors from a response. See: models.Errors Parameters: Name Type Description Default response Response required Returns: Type Description Optional [ Errors ] The errors from the response. Source code in harborapi/exceptions.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 def try_parse_errors ( response : Response ) -> Optional [ Errors ]: \"\"\"Attempts to return the errors from a response. See: `models.Errors` Parameters ---------- response : Response Returns ------- Optional[Errors] The errors from the response. \"\"\" if is_json ( response ): try : return Errors ( ** response . json ()) except Exception as e : logger . bind ( error = e ) . error ( \"Failed to parse error response from {} as JSON\" , response . url ) return None","title":"Exceptions"},{"location":"reference/exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"reference/exceptions/#harborapi.exceptions.HarborAPIException","text":"Bases: Exception","title":"HarborAPIException"},{"location":"reference/exceptions/#harborapi.exceptions.StatusError","text":"Bases: HarborAPIException Initialize a StatusError. Parameters: Name Type Description Default errors Optional [ Errors ] A list of errors returned by the Harbor API. None Source code in harborapi/exceptions.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , errors : Optional [ Errors ] = None , * args , ** kwargs ): \"\"\"Initialize a StatusError. Parameters ---------- errors : Optional[Errors] A list of errors returned by the Harbor API. \"\"\" super () . __init__ ( * args , ** kwargs ) self . __cause__ : Optional [ HTTPStatusError ] = None \"\"\"The underlying HTTPX exception that caused this exception. Automatically assigned when raised from a HTTPX exception.\"\"\" self . errors : List [ Error ] = [] \"\"\"A list of errors returned by the Harbor API.\"\"\" if isinstance ( errors , Errors ) and errors . errors : self . errors = errors . errors","title":"StatusError"},{"location":"reference/exceptions/#harborapi.exceptions.StatusError.__cause__","text":"The underlying HTTPX exception that caused this exception. Automatically assigned when raised from a HTTPX exception.","title":"__cause__"},{"location":"reference/exceptions/#harborapi.exceptions.StatusError.errors","text":"A list of errors returned by the Harbor API.","title":"errors"},{"location":"reference/exceptions/#harborapi.exceptions.StatusError.status_code","text":"The status code of the underlying HTTPX exception. Returns: Type Description Optional [ int ] The status code of the underlying HTTPX exception, or None if this exception was not raised from an HTTPX exception. Source code in harborapi/exceptions.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 @property def status_code ( self ) -> Optional [ int ]: \"\"\"The status code of the underlying HTTPX exception. Returns ------- Optional[int] The status code of the underlying HTTPX exception, or None if this exception was not raised from an HTTPX exception. \"\"\" # should always return int, but we can't guarantee it try : return self . __cause__ . response . status_code # type: ignore except : return None","title":"status_code()"},{"location":"reference/exceptions/#harborapi.exceptions.BadRequest","text":"Bases: StatusError","title":"BadRequest"},{"location":"reference/exceptions/#harborapi.exceptions.Unauthorized","text":"Bases: StatusError","title":"Unauthorized"},{"location":"reference/exceptions/#harborapi.exceptions.Forbidden","text":"Bases: StatusError","title":"Forbidden"},{"location":"reference/exceptions/#harborapi.exceptions.NotFound","text":"Bases: StatusError","title":"NotFound"},{"location":"reference/exceptions/#harborapi.exceptions.MethodNotAllowed","text":"Bases: StatusError","title":"MethodNotAllowed"},{"location":"reference/exceptions/#harborapi.exceptions.Conflict","text":"Bases: StatusError","title":"Conflict"},{"location":"reference/exceptions/#harborapi.exceptions.PreconditionFailed","text":"Bases: StatusError","title":"PreconditionFailed"},{"location":"reference/exceptions/#harborapi.exceptions.UnsupportedMediaType","text":"Bases: StatusError","title":"UnsupportedMediaType"},{"location":"reference/exceptions/#harborapi.exceptions.InternalServerError","text":"Bases: StatusError","title":"InternalServerError"},{"location":"reference/exceptions/#harborapi.exceptions.check_response_status","text":"Raises an exception if the response status is not 2xx. Exceptions are wrapped in a StatusError if the response contains errors. Parameters: Name Type Description Default response Response The response to check. required missing_ok bool If True , do not raise an exception if the status is 404. False Source code in harborapi/exceptions.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def check_response_status ( response : Response , missing_ok : bool = False ) -> None : \"\"\"Raises an exception if the response status is not 2xx. Exceptions are wrapped in a `StatusError` if the response contains errors. Parameters ---------- response : Response The response to check. missing_ok : bool If `True`, do not raise an exception if the status is 404. \"\"\" try : response . raise_for_status () except HTTPStatusError as e : status_code = response . status_code if missing_ok and status_code == 404 : logger . debug ( \" {} not found\" , response . request . url ) return errors = try_parse_errors ( response ) logger . bind ( httpx_err = e , errors = errors ) . error ( \"Harbor API returned status code {} for {} \" , response . status_code , response . url , ) exceptions = { 400 : BadRequest , 401 : Unauthorized , 403 : Forbidden , 404 : NotFound , 405 : MethodNotAllowed , 409 : Conflict , 412 : PreconditionFailed , 415 : UnsupportedMediaType , 500 : InternalServerError , } exc = exceptions . get ( status_code , StatusError ) raise exc from e","title":"check_response_status()"},{"location":"reference/exceptions/#harborapi.exceptions.try_parse_errors","text":"Attempts to return the errors from a response. See: models.Errors Parameters: Name Type Description Default response Response required Returns: Type Description Optional [ Errors ] The errors from the response. Source code in harborapi/exceptions.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 def try_parse_errors ( response : Response ) -> Optional [ Errors ]: \"\"\"Attempts to return the errors from a response. See: `models.Errors` Parameters ---------- response : Response Returns ------- Optional[Errors] The errors from the response. \"\"\" if is_json ( response ): try : return Errors ( ** response . json ()) except Exception as e : logger . bind ( error = e ) . error ( \"Failed to parse error response from {} as JSON\" , response . url ) return None","title":"try_parse_errors()"},{"location":"reference/models/models/","text":"Models The majority of these models have been auto-generated from the official Harbor REST API v2.0 Swagger 2.0 Schema using datamodel-code-generator . Model Source code in harborapi/models/models.py 14 15 class Model ( BaseModel ): __root__ : Any __root__ : Any class-attribute Error Source code in harborapi/models/models.py 18 19 20 class Error ( BaseModel ): code : Optional [ str ] = Field ( None , description = \"The error code\" ) message : Optional [ str ] = Field ( None , description = \"The error message\" ) code : Optional [ str ] = Field ( None , description = 'The error code' ) class-attribute message : Optional [ str ] = Field ( None , description = 'The error message' ) class-attribute SearchRepository Source code in harborapi/models/models.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class SearchRepository ( BaseModel ): project_id : Optional [ int ] = Field ( None , description = \"The ID of the project that the repository belongs to\" ) project_name : Optional [ str ] = Field ( None , description = \"The name of the project that the repository belongs to\" ) project_public : Optional [ bool ] = Field ( None , description = \"The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)\" , ) repository_name : Optional [ str ] = Field ( None , description = \"The name of the repository\" ) pull_count : Optional [ int ] = Field ( None , description = \"The count how many times the repository is pulled\" ) artifact_count : Optional [ int ] = Field ( None , description = \"The count of artifacts in the repository\" ) project_id : Optional [ int ] = Field ( None , description = 'The ID of the project that the repository belongs to' ) class-attribute project_name : Optional [ str ] = Field ( None , description = 'The name of the project that the repository belongs to' ) class-attribute project_public : Optional [ bool ] = Field ( None , description = 'The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)' ) class-attribute repository_name : Optional [ str ] = Field ( None , description = 'The name of the repository' ) class-attribute pull_count : Optional [ int ] = Field ( None , description = 'The count how many times the repository is pulled' ) class-attribute artifact_count : Optional [ int ] = Field ( None , description = 'The count of artifacts in the repository' ) class-attribute ChartMetadata Source code in harborapi/models/models.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class ChartMetadata ( BaseModel ): name : str = Field ( ... , description = \"The name of the chart\" ) home : Optional [ str ] = Field ( None , description = \"The URL to the relevant project page\" ) sources : Optional [ List [ str ]] = Field ( None , description = \"The URL to the source code of chart\" ) version : str = Field ( ... , description = \"A SemVer 2 version of chart\" ) description : Optional [ str ] = Field ( None , description = \"A one-sentence description of chart\" ) keywords : Optional [ List [ str ]] = Field ( None , description = \"A list of string keywords\" ) engine : str = Field ( ... , description = \"The name of template engine\" ) icon : str = Field ( ... , description = \"The URL to an icon file\" ) api_version : str = Field ( ... , alias = \"apiVersion\" , description = \"The API version of this chart\" ) app_version : str = Field ( ... , alias = \"appVersion\" , description = \"The version of the application enclosed in the chart\" , ) deprecated : Optional [ bool ] = Field ( None , description = \"Whether or not this chart is deprecated\" ) name : str = Field ( Ellipsis , description = 'The name of the chart' ) class-attribute home : Optional [ str ] = Field ( None , description = 'The URL to the relevant project page' ) class-attribute sources : Optional [ List [ str ]] = Field ( None , description = 'The URL to the source code of chart' ) class-attribute version : str = Field ( Ellipsis , description = 'A SemVer 2 version of chart' ) class-attribute description : Optional [ str ] = Field ( None , description = 'A one-sentence description of chart' ) class-attribute keywords : Optional [ List [ str ]] = Field ( None , description = 'A list of string keywords' ) class-attribute engine : str = Field ( Ellipsis , description = 'The name of template engine' ) class-attribute icon : str = Field ( Ellipsis , description = 'The URL to an icon file' ) class-attribute api_version : str = Field ( Ellipsis , alias = 'apiVersion' , description = 'The API version of this chart' ) class-attribute app_version : str = Field ( Ellipsis , alias = 'appVersion' , description = 'The version of the application enclosed in the chart' ) class-attribute deprecated : Optional [ bool ] = Field ( None , description = 'Whether or not this chart is deprecated' ) class-attribute Repository Source code in harborapi/models/models.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class Repository ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the repository\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of the project that the repository belongs to\" ) name : Optional [ str ] = Field ( None , description = \"The name of the repository\" ) description : Optional [ str ] = Field ( None , description = \"The description of the repository\" ) artifact_count : Optional [ int ] = Field ( None , description = \"The count of the artifacts inside the repository\" ) pull_count : Optional [ int ] = Field ( None , description = \"The count that the artifact inside the repository pulled\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the repository\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the repository\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the repository' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'The ID of the project that the repository belongs to' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of the repository' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description of the repository' ) class-attribute artifact_count : Optional [ int ] = Field ( None , description = 'The count of the artifacts inside the repository' ) class-attribute pull_count : Optional [ int ] = Field ( None , description = 'The count that the artifact inside the repository pulled' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the repository' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the repository' ) class-attribute Tag Source code in harborapi/models/models.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Tag ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the tag\" ) repository_id : Optional [ int ] = Field ( None , description = \"The ID of the repository that the tag belongs to\" ) artifact_id : Optional [ int ] = Field ( None , description = \"The ID of the artifact that the tag attached to\" ) name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) push_time : Optional [ datetime ] = Field ( None , description = \"The push time of the tag\" ) pull_time : Optional [ datetime ] = Field ( None , description = \"The latest pull time of the tag\" ) immutable : Optional [ bool ] = Field ( None , description = \"The immutable status of the tag\" ) signed : Optional [ bool ] = Field ( None , description = \"The attribute indicates whether the tag is signed or not\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the tag' ) class-attribute repository_id : Optional [ int ] = Field ( None , description = 'The ID of the repository that the tag belongs to' ) class-attribute artifact_id : Optional [ int ] = Field ( None , description = 'The ID of the artifact that the tag attached to' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of the tag' ) class-attribute push_time : Optional [ datetime ] = Field ( None , description = 'The push time of the tag' ) class-attribute pull_time : Optional [ datetime ] = Field ( None , description = 'The latest pull time of the tag' ) class-attribute immutable : Optional [ bool ] = Field ( None , description = 'The immutable status of the tag' ) class-attribute signed : Optional [ bool ] = Field ( None , description = 'The attribute indicates whether the tag is signed or not' ) class-attribute ExtraAttrs Source code in harborapi/models/models.py 117 118 119 120 121 class ExtraAttrs ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 120 121 class Config : extra = Extra . allow extra = Extra . allow class-attribute Annotations Source code in harborapi/models/models.py 124 125 126 127 128 class Annotations ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 127 128 class Config : extra = Extra . allow extra = Extra . allow class-attribute AdditionLinks Source code in harborapi/models/models.py 131 132 133 134 135 class AdditionLinks ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 134 135 class Config : extra = Extra . allow extra = Extra . allow class-attribute AdditionLink Source code in harborapi/models/models.py 138 139 140 141 142 class AdditionLink ( BaseModel ): href : Optional [ str ] = Field ( None , description = \"The link of the addition\" ) absolute : Optional [ bool ] = Field ( None , description = \"Determine whether the link is an absolute URL or not\" ) href : Optional [ str ] = Field ( None , description = 'The link of the addition' ) class-attribute absolute : Optional [ bool ] = Field ( None , description = 'Determine whether the link is an absolute URL or not' ) class-attribute Platform Source code in harborapi/models/models.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class Platform ( BaseModel ): architecture : Optional [ str ] = Field ( None , description = \"The architecture that the artifact applys to\" ) os : Optional [ str ] = Field ( None , description = \"The OS that the artifact applys to\" ) _os_version_ : Optional [ str ] = Field ( None , alias = \"'os.version'\" , description = \"The version of the OS that the artifact applys to\" , ) _os_features_ : Optional [ List [ str ]] = Field ( None , alias = \"'os.features'\" , description = \"The features of the OS that the artifact applys to\" , ) variant : Optional [ str ] = Field ( None , description = \"The variant of the CPU\" ) architecture : Optional [ str ] = Field ( None , description = 'The architecture that the artifact applys to' ) class-attribute os : Optional [ str ] = Field ( None , description = 'The OS that the artifact applys to' ) class-attribute variant : Optional [ str ] = Field ( None , description = 'The variant of the CPU' ) class-attribute Label Source code in harborapi/models/models.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class Label ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the label\" ) name : Optional [ str ] = Field ( None , description = \"The name the label\" ) description : Optional [ str ] = Field ( None , description = \"The description the label\" ) color : Optional [ str ] = Field ( None , description = \"The color the label\" ) scope : Optional [ str ] = Field ( None , description = \"The scope the label\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of project that the label belongs to\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time the label\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the label\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the label' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name the label' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description the label' ) class-attribute color : Optional [ str ] = Field ( None , description = 'The color the label' ) class-attribute scope : Optional [ str ] = Field ( None , description = 'The scope the label' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'The ID of project that the label belongs to' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time the label' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the label' ) class-attribute Scanner Source code in harborapi/models/models.py 180 181 182 183 184 185 186 187 188 189 class Scanner ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"Name of the scanner\" , example = \"Trivy\" ) vendor : Optional [ str ] = Field ( None , description = \"Name of the scanner provider\" , example = \"Aqua Security\" ) version : Optional [ str ] = Field ( None , description = \"Version of the scanner adapter\" , example = \"v0.9.1\" ) name : Optional [ str ] = Field ( None , description = 'Name of the scanner' , example = 'Trivy' ) class-attribute vendor : Optional [ str ] = Field ( None , description = 'Name of the scanner provider' , example = 'Aqua Security' ) class-attribute version : Optional [ str ] = Field ( None , description = 'Version of the scanner adapter' , example = 'v0.9.1' ) class-attribute ScanOverview Constructs a scan overview from a dict of mime_type:scan_overview The API spec does not specify the contents of the scan overview, but from investigating the behavior of the API, it seems to return a dict that looks like this: { \"application/vnd.security.vulnerability.report; version=1.1\" : { # dict that conforms to NativeReportSummary spec ... } } The __new__ method constructs a NativeReportSummary object and returns it if the MIME type is one of the two MIME types specified in the spec. If the MIME type is not recognized, __new__ returns a ScanOverview object with the dict assigned as an extra attribute. This behavior is not specified. Source code in harborapi/models/models.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 class ScanOverview ( BaseModel ): \"\"\"Constructs a scan overview from a dict of `mime_type:scan_overview` The API spec does not specify the contents of the scan overview, but from investigating the behavior of the API, it seems to return a dict that looks like this: ```py { \"application/vnd.security.vulnerability.report; version=1.1\": { # dict that conforms to NativeReportSummary spec ... } } ``` The `__new__` method constructs a `NativeReportSummary` object and returns it if the MIME type is one of the two MIME types specified in the spec. If the MIME type is not recognized, `__new__` returns a `ScanOverview` object with the dict assigned as an extra attribute. This behavior is not specified. \"\"\" def __new__ ( cls , * args , ** kwargs ): mime_types = ( \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" , \"application/vnd.security.vulnerability.report; version=1.1\" , ) for k , v in kwargs . items (): if k in mime_types : return NativeReportSummary ( ** v ) # add logging call here return super () . __new__ ( cls ) class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 225 226 class Config : extra = Extra . allow extra = Extra . allow class-attribute __new__ ( * args , ** kwargs ) Source code in harborapi/models/models.py 214 215 216 217 218 219 220 221 222 223 def __new__ ( cls , * args , ** kwargs ): mime_types = ( \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" , \"application/vnd.security.vulnerability.report; version=1.1\" , ) for k , v in kwargs . items (): if k in mime_types : return NativeReportSummary ( ** v ) # add logging call here return super () . __new__ ( cls ) VulnerabilitySummary Source code in harborapi/models/models.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 class VulnerabilitySummary ( BaseModel ): total : Optional [ int ] = Field ( None , description = \"The total number of the found vulnerabilities\" , example = 500 ) fixable : Optional [ int ] = Field ( None , description = \"The number of the fixable vulnerabilities\" , example = 100 ) # These severity fields are not native to the API spec, # but are added to make the API more user friendly by making # the severity fields accessible directly instead of through the summary field. # See root validator for more details. critical : int = Field ( 0 , alias = \"Critical\" , description = \"The number of critical vulnerabilities detected.\" , ) high : int = Field ( 0 , alias = \"High\" , description = \"The number of critical vulnerabilities detected.\" ) medium : int = Field ( 0 , alias = \"Medium\" , description = \"The number of critical vulnerabilities detected.\" , ) low : int = Field ( 0 , alias = \"Low\" , description = \"The number of critical vulnerabilities detected.\" ) # The original summary field (prefer using the severity fields above) # The field is kept to not remove anything native to the API spec. summary : Optional [ Dict [ str , int ]] = Field ( None , description = \"Numbers of the vulnerabilities with different severity\" , example = { \"Critical\" : 5 , \"High\" : 5 }, ) @root_validator ( pre = True ) def assign_severity_breakdown ( cls , values : Dict [ str , Any ]) -> Dict [ str , Any ]: summary = values . get ( \"summary\" , {}) if not isinstance ( summary , dict ): raise ValueError ( \"'summary' must be a dict\" ) return { ** values , ** summary } total : Optional [ int ] = Field ( None , description = 'The total number of the found vulnerabilities' , example = 500 ) class-attribute fixable : Optional [ int ] = Field ( None , description = 'The number of the fixable vulnerabilities' , example = 100 ) class-attribute critical : int = Field ( 0 , alias = 'Critical' , description = 'The number of critical vulnerabilities detected.' ) class-attribute high : int = Field ( 0 , alias = 'High' , description = 'The number of critical vulnerabilities detected.' ) class-attribute medium : int = Field ( 0 , alias = 'Medium' , description = 'The number of critical vulnerabilities detected.' ) class-attribute low : int = Field ( 0 , alias = 'Low' , description = 'The number of critical vulnerabilities detected.' ) class-attribute summary : Optional [ Dict [ str , int ]] = Field ( None , description = 'Numbers of the vulnerabilities with different severity' , example = { 'Critical' : 5 , 'High' : 5 }) class-attribute assign_severity_breakdown ( values ) Source code in harborapi/models/models.py 266 267 268 269 270 271 @root_validator ( pre = True ) def assign_severity_breakdown ( cls , values : Dict [ str , Any ]) -> Dict [ str , Any ]: summary = values . get ( \"summary\" , {}) if not isinstance ( summary , dict ): raise ValueError ( \"'summary' must be a dict\" ) return { ** values , ** summary } AuditLog Source code in harborapi/models/models.py 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 class AuditLog ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the audit log entry.\" ) username : Optional [ str ] = Field ( None , description = \"Username of the user in this log entry.\" ) resource : Optional [ str ] = Field ( None , description = \"Name of the repository in this log entry.\" ) resource_type : Optional [ str ] = Field ( None , description = \"Tag of the repository in this log entry.\" ) operation : Optional [ str ] = Field ( None , description = \"The operation against the repository in this log entry.\" ) op_time : Optional [ datetime ] = Field ( None , description = \"The time when this operation is triggered.\" , example = \"2006-01-02T15:04:05Z\" , ) id : Optional [ int ] = Field ( None , description = 'The ID of the audit log entry.' ) class-attribute username : Optional [ str ] = Field ( None , description = 'Username of the user in this log entry.' ) class-attribute resource : Optional [ str ] = Field ( None , description = 'Name of the repository in this log entry.' ) class-attribute resource_type : Optional [ str ] = Field ( None , description = 'Tag of the repository in this log entry.' ) class-attribute operation : Optional [ str ] = Field ( None , description = 'The operation against the repository in this log entry.' ) class-attribute op_time : Optional [ datetime ] = Field ( None , description = 'The time when this operation is triggered.' , example = '2006-01-02T15:04:05Z' ) class-attribute Metadata Source code in harborapi/models/models.py 295 296 297 298 299 300 301 class Metadata ( BaseModel ): id : Optional [ str ] = Field ( None , description = \"id\" ) name : Optional [ str ] = Field ( None , description = \"name\" ) icon : Optional [ str ] = Field ( None , description = \"icon\" ) maintainers : Optional [ List [ str ]] = Field ( None , description = \"maintainers\" ) version : Optional [ str ] = Field ( None , description = \"version\" ) source : Optional [ str ] = Field ( None , description = \"source\" ) id : Optional [ str ] = Field ( None , description = 'id' ) class-attribute name : Optional [ str ] = Field ( None , description = 'name' ) class-attribute icon : Optional [ str ] = Field ( None , description = 'icon' ) class-attribute maintainers : Optional [ List [ str ]] = Field ( None , description = 'maintainers' ) class-attribute version : Optional [ str ] = Field ( None , description = 'version' ) class-attribute source : Optional [ str ] = Field ( None , description = 'source' ) class-attribute Instance Source code in harborapi/models/models.py 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 class Instance ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"Unique ID\" ) name : Optional [ str ] = Field ( None , description = \"Instance name\" ) description : Optional [ str ] = Field ( None , description = \"Description of instance\" ) vendor : Optional [ str ] = Field ( None , description = \"Based on which driver, identified by ID\" ) endpoint : Optional [ str ] = Field ( None , description = \"The service endpoint of this instance\" ) auth_mode : Optional [ str ] = Field ( None , description = \"The authentication way supported\" ) auth_info : Optional [ Dict [ str , str ]] = Field ( None , description = \"The auth credential data if exists\" ) status : Optional [ str ] = Field ( None , description = \"The health status\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the instance is activated or not\" ) default : Optional [ bool ] = Field ( None , description = \"Whether the instance is default or not\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether the instance endpoint is insecure or not\" ) setup_timestamp : Optional [ int ] = Field ( None , description = \"The timestamp of instance setting up\" ) id : Optional [ int ] = Field ( None , description = 'Unique ID' ) class-attribute name : Optional [ str ] = Field ( None , description = 'Instance name' ) class-attribute description : Optional [ str ] = Field ( None , description = 'Description of instance' ) class-attribute vendor : Optional [ str ] = Field ( None , description = 'Based on which driver, identified by ID' ) class-attribute endpoint : Optional [ str ] = Field ( None , description = 'The service endpoint of this instance' ) class-attribute auth_mode : Optional [ str ] = Field ( None , description = 'The authentication way supported' ) class-attribute auth_info : Optional [ Dict [ str , str ]] = Field ( None , description = 'The auth credential data if exists' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The health status' ) class-attribute enabled : Optional [ bool ] = Field ( None , description = 'Whether the instance is activated or not' ) class-attribute default : Optional [ bool ] = Field ( None , description = 'Whether the instance is default or not' ) class-attribute insecure : Optional [ bool ] = Field ( None , description = 'Whether the instance endpoint is insecure or not' ) class-attribute setup_timestamp : Optional [ int ] = Field ( None , description = 'The timestamp of instance setting up' ) class-attribute PreheatPolicy Source code in harborapi/models/models.py 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 class PreheatPolicy ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of preheat policy\" ) name : Optional [ str ] = Field ( None , description = \"The Name of preheat policy\" ) description : Optional [ str ] = Field ( None , description = \"The Description of preheat policy\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of preheat policy project\" ) provider_id : Optional [ int ] = Field ( None , description = \"The ID of preheat policy provider\" ) provider_name : Optional [ str ] = Field ( None , description = \"The Name of preheat policy provider\" ) filters : Optional [ str ] = Field ( None , description = \"The Filters of preheat policy\" ) trigger : Optional [ str ] = Field ( None , description = \"The Trigger of preheat policy\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the preheat policy enabled\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The Create Time of preheat policy\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The Update Time of preheat policy\" ) id : Optional [ int ] = Field ( None , description = 'The ID of preheat policy' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The Name of preheat policy' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The Description of preheat policy' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'The ID of preheat policy project' ) class-attribute provider_id : Optional [ int ] = Field ( None , description = 'The ID of preheat policy provider' ) class-attribute provider_name : Optional [ str ] = Field ( None , description = 'The Name of preheat policy provider' ) class-attribute filters : Optional [ str ] = Field ( None , description = 'The Filters of preheat policy' ) class-attribute trigger : Optional [ str ] = Field ( None , description = 'The Trigger of preheat policy' ) class-attribute enabled : Optional [ bool ] = Field ( None , description = 'Whether the preheat policy enabled' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The Create Time of preheat policy' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The Update Time of preheat policy' ) class-attribute Metrics Source code in harborapi/models/models.py 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 class Metrics ( BaseModel ): task_count : Optional [ int ] = Field ( None , description = \"The count of task\" ) success_task_count : Optional [ int ] = Field ( None , description = \"The count of success task\" ) error_task_count : Optional [ int ] = Field ( None , description = \"The count of error task\" ) pending_task_count : Optional [ int ] = Field ( None , description = \"The count of pending task\" ) running_task_count : Optional [ int ] = Field ( None , description = \"The count of running task\" ) scheduled_task_count : Optional [ int ] = Field ( None , description = \"The count of scheduled task\" ) stopped_task_count : Optional [ int ] = Field ( None , description = \"The count of stopped task\" ) task_count : Optional [ int ] = Field ( None , description = 'The count of task' ) class-attribute success_task_count : Optional [ int ] = Field ( None , description = 'The count of success task' ) class-attribute error_task_count : Optional [ int ] = Field ( None , description = 'The count of error task' ) class-attribute pending_task_count : Optional [ int ] = Field ( None , description = 'The count of pending task' ) class-attribute running_task_count : Optional [ int ] = Field ( None , description = 'The count of running task' ) class-attribute scheduled_task_count : Optional [ int ] = Field ( None , description = 'The count of scheduled task' ) class-attribute stopped_task_count : Optional [ int ] = Field ( None , description = 'The count of stopped task' ) class-attribute Execution Source code in harborapi/models/models.py 383 384 385 386 387 388 389 390 391 392 393 394 395 class Execution ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of execution\" ) vendor_type : Optional [ str ] = Field ( None , description = \"The vendor type of execution\" ) vendor_id : Optional [ int ] = Field ( None , description = \"The vendor id of execution\" ) status : Optional [ str ] = Field ( None , description = \"The status of execution\" ) status_message : Optional [ str ] = Field ( None , description = \"The status message of execution\" ) metrics : Optional [ Metrics ] = None trigger : Optional [ str ] = Field ( None , description = \"The trigger of execution\" ) extra_attrs : Optional [ ExtraAttrs ] = None start_time : Optional [ str ] = Field ( None , description = \"The start time of execution\" ) end_time : Optional [ str ] = Field ( None , description = \"The end time of execution\" ) id : Optional [ int ] = Field ( None , description = 'The ID of execution' ) class-attribute vendor_type : Optional [ str ] = Field ( None , description = 'The vendor type of execution' ) class-attribute vendor_id : Optional [ int ] = Field ( None , description = 'The vendor id of execution' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The status of execution' ) class-attribute status_message : Optional [ str ] = Field ( None , description = 'The status message of execution' ) class-attribute metrics : Optional [ Metrics ] = None class-attribute trigger : Optional [ str ] = Field ( None , description = 'The trigger of execution' ) class-attribute extra_attrs : Optional [ ExtraAttrs ] = None class-attribute start_time : Optional [ str ] = Field ( None , description = 'The start time of execution' ) class-attribute end_time : Optional [ str ] = Field ( None , description = 'The end time of execution' ) class-attribute Task Source code in harborapi/models/models.py 398 399 400 401 402 403 404 405 406 407 408 409 410 class Task ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of task\" ) execution_id : Optional [ int ] = Field ( None , description = \"The ID of task execution\" ) status : Optional [ str ] = Field ( None , description = \"The status of task\" ) status_message : Optional [ str ] = Field ( None , description = \"The status message of task\" ) run_count : Optional [ int ] = Field ( None , description = \"The count of task run\" ) extra_attrs : Optional [ ExtraAttrs ] = None creation_time : Optional [ str ] = Field ( None , description = \"The creation time of task\" ) update_time : Optional [ str ] = Field ( None , description = \"The update time of task\" ) start_time : Optional [ str ] = Field ( None , description = \"The start time of task\" ) end_time : Optional [ str ] = Field ( None , description = \"The end time of task\" ) id : Optional [ int ] = Field ( None , description = 'The ID of task' ) class-attribute execution_id : Optional [ int ] = Field ( None , description = 'The ID of task execution' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The status of task' ) class-attribute status_message : Optional [ str ] = Field ( None , description = 'The status message of task' ) class-attribute run_count : Optional [ int ] = Field ( None , description = 'The count of task run' ) class-attribute extra_attrs : Optional [ ExtraAttrs ] = None class-attribute creation_time : Optional [ str ] = Field ( None , description = 'The creation time of task' ) class-attribute update_time : Optional [ str ] = Field ( None , description = 'The update time of task' ) class-attribute start_time : Optional [ str ] = Field ( None , description = 'The start time of task' ) class-attribute end_time : Optional [ str ] = Field ( None , description = 'The end time of task' ) class-attribute ProviderUnderProject Source code in harborapi/models/models.py 413 414 415 416 417 class ProviderUnderProject ( BaseModel ): id : Optional [ int ] = None provider : Optional [ str ] = None enabled : Optional [ bool ] = None default : Optional [ bool ] = None id : Optional [ int ] = None class-attribute provider : Optional [ str ] = None class-attribute enabled : Optional [ bool ] = None class-attribute default : Optional [ bool ] = None class-attribute Icon Source code in harborapi/models/models.py 420 421 422 423 424 425 426 class Icon ( BaseModel ): content_type : Optional [ str ] = Field ( None , alias = \"content-type\" , description = \"The content type of the icon\" ) content : Optional [ str ] = Field ( None , description = \"The base64 encoded content of the icon\" ) content_type : Optional [ str ] = Field ( None , alias = 'content-type' , description = 'The content type of the icon' ) class-attribute content : Optional [ str ] = Field ( None , description = 'The base64 encoded content of the icon' ) class-attribute ProjectDeletable Source code in harborapi/models/models.py 429 430 431 432 433 434 435 class ProjectDeletable ( BaseModel ): deletable : Optional [ bool ] = Field ( None , description = \"Whether the project can be deleted.\" ) message : Optional [ str ] = Field ( None , description = \"The detail message when the project can not be deleted.\" ) deletable : Optional [ bool ] = Field ( None , description = 'Whether the project can be deleted.' ) class-attribute message : Optional [ str ] = Field ( None , description = 'The detail message when the project can not be deleted.' ) class-attribute ProjectMetadata Source code in harborapi/models/models.py 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 class ProjectMetadata ( BaseModel ): public : Optional [ str ] = Field ( None , description = 'The public status of the project. The valid values are \"true\", \"false\".' , ) enable_content_trust : Optional [ str ] = Field ( None , description = 'Whether content trust is enabled or not. If it is enabled, user can \\' t pull unsigned images from this project. The valid values are \"true\", \"false\".' , ) enable_content_trust_cosign : Optional [ str ] = Field ( None , description = 'Whether cosign content trust is enabled or not. If it is enabled, user can \\' t pull images without cosign signature from this project. The valid values are \"true\", \"false\".' , ) prevent_vul : Optional [ str ] = Field ( None , description = 'Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".' , ) severity : Optional [ str ] = Field ( None , description = 'If the vulnerability is high than severity defined here, the images can \\' t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".' , ) auto_scan : Optional [ str ] = Field ( None , description = 'Whether scan images automatically when pushing. The valid values are \"true\", \"false\".' , ) reuse_sys_cve_allowlist : Optional [ str ] = Field ( None , description = 'Whether this project reuse the system level CVE allowlist as the allowlist of its own. The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.' , ) retention_id : Optional [ str ] = Field ( None , description = \"The ID of the tag retention policy for the project\" ) public : Optional [ str ] = Field ( None , description = 'The public status of the project. The valid values are \"true\", \"false\".' ) class-attribute enable_content_trust : Optional [ str ] = Field ( None , description = 'Whether content trust is enabled or not. If it is enabled, user can \\' t pull unsigned images from this project. The valid values are \"true\", \"false\".' ) class-attribute enable_content_trust_cosign : Optional [ str ] = Field ( None , description = 'Whether cosign content trust is enabled or not. If it is enabled, user can \\' t pull images without cosign signature from this project. The valid values are \"true\", \"false\".' ) class-attribute prevent_vul : Optional [ str ] = Field ( None , description = 'Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".' ) class-attribute severity : Optional [ str ] = Field ( None , description = 'If the vulnerability is high than severity defined here, the images can \\' t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".' ) class-attribute auto_scan : Optional [ str ] = Field ( None , description = 'Whether scan images automatically when pushing. The valid values are \"true\", \"false\".' ) class-attribute reuse_sys_cve_allowlist : Optional [ str ] = Field ( None , description = 'Whether this project reuse the system level CVE allowlist as the allowlist of its own. The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.' ) class-attribute retention_id : Optional [ str ] = Field ( None , description = 'The ID of the tag retention policy for the project' ) class-attribute ProjectScanner Source code in harborapi/models/models.py 472 473 class ProjectScanner ( BaseModel ): uuid : str = Field ( ... , description = \"The identifier of the scanner registration\" ) uuid : str = Field ( Ellipsis , description = 'The identifier of the scanner registration' ) class-attribute CVEAllowlistItem Source code in harborapi/models/models.py 476 477 478 479 class CVEAllowlistItem ( BaseModel ): cve_id : Optional [ str ] = Field ( None , description = 'The ID of the CVE, such as \"CVE-2019-10164\"' ) cve_id : Optional [ str ] = Field ( None , description = 'The ID of the CVE, such as \"CVE-2019-10164\"' ) class-attribute ReplicationTriggerSettings Source code in harborapi/models/models.py 482 483 484 485 class ReplicationTriggerSettings ( BaseModel ): cron : Optional [ str ] = Field ( None , description = \"The cron string for scheduled trigger\" ) cron : Optional [ str ] = Field ( None , description = 'The cron string for scheduled trigger' ) class-attribute ReplicationFilter Source code in harborapi/models/models.py 488 489 490 491 492 493 494 495 class ReplicationFilter ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The replication policy filter type.\" ) value : Optional [ Dict [ str , Any ]] = Field ( None , description = \"The value of replication policy filter.\" ) decoration : Optional [ str ] = Field ( None , description = \"matches or excludes the result\" ) type : Optional [ str ] = Field ( None , description = 'The replication policy filter type.' ) class-attribute value : Optional [ Dict [ str , Any ]] = Field ( None , description = 'The value of replication policy filter.' ) class-attribute decoration : Optional [ str ] = Field ( None , description = 'matches or excludes the result' ) class-attribute RegistryCredential Source code in harborapi/models/models.py 498 499 500 501 502 503 504 505 506 507 508 class RegistryCredential ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"Credential type, such as 'basic', 'oauth'.\" ) access_key : Optional [ str ] = Field ( None , description = \"Access key, e.g. user name when credential type is 'basic'.\" ) access_secret : Optional [ str ] = Field ( None , description = \"Access secret, e.g. password when credential type is 'basic'.\" , ) type : Optional [ str ] = Field ( None , description = \"Credential type, such as 'basic', 'oauth'.\" ) class-attribute access_key : Optional [ str ] = Field ( None , description = \"Access key, e.g. user name when credential type is 'basic'.\" ) class-attribute access_secret : Optional [ str ] = Field ( None , description = \"Access secret, e.g. password when credential type is 'basic'.\" ) class-attribute Registry Source code in harborapi/models/models.py 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 class Registry ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The registry ID.\" ) url : Optional [ str ] = Field ( None , description = \"The registry URL string.\" ) name : Optional [ str ] = Field ( None , description = \"The registry name.\" ) credential : Optional [ RegistryCredential ] = None type : Optional [ str ] = Field ( None , description = \"Type of the registry, e.g. 'harbor'.\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the server.\" , ) description : Optional [ str ] = Field ( None , description = \"Description of the registry.\" ) status : Optional [ str ] = Field ( None , description = \"Health status of the registry.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The create time of the policy.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the policy.\" ) id : Optional [ int ] = Field ( None , description = 'The registry ID.' ) class-attribute url : Optional [ str ] = Field ( None , description = 'The registry URL string.' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The registry name.' ) class-attribute credential : Optional [ RegistryCredential ] = None class-attribute type : Optional [ str ] = Field ( None , description = \"Type of the registry, e.g. 'harbor'.\" ) class-attribute insecure : Optional [ bool ] = Field ( None , description = 'Whether or not the certificate will be verified when Harbor tries to access the server.' ) class-attribute description : Optional [ str ] = Field ( None , description = 'Description of the registry.' ) class-attribute status : Optional [ str ] = Field ( None , description = 'Health status of the registry.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The create time of the policy.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the policy.' ) class-attribute RegistryUpdate Source code in harborapi/models/models.py 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 class RegistryUpdate ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The registry name.\" ) description : Optional [ str ] = Field ( None , description = \"Description of the registry.\" ) url : Optional [ str ] = Field ( None , description = \"The registry URL.\" ) credential_type : Optional [ str ] = Field ( None , description = \"Credential type of the registry, e.g. 'basic'.\" ) access_key : Optional [ str ] = Field ( None , description = \"The registry access key.\" ) access_secret : Optional [ str ] = Field ( None , description = \"The registry access secret.\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the server.\" , ) name : Optional [ str ] = Field ( None , description = 'The registry name.' ) class-attribute description : Optional [ str ] = Field ( None , description = 'Description of the registry.' ) class-attribute url : Optional [ str ] = Field ( None , description = 'The registry URL.' ) class-attribute credential_type : Optional [ str ] = Field ( None , description = \"Credential type of the registry, e.g. 'basic'.\" ) class-attribute access_key : Optional [ str ] = Field ( None , description = 'The registry access key.' ) class-attribute access_secret : Optional [ str ] = Field ( None , description = 'The registry access secret.' ) class-attribute insecure : Optional [ bool ] = Field ( None , description = 'Whether or not the certificate will be verified when Harbor tries to access the server.' ) class-attribute RegistryPing Source code in harborapi/models/models.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 class RegistryPing ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The registry ID.\" ) type : Optional [ str ] = Field ( None , description = \"Type of the registry, e.g. 'harbor'.\" ) url : Optional [ str ] = Field ( None , description = \"The registry URL.\" ) credential_type : Optional [ str ] = Field ( None , description = \"Credential type of the registry, e.g. 'basic'.\" ) access_key : Optional [ str ] = Field ( None , description = \"The registry access key.\" ) access_secret : Optional [ str ] = Field ( None , description = \"The registry access secret.\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the server.\" , ) id : Optional [ int ] = Field ( None , description = 'The registry ID.' ) class-attribute type : Optional [ str ] = Field ( None , description = \"Type of the registry, e.g. 'harbor'.\" ) class-attribute url : Optional [ str ] = Field ( None , description = 'The registry URL.' ) class-attribute credential_type : Optional [ str ] = Field ( None , description = \"Credential type of the registry, e.g. 'basic'.\" ) class-attribute access_key : Optional [ str ] = Field ( None , description = 'The registry access key.' ) class-attribute access_secret : Optional [ str ] = Field ( None , description = 'The registry access secret.' ) class-attribute insecure : Optional [ bool ] = Field ( None , description = 'Whether or not the certificate will be verified when Harbor tries to access the server.' ) class-attribute RegistryProviderCredentialPattern Source code in harborapi/models/models.py 569 570 571 572 573 574 575 576 577 class RegistryProviderCredentialPattern ( BaseModel ): access_key_type : Optional [ str ] = Field ( None , description = \"The access key type\" ) access_key_data : Optional [ str ] = Field ( None , description = \"The access key data\" ) access_secret_type : Optional [ str ] = Field ( None , description = \"The access secret type\" ) access_secret_data : Optional [ str ] = Field ( None , description = \"The access secret data\" ) access_key_type : Optional [ str ] = Field ( None , description = 'The access key type' ) class-attribute access_key_data : Optional [ str ] = Field ( None , description = 'The access key data' ) class-attribute access_secret_type : Optional [ str ] = Field ( None , description = 'The access secret type' ) class-attribute access_secret_data : Optional [ str ] = Field ( None , description = 'The access secret data' ) class-attribute RegistryEndpoint Source code in harborapi/models/models.py 580 581 582 class RegistryEndpoint ( BaseModel ): key : Optional [ str ] = Field ( None , description = \"The endpoint key\" ) value : Optional [ str ] = Field ( None , description = \"The endpoint value\" ) key : Optional [ str ] = Field ( None , description = 'The endpoint key' ) class-attribute value : Optional [ str ] = Field ( None , description = 'The endpoint value' ) class-attribute FilterStyle Source code in harborapi/models/models.py 585 586 587 588 class FilterStyle ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The filter type\" ) style : Optional [ str ] = Field ( None , description = \"The filter style\" ) values : Optional [ List [ str ]] = Field ( None , description = \"The filter values\" ) type : Optional [ str ] = Field ( None , description = 'The filter type' ) class-attribute style : Optional [ str ] = Field ( None , description = 'The filter style' ) class-attribute values : Optional [ List [ str ]] = Field ( None , description = 'The filter values' ) class-attribute ResourceList Source code in harborapi/models/models.py 591 592 593 594 595 class ResourceList ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 594 595 class Config : extra = Extra . allow extra = Extra . allow class-attribute ReplicationExecution Source code in harborapi/models/models.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 class ReplicationExecution ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the execution\" ) policy_id : Optional [ int ] = Field ( None , description = \"The ID if the policy that the execution belongs to\" ) status : Optional [ str ] = Field ( None , description = \"The status of the execution\" ) trigger : Optional [ str ] = Field ( None , description = \"The trigger mode\" ) start_time : Optional [ datetime ] = Field ( None , description = \"The start time\" ) end_time : Optional [ datetime ] = Field ( None , description = \"The end time\" ) status_text : Optional [ str ] = Field ( None , description = \"The status text\" ) total : Optional [ int ] = Field ( None , description = \"The total count of all executions\" ) failed : Optional [ int ] = Field ( None , description = \"The count of failed executions\" ) succeed : Optional [ int ] = Field ( None , description = \"The count of succeed executions\" ) in_progress : Optional [ int ] = Field ( None , description = \"The count of in_progress executions\" ) stopped : Optional [ int ] = Field ( None , description = \"The count of stopped executions\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the execution' ) class-attribute policy_id : Optional [ int ] = Field ( None , description = 'The ID if the policy that the execution belongs to' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The status of the execution' ) class-attribute trigger : Optional [ str ] = Field ( None , description = 'The trigger mode' ) class-attribute start_time : Optional [ datetime ] = Field ( None , description = 'The start time' ) class-attribute end_time : Optional [ datetime ] = Field ( None , description = 'The end time' ) class-attribute status_text : Optional [ str ] = Field ( None , description = 'The status text' ) class-attribute total : Optional [ int ] = Field ( None , description = 'The total count of all executions' ) class-attribute failed : Optional [ int ] = Field ( None , description = 'The count of failed executions' ) class-attribute succeed : Optional [ int ] = Field ( None , description = 'The count of succeed executions' ) class-attribute in_progress : Optional [ int ] = Field ( None , description = 'The count of in_progress executions' ) class-attribute stopped : Optional [ int ] = Field ( None , description = 'The count of stopped executions' ) class-attribute StartReplicationExecution Source code in harborapi/models/models.py 617 618 619 620 class StartReplicationExecution ( BaseModel ): policy_id : Optional [ int ] = Field ( None , description = \"The ID of policy that the execution belongs to.\" ) policy_id : Optional [ int ] = Field ( None , description = 'The ID of policy that the execution belongs to.' ) class-attribute ReplicationTask Source code in harborapi/models/models.py 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 class ReplicationTask ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the task\" ) execution_id : Optional [ int ] = Field ( None , description = \"The ID of the execution that the task belongs to\" ) status : Optional [ str ] = Field ( None , description = \"The status of the task\" ) job_id : Optional [ str ] = Field ( None , description = \"The ID of the underlying job that the task related to\" ) operation : Optional [ str ] = Field ( None , description = \"The operation of the task\" ) resource_type : Optional [ str ] = Field ( None , description = \"The type of the resource that the task operates\" ) src_resource : Optional [ str ] = Field ( None , description = \"The source resource that the task operates\" ) dst_resource : Optional [ str ] = Field ( None , description = \"The destination resource that the task operates\" ) start_time : Optional [ datetime ] = Field ( None , description = \"The start time of the task\" ) end_time : Optional [ datetime ] = Field ( None , description = \"The end time of the task\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the task' ) class-attribute execution_id : Optional [ int ] = Field ( None , description = 'The ID of the execution that the task belongs to' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The status of the task' ) class-attribute job_id : Optional [ str ] = Field ( None , description = 'The ID of the underlying job that the task related to' ) class-attribute operation : Optional [ str ] = Field ( None , description = 'The operation of the task' ) class-attribute resource_type : Optional [ str ] = Field ( None , description = 'The type of the resource that the task operates' ) class-attribute src_resource : Optional [ str ] = Field ( None , description = 'The source resource that the task operates' ) class-attribute dst_resource : Optional [ str ] = Field ( None , description = 'The destination resource that the task operates' ) class-attribute start_time : Optional [ datetime ] = Field ( None , description = 'The start time of the task' ) class-attribute end_time : Optional [ datetime ] = Field ( None , description = 'The end time of the task' ) class-attribute RobotCreated Source code in harborapi/models/models.py 648 649 650 651 652 653 654 655 656 657 class RobotCreated ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the robot\" ) name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the robot.\" ) expires_at : Optional [ int ] = Field ( None , description = \"The expiration data of the robot\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the robot' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of the tag' ) class-attribute secret : Optional [ str ] = Field ( None , description = 'The secret of the robot' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the robot.' ) class-attribute expires_at : Optional [ int ] = Field ( None , description = 'The expiration data of the robot' ) class-attribute RobotSec Source code in harborapi/models/models.py 660 661 class RobotSec ( BaseModel ): secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) secret : Optional [ str ] = Field ( None , description = 'The secret of the robot' ) class-attribute Access Source code in harborapi/models/models.py 664 665 666 667 class Access ( BaseModel ): resource : Optional [ str ] = Field ( None , description = \"The resource of the access\" ) action : Optional [ str ] = Field ( None , description = \"The action of the access\" ) effect : Optional [ str ] = Field ( None , description = \"The effect of the access\" ) resource : Optional [ str ] = Field ( None , description = 'The resource of the access' ) class-attribute action : Optional [ str ] = Field ( None , description = 'The action of the access' ) class-attribute effect : Optional [ str ] = Field ( None , description = 'The effect of the access' ) class-attribute RobotCreateV1 Source code in harborapi/models/models.py 670 671 672 673 674 675 676 677 678 679 680 681 class RobotCreateV1 ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The name of robot account\" ) description : Optional [ str ] = Field ( None , description = \"The description of robot account\" ) expires_at : Optional [ int ] = Field ( None , description = \"The expiration time on or after which the JWT MUST NOT be accepted for processing.\" , ) access : Optional [ List [ Access ]] = Field ( None , description = \"The permission of robot account\" ) name : Optional [ str ] = Field ( None , description = 'The name of robot account' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description of robot account' ) class-attribute expires_at : Optional [ int ] = Field ( None , description = 'The expiration time on or after which the JWT MUST NOT be accepted for processing.' ) class-attribute access : Optional [ List [ Access ]] = Field ( None , description = 'The permission of robot account' ) class-attribute Storage Source code in harborapi/models/models.py 684 685 686 class Storage ( BaseModel ): total : Optional [ int ] = Field ( None , description = \"Total volume size.\" ) free : Optional [ int ] = Field ( None , description = \"Free volume size.\" ) total : Optional [ int ] = Field ( None , description = 'Total volume size.' ) class-attribute free : Optional [ int ] = Field ( None , description = 'Free volume size.' ) class-attribute AuthproxySetting Source code in harborapi/models/models.py 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 class AuthproxySetting ( BaseModel ): endpoint : Optional [ str ] = Field ( None , description = \"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\" , ) tokenreivew_endpoint : Optional [ str ] = Field ( None , description = \"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\" , ) skip_search : Optional [ bool ] = Field ( None , description = \"The flag to determine whether Harbor can skip search the user/group when adding him as a member.\" , ) verify_cert : Optional [ bool ] = Field ( None , description = \"The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.\" , ) server_certificate : Optional [ str ] = Field ( None , description = \"The certificate to be pinned when connecting auth proxy.\" ) endpoint : Optional [ str ] = Field ( None , description = \"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\" ) class-attribute tokenreivew_endpoint : Optional [ str ] = Field ( None , description = \"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\" ) class-attribute skip_search : Optional [ bool ] = Field ( None , description = 'The flag to determine whether Harbor can skip search the user/group when adding him as a member.' ) class-attribute verify_cert : Optional [ bool ] = Field ( None , description = 'The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.' ) class-attribute server_certificate : Optional [ str ] = Field ( None , description = 'The certificate to be pinned when connecting auth proxy.' ) class-attribute SystemInfo Source code in harborapi/models/models.py 711 712 class SystemInfo ( BaseModel ): storage : Optional [ List [ Storage ]] = Field ( None , description = \"The storage of system.\" ) storage : Optional [ List [ Storage ]] = Field ( None , description = 'The storage of system.' ) class-attribute Type Source code in harborapi/models/models.py 715 716 717 718 719 720 721 class Type ( Enum ): hourly = \"Hourly\" daily = \"Daily\" weekly = \"Weekly\" custom = \"Custom\" manual = \"Manual\" none = \"None\" hourly = 'Hourly' class-attribute daily = 'Daily' class-attribute weekly = 'Weekly' class-attribute custom = 'Custom' class-attribute manual = 'Manual' class-attribute none = 'None' class-attribute ScheduleObj Source code in harborapi/models/models.py 724 725 726 727 728 729 730 731 732 733 734 class ScheduleObj ( BaseModel ): type : Optional [ Type ] = Field ( None , description = \"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'. \\n 'Manual' means to trigger it right away and 'None' means to cancel the schedule. \\n \" , ) cron : Optional [ str ] = Field ( None , description = \"A cron expression, a time-based job scheduler.\" ) next_scheduled_time : Optional [ datetime ] = Field ( None , description = \"The next time to schedule to run the job.\" ) type : Optional [ Type ] = Field ( None , description = \"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'. \\n 'Manual' means to trigger it right away and 'None' means to cancel the schedule. \\n \" ) class-attribute cron : Optional [ str ] = Field ( None , description = 'A cron expression, a time-based job scheduler.' ) class-attribute next_scheduled_time : Optional [ datetime ] = Field ( None , description = 'The next time to schedule to run the job.' ) class-attribute Trigger Source code in harborapi/models/models.py 737 738 739 740 class Trigger ( Enum ): manual = \"Manual\" schedule = \"Schedule\" event = \"Event\" manual = 'Manual' class-attribute schedule = 'Schedule' class-attribute event = 'Event' class-attribute Stats Source code in harborapi/models/models.py 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 class Stats ( BaseModel ): total : Optional [ int ] = Field ( None , description = \"The total number of scan processes triggered by the scan all action\" , example = 100 , ) completed : Optional [ int ] = Field ( None , description = \"The number of the finished scan processes triggered by the scan all action\" , example = 90 , ) metrics : Optional [ Dict [ str , int ]] = Field ( None , description = \"The metrics data for the each status\" , example = { \"Success\" : 5 , \"Error\" : 2 , \"Running\" : 3 }, ) ongoing : Optional [ bool ] = Field ( None , description = \"A flag indicating job status of scan all.\" ) trigger : Optional [ Trigger ] = Field ( None , description = \"The trigger of the scan all job.\" ) total : Optional [ int ] = Field ( None , description = 'The total number of scan processes triggered by the scan all action' , example = 100 ) class-attribute completed : Optional [ int ] = Field ( None , description = 'The number of the finished scan processes triggered by the scan all action' , example = 90 ) class-attribute metrics : Optional [ Dict [ str , int ]] = Field ( None , description = 'The metrics data for the each status' , example = { 'Success' : 5 , 'Error' : 2 , 'Running' : 3 }) class-attribute ongoing : Optional [ bool ] = Field ( None , description = 'A flag indicating job status of scan all.' ) class-attribute trigger : Optional [ Trigger ] = Field ( None , description = 'The trigger of the scan all job.' ) class-attribute RetentionRuleParamMetadata Source code in harborapi/models/models.py 767 768 769 770 class RetentionRuleParamMetadata ( BaseModel ): type : Optional [ str ] = None unit : Optional [ str ] = None required : Optional [ bool ] = None type : Optional [ str ] = None class-attribute unit : Optional [ str ] = None class-attribute required : Optional [ bool ] = None class-attribute RetentionSelectorMetadata Source code in harborapi/models/models.py 773 774 775 776 class RetentionSelectorMetadata ( BaseModel ): display_text : Optional [ str ] = None kind : Optional [ str ] = None decorations : Optional [ List [ str ]] = None display_text : Optional [ str ] = None class-attribute kind : Optional [ str ] = None class-attribute decorations : Optional [ List [ str ]] = None class-attribute RetentionRuleTrigger Source code in harborapi/models/models.py 779 780 781 782 class RetentionRuleTrigger ( BaseModel ): kind : Optional [ str ] = None settings : Optional [ Dict [ str , Any ]] = None references : Optional [ Dict [ str , Any ]] = None kind : Optional [ str ] = None class-attribute settings : Optional [ Dict [ str , Any ]] = None class-attribute references : Optional [ Dict [ str , Any ]] = None class-attribute RetentionPolicyScope Source code in harborapi/models/models.py 785 786 787 class RetentionPolicyScope ( BaseModel ): level : Optional [ str ] = None ref : Optional [ int ] = None level : Optional [ str ] = None class-attribute ref : Optional [ int ] = None class-attribute RetentionSelector Source code in harborapi/models/models.py 790 791 792 793 794 class RetentionSelector ( BaseModel ): kind : Optional [ str ] = None decoration : Optional [ str ] = None pattern : Optional [ str ] = None extras : Optional [ str ] = None kind : Optional [ str ] = None class-attribute decoration : Optional [ str ] = None class-attribute pattern : Optional [ str ] = None class-attribute extras : Optional [ str ] = None class-attribute RetentionExecution Source code in harborapi/models/models.py 797 798 799 800 801 802 803 804 class RetentionExecution ( BaseModel ): id : Optional [ int ] = None policy_id : Optional [ int ] = None start_time : Optional [ str ] = None end_time : Optional [ str ] = None status : Optional [ str ] = None trigger : Optional [ str ] = None dry_run : Optional [ bool ] = None id : Optional [ int ] = None class-attribute policy_id : Optional [ int ] = None class-attribute start_time : Optional [ str ] = None class-attribute end_time : Optional [ str ] = None class-attribute status : Optional [ str ] = None class-attribute trigger : Optional [ str ] = None class-attribute dry_run : Optional [ bool ] = None class-attribute RetentionExecutionTask Source code in harborapi/models/models.py 807 808 809 810 811 812 813 814 815 816 817 818 class RetentionExecutionTask ( BaseModel ): id : Optional [ int ] = None execution_id : Optional [ int ] = None repository : Optional [ str ] = None job_id : Optional [ str ] = None status : Optional [ str ] = None status_code : Optional [ int ] = None status_revision : Optional [ int ] = None start_time : Optional [ str ] = None end_time : Optional [ str ] = None total : Optional [ int ] = None retained : Optional [ int ] = None id : Optional [ int ] = None class-attribute execution_id : Optional [ int ] = None class-attribute repository : Optional [ str ] = None class-attribute job_id : Optional [ str ] = None class-attribute status : Optional [ str ] = None class-attribute status_code : Optional [ int ] = None class-attribute status_revision : Optional [ int ] = None class-attribute start_time : Optional [ str ] = None class-attribute end_time : Optional [ str ] = None class-attribute total : Optional [ int ] = None class-attribute retained : Optional [ int ] = None class-attribute QuotaUpdateReq Source code in harborapi/models/models.py 821 822 823 824 class QuotaUpdateReq ( BaseModel ): hard : Optional [ ResourceList ] = Field ( None , description = \"The new hard limits for the quota\" ) hard : Optional [ ResourceList ] = Field ( None , description = 'The new hard limits for the quota' ) class-attribute QuotaRefObject Source code in harborapi/models/models.py 827 828 829 830 831 class QuotaRefObject ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 830 831 class Config : extra = Extra . allow extra = Extra . allow class-attribute Quota Source code in harborapi/models/models.py 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 class Quota ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"ID of the quota\" ) ref : Optional [ QuotaRefObject ] = Field ( None , description = \"The reference object of the quota\" ) hard : Optional [ ResourceList ] = Field ( None , description = \"The hard limits of the quota\" ) used : Optional [ ResourceList ] = Field ( None , description = \"The used status of the quota\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of the quota\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of the quota\" ) id : Optional [ int ] = Field ( None , description = 'ID of the quota' ) class-attribute ref : Optional [ QuotaRefObject ] = Field ( None , description = 'The reference object of the quota' ) class-attribute hard : Optional [ ResourceList ] = Field ( None , description = 'The hard limits of the quota' ) class-attribute used : Optional [ ResourceList ] = Field ( None , description = 'The used status of the quota' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'the creation time of the quota' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'the update time of the quota' ) class-attribute ScannerRegistration Source code in harborapi/models/models.py 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 class ScannerRegistration ( BaseModel ): uuid : Optional [ str ] = Field ( None , description = \"The unique identifier of this registration.\" ) name : Optional [ str ] = Field ( None , description = \"The name of this registration.\" , example = \"Trivy\" ) description : Optional [ str ] = Field ( None , description = \"An optional description of this registration.\" , example = \"A free-to-use tool that scans container images for package vulnerabilities. \\n \" , ) url : Optional [ str ] = Field ( None , description = \"A base URL of the scanner adapter\" , example = \"http://harbor-scanner-trivy:8080\" , ) disabled : Optional [ bool ] = Field ( False , description = \"Indicate whether the registration is enabled or not\" ) is_default : Optional [ bool ] = Field ( False , description = \"Indicate if the registration is set as the system default one\" , ) auth : Optional [ str ] = Field ( \"\" , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , example = \"Bearer\" , ) access_credential : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n \" , example = \"Bearer: JWTTOKENGOESHERE\" , ) skip_cert_verify : Optional [ bool ] = Field ( False , alias = \"skip_certVerify\" , description = \"Indicate if skip the certificate verification when sending HTTP requests\" , ) use_internal_addr : Optional [ bool ] = Field ( False , description = \"Indicate whether use internal registry addr for the scanner to pull content or not\" , ) create_time : Optional [ datetime ] = Field ( None , description = \"The creation time of this registration\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of this registration\" ) adapter : Optional [ str ] = Field ( None , description = \"Optional property to describe the name of the scanner registration\" , example = \"Trivy\" , ) vendor : Optional [ str ] = Field ( None , description = \"Optional property to describe the vendor of the scanner registration\" , example = \"CentOS\" , ) version : Optional [ str ] = Field ( None , description = \"Optional property to describe the version of the scanner registration\" , example = \"1.0.1\" , ) health : Optional [ str ] = Field ( \"\" , description = \"Indicate the healthy of the registration\" , example = \"healthy\" ) uuid : Optional [ str ] = Field ( None , description = 'The unique identifier of this registration.' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of this registration.' , example = 'Trivy' ) class-attribute description : Optional [ str ] = Field ( None , description = 'An optional description of this registration.' , example = 'A free-to-use tool that scans container images for package vulnerabilities. \\n ' ) class-attribute url : Optional [ str ] = Field ( None , description = 'A base URL of the scanner adapter' , example = 'http://harbor-scanner-trivy:8080' ) class-attribute disabled : Optional [ bool ] = Field ( False , description = 'Indicate whether the registration is enabled or not' ) class-attribute is_default : Optional [ bool ] = Field ( False , description = 'Indicate if the registration is set as the system default one' ) class-attribute auth : Optional [ str ] = Field ( '' , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , example = 'Bearer' ) class-attribute access_credential : Optional [ str ] = Field ( None , description = 'An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n ' , example = 'Bearer: JWTTOKENGOESHERE' ) class-attribute skip_cert_verify : Optional [ bool ] = Field ( False , alias = 'skip_certVerify' , description = 'Indicate if skip the certificate verification when sending HTTP requests' ) class-attribute use_internal_addr : Optional [ bool ] = Field ( False , description = 'Indicate whether use internal registry addr for the scanner to pull content or not' ) class-attribute create_time : Optional [ datetime ] = Field ( None , description = 'The creation time of this registration' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of this registration' ) class-attribute adapter : Optional [ str ] = Field ( None , description = 'Optional property to describe the name of the scanner registration' , example = 'Trivy' ) class-attribute vendor : Optional [ str ] = Field ( None , description = 'Optional property to describe the vendor of the scanner registration' , example = 'CentOS' ) class-attribute version : Optional [ str ] = Field ( None , description = 'Optional property to describe the version of the scanner registration' , example = '1.0.1' ) class-attribute health : Optional [ str ] = Field ( '' , description = 'Indicate the healthy of the registration' , example = 'healthy' ) class-attribute ScannerRegistrationReq Source code in harborapi/models/models.py 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 class ScannerRegistrationReq ( BaseModel ): name : str = Field ( ... , description = \"The name of this registration\" , example = \"Trivy\" ) description : Optional [ str ] = Field ( None , description = \"An optional description of this registration.\" , example = \"A free-to-use tool that scans container images for package vulnerabilities. \\n \" , ) url : AnyUrl = Field ( ... , description = \"A base URL of the scanner adapter.\" , example = \"http://harbor-scanner-trivy:8080\" , ) auth : Optional [ str ] = Field ( None , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , example = \"Bearer\" , ) access_credential : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n \" , example = \"Bearer: JWTTOKENGOESHERE\" , ) skip_cert_verify : Optional [ bool ] = Field ( False , alias = \"skip_certVerify\" , description = \"Indicate if skip the certificate verification when sending HTTP requests\" , ) use_internal_addr : Optional [ bool ] = Field ( False , description = \"Indicate whether use internal registry addr for the scanner to pull content or not\" , ) disabled : Optional [ bool ] = Field ( False , description = \"Indicate whether the registration is enabled or not\" ) name : str = Field ( Ellipsis , description = 'The name of this registration' , example = 'Trivy' ) class-attribute description : Optional [ str ] = Field ( None , description = 'An optional description of this registration.' , example = 'A free-to-use tool that scans container images for package vulnerabilities. \\n ' ) class-attribute url : AnyUrl = Field ( Ellipsis , description = 'A base URL of the scanner adapter.' , example = 'http://harbor-scanner-trivy:8080' ) class-attribute auth : Optional [ str ] = Field ( None , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , example = 'Bearer' ) class-attribute access_credential : Optional [ str ] = Field ( None , description = 'An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n ' , example = 'Bearer: JWTTOKENGOESHERE' ) class-attribute skip_cert_verify : Optional [ bool ] = Field ( False , alias = 'skip_certVerify' , description = 'Indicate if skip the certificate verification when sending HTTP requests' ) class-attribute use_internal_addr : Optional [ bool ] = Field ( False , description = 'Indicate whether use internal registry addr for the scanner to pull content or not' ) class-attribute disabled : Optional [ bool ] = Field ( False , description = 'Indicate whether the registration is enabled or not' ) class-attribute ScannerRegistrationSettings Source code in harborapi/models/models.py 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 class ScannerRegistrationSettings ( BaseModel ): name : str = Field ( ... , description = \"The name of this registration\" , example = \"Trivy\" ) url : AnyUrl = Field ( ... , description = \"A base URL of the scanner adapter.\" , example = \"http://harbor-scanner-trivy:8080\" , ) auth : Optional [ str ] = Field ( \"\" , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , ) access_credential : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n \" , example = \"Bearer: JWTTOKENGOESHERE\" , ) name : str = Field ( Ellipsis , description = 'The name of this registration' , example = 'Trivy' ) class-attribute url : AnyUrl = Field ( Ellipsis , description = 'A base URL of the scanner adapter.' , example = 'http://harbor-scanner-trivy:8080' ) class-attribute auth : Optional [ str ] = Field ( '' , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' ) class-attribute access_credential : Optional [ str ] = Field ( None , description = 'An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n ' , example = 'Bearer: JWTTOKENGOESHERE' ) class-attribute IsDefault Source code in harborapi/models/models.py 976 977 978 979 class IsDefault ( BaseModel ): is_default : Optional [ bool ] = Field ( None , description = \"A flag indicating whether a scanner registration is default.\" ) is_default : Optional [ bool ] = Field ( None , description = 'A flag indicating whether a scanner registration is default.' ) class-attribute ScannerCapability Source code in harborapi/models/models.py 982 983 984 class ScannerCapability ( BaseModel ): consumes_mime_types : Optional [ List [ str ]] = None produces_mime_types : Optional [ List [ str ]] = None consumes_mime_types : Optional [ List [ str ]] = None class-attribute produces_mime_types : Optional [ List [ str ]] = None class-attribute ScannerAdapterMetadata Source code in harborapi/models/models.py 987 988 989 990 991 992 class ScannerAdapterMetadata ( BaseModel ): scanner : Optional [ Scanner ] = None capabilities : Optional [ List [ ScannerCapability ]] = None properties : Optional [ Dict [ str , str ]] = Field ( None , example = { \"harbor.scanner-adapter/registry-authorization-type\" : \"Bearer\" } ) scanner : Optional [ Scanner ] = None class-attribute capabilities : Optional [ List [ ScannerCapability ]] = None class-attribute properties : Optional [ Dict [ str , str ]] = Field ( None , example = { 'harbor.scanner-adapter/registry-authorization-type' : 'Bearer' }) class-attribute ImmutableSelector Source code in harborapi/models/models.py 995 996 997 998 999 class ImmutableSelector ( BaseModel ): kind : Optional [ str ] = None decoration : Optional [ str ] = None pattern : Optional [ str ] = None extras : Optional [ str ] = None kind : Optional [ str ] = None class-attribute decoration : Optional [ str ] = None class-attribute pattern : Optional [ str ] = None class-attribute extras : Optional [ str ] = None class-attribute LdapConf Source code in harborapi/models/models.py 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 class LdapConf ( BaseModel ): ldap_url : Optional [ str ] = Field ( None , description = \"The url of ldap service.\" ) ldap_search_dn : Optional [ str ] = Field ( None , description = \"The search dn of ldap service.\" ) ldap_search_password : Optional [ str ] = Field ( None , description = \"The search password of ldap service.\" ) ldap_base_dn : Optional [ str ] = Field ( None , description = \"The base dn of ldap service.\" ) ldap_filter : Optional [ str ] = Field ( None , description = \"The serach filter of ldap service.\" ) ldap_uid : Optional [ str ] = Field ( None , description = \"The serach uid from ldap service attributes.\" ) ldap_scope : Optional [ int ] = Field ( None , description = \"The serach scope of ldap service.\" ) ldap_connection_timeout : Optional [ int ] = Field ( None , description = \"The connect timeout of ldap service(second).\" ) ldap_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify Ldap server certificate.\" ) ldap_url : Optional [ str ] = Field ( None , description = 'The url of ldap service.' ) class-attribute ldap_search_dn : Optional [ str ] = Field ( None , description = 'The search dn of ldap service.' ) class-attribute ldap_search_password : Optional [ str ] = Field ( None , description = 'The search password of ldap service.' ) class-attribute ldap_base_dn : Optional [ str ] = Field ( None , description = 'The base dn of ldap service.' ) class-attribute ldap_filter : Optional [ str ] = Field ( None , description = 'The serach filter of ldap service.' ) class-attribute ldap_uid : Optional [ str ] = Field ( None , description = 'The serach uid from ldap service attributes.' ) class-attribute ldap_scope : Optional [ int ] = Field ( None , description = 'The serach scope of ldap service.' ) class-attribute ldap_connection_timeout : Optional [ int ] = Field ( None , description = 'The connect timeout of ldap service(second).' ) class-attribute ldap_verify_cert : Optional [ bool ] = Field ( None , description = 'Verify Ldap server certificate.' ) class-attribute LdapPingResult Source code in harborapi/models/models.py 1030 1031 1032 1033 1034 class LdapPingResult ( BaseModel ): success : Optional [ bool ] = Field ( None , description = \"Test success\" ) message : Optional [ str ] = Field ( None , description = \"The ping operation output message.\" ) success : Optional [ bool ] = Field ( None , description = 'Test success' ) class-attribute message : Optional [ str ] = Field ( None , description = 'The ping operation output message.' ) class-attribute LdapImportUsers Source code in harborapi/models/models.py 1037 1038 class LdapImportUsers ( BaseModel ): ldap_uid_list : Optional [ List [ str ]] = Field ( None , description = \"selected uid list\" ) ldap_uid_list : Optional [ List [ str ]] = Field ( None , description = 'selected uid list' ) class-attribute LdapFailedImportUser Source code in harborapi/models/models.py 1041 1042 1043 class LdapFailedImportUser ( BaseModel ): uid : Optional [ str ] = Field ( None , description = \"the uid can't add to system.\" ) error : Optional [ str ] = Field ( None , description = \"fail reason.\" ) uid : Optional [ str ] = Field ( None , description = \"the uid can't add to system.\" ) class-attribute error : Optional [ str ] = Field ( None , description = 'fail reason.' ) class-attribute LdapUser Source code in harborapi/models/models.py 1046 1047 1048 1049 1050 1051 1052 1053 class LdapUser ( BaseModel ): username : Optional [ str ] = Field ( None , description = \"ldap username.\" ) realname : Optional [ str ] = Field ( None , description = 'The user realname from \"uid\" or \"cn\" attribute.' ) email : Optional [ str ] = Field ( None , description = 'The user email address from \"mail\" or \"email\" attribute.' ) username : Optional [ str ] = Field ( None , description = 'ldap username.' ) class-attribute realname : Optional [ str ] = Field ( None , description = 'The user realname from \"uid\" or \"cn\" attribute.' ) class-attribute email : Optional [ str ] = Field ( None , description = 'The user email address from \"mail\" or \"email\" attribute.' ) class-attribute UserGroup Source code in harborapi/models/models.py 1056 1057 1058 1059 1060 1061 1062 1063 1064 class UserGroup ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the user group\" ) group_name : Optional [ str ] = Field ( None , description = \"The name of the user group\" ) group_type : Optional [ int ] = Field ( None , description = \"The group type, 1 for LDAP group, 2 for HTTP group.\" ) ldap_group_dn : Optional [ str ] = Field ( None , description = \"The DN of the LDAP group if group type is 1 (LDAP group).\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the user group' ) class-attribute group_name : Optional [ str ] = Field ( None , description = 'The name of the user group' ) class-attribute group_type : Optional [ int ] = Field ( None , description = 'The group type, 1 for LDAP group, 2 for HTTP group.' ) class-attribute ldap_group_dn : Optional [ str ] = Field ( None , description = 'The DN of the LDAP group if group type is 1 (LDAP group).' ) class-attribute UserGroupSearchItem Source code in harborapi/models/models.py 1067 1068 1069 1070 1071 1072 class UserGroupSearchItem ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the user group\" ) group_name : Optional [ str ] = Field ( None , description = \"The name of the user group\" ) group_type : Optional [ int ] = Field ( None , description = \"The group type, 1 for LDAP group, 2 for HTTP group.\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the user group' ) class-attribute group_name : Optional [ str ] = Field ( None , description = 'The name of the user group' ) class-attribute group_type : Optional [ int ] = Field ( None , description = 'The group type, 1 for LDAP group, 2 for HTTP group.' ) class-attribute EventType Source code in harborapi/models/models.py 1075 1076 1077 1078 class EventType ( BaseModel ): __root__ : str = Field ( ... , description = \"Webhook supportted event type.\" , example = \"pullImage\" ) __root__ : str = Field ( Ellipsis , description = 'Webhook supportted event type.' , example = 'pullImage' ) class-attribute NotifyType Source code in harborapi/models/models.py 1081 1082 1083 1084 class NotifyType ( BaseModel ): __root__ : str = Field ( ... , description = \"Webhook supportted notify type.\" , example = \"http\" ) __root__ : str = Field ( Ellipsis , description = 'Webhook supportted notify type.' , example = 'http' ) class-attribute WebhookTargetObject Source code in harborapi/models/models.py 1087 1088 1089 1090 1091 1092 1093 class WebhookTargetObject ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The webhook target notify type.\" ) address : Optional [ str ] = Field ( None , description = \"The webhook target address.\" ) auth_header : Optional [ str ] = Field ( None , description = \"The webhook auth header.\" ) skip_cert_verify : Optional [ bool ] = Field ( None , description = \"Whether or not to skip cert verify.\" ) type : Optional [ str ] = Field ( None , description = 'The webhook target notify type.' ) class-attribute address : Optional [ str ] = Field ( None , description = 'The webhook target address.' ) class-attribute auth_header : Optional [ str ] = Field ( None , description = 'The webhook auth header.' ) class-attribute skip_cert_verify : Optional [ bool ] = Field ( None , description = 'Whether or not to skip cert verify.' ) class-attribute WebhookPolicy Source code in harborapi/models/models.py 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 class WebhookPolicy ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The webhook policy ID.\" ) name : Optional [ str ] = Field ( None , description = \"The name of webhook policy.\" ) description : Optional [ str ] = Field ( None , description = \"The description of webhook policy.\" ) project_id : Optional [ int ] = Field ( None , description = \"The project ID of webhook policy.\" ) targets : Optional [ List [ WebhookTargetObject ]] = None event_types : Optional [ List [ str ]] = None creator : Optional [ str ] = Field ( None , description = \"The creator of the webhook policy.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The create time of the webhook policy.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the webhook policy.\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the webhook policy is enabled or not.\" ) id : Optional [ int ] = Field ( None , description = 'The webhook policy ID.' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of webhook policy.' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description of webhook policy.' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'The project ID of webhook policy.' ) class-attribute targets : Optional [ List [ WebhookTargetObject ]] = None class-attribute event_types : Optional [ List [ str ]] = None class-attribute creator : Optional [ str ] = Field ( None , description = 'The creator of the webhook policy.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The create time of the webhook policy.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the webhook policy.' ) class-attribute enabled : Optional [ bool ] = Field ( None , description = 'Whether the webhook policy is enabled or not.' ) class-attribute WebhookLastTrigger Source code in harborapi/models/models.py 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 class WebhookLastTrigger ( BaseModel ): policy_name : Optional [ str ] = Field ( None , description = \"The webhook policy name.\" ) event_type : Optional [ str ] = Field ( None , description = \"The webhook event type.\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether or not the webhook policy enabled.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of webhook policy.\" ) last_trigger_time : Optional [ datetime ] = Field ( None , description = \"The last trigger time of webhook policy.\" ) policy_name : Optional [ str ] = Field ( None , description = 'The webhook policy name.' ) class-attribute event_type : Optional [ str ] = Field ( None , description = 'The webhook event type.' ) class-attribute enabled : Optional [ bool ] = Field ( None , description = 'Whether or not the webhook policy enabled.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of webhook policy.' ) class-attribute last_trigger_time : Optional [ datetime ] = Field ( None , description = 'The last trigger time of webhook policy.' ) class-attribute WebhookJob Source code in harborapi/models/models.py 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 class WebhookJob ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The webhook job ID.\" ) policy_id : Optional [ int ] = Field ( None , description = \"The webhook policy ID.\" ) event_type : Optional [ str ] = Field ( None , description = \"The webhook job event type.\" ) notify_type : Optional [ str ] = Field ( None , description = \"The webhook job notify type.\" ) status : Optional [ str ] = Field ( None , description = \"The webhook job status.\" ) job_detail : Optional [ str ] = Field ( None , description = \"The webhook job notify detailed data.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The webhook job creation time.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The webhook job update time.\" ) id : Optional [ int ] = Field ( None , description = 'The webhook job ID.' ) class-attribute policy_id : Optional [ int ] = Field ( None , description = 'The webhook policy ID.' ) class-attribute event_type : Optional [ str ] = Field ( None , description = 'The webhook job event type.' ) class-attribute notify_type : Optional [ str ] = Field ( None , description = 'The webhook job notify type.' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The webhook job status.' ) class-attribute job_detail : Optional [ str ] = Field ( None , description = 'The webhook job notify detailed data.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The webhook job creation time.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The webhook job update time.' ) class-attribute InternalConfigurationsResponse Source code in harborapi/models/models.py 1152 1153 1154 1155 1156 class InternalConfigurationsResponse ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/models.py 1155 1156 class Config : extra = Extra . allow extra = Extra . allow class-attribute InternalConfigurationValue Source code in harborapi/models/models.py 1159 1160 1161 1162 1163 1164 1165 class InternalConfigurationValue ( BaseModel ): value : Optional [ Dict [ str , Any ]] = Field ( None , description = \"The value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" ) value : Optional [ Dict [ str , Any ]] = Field ( None , description = 'The value of current config item' ) class-attribute editable : Optional [ bool ] = Field ( None , description = 'The configure item can be updated or not' ) class-attribute Parameter Source code in harborapi/models/models.py 1168 1169 1170 1171 1172 class Parameter ( BaseModel ): daily_time : Optional [ int ] = Field ( None , description = 'The offset in seconds of UTC 0 o \\' clock, only valid when the policy type is \"daily\"' , ) daily_time : Optional [ int ] = Field ( None , description = 'The offset in seconds of UTC 0 o \\' clock, only valid when the policy type is \"daily\"' ) class-attribute ScanAllPolicy Source code in harborapi/models/models.py 1175 1176 1177 1178 1179 1180 1181 1182 1183 class ScanAllPolicy ( BaseModel ): type : Optional [ str ] = Field ( None , description = 'The type of scan all policy, currently the valid values are \"none\" and \"daily\"' , ) parameter : Optional [ Parameter ] = Field ( None , description = \"The parameters of the policy, the values are dependent on the type of the policy.\" , ) type : Optional [ str ] = Field ( None , description = 'The type of scan all policy, currently the valid values are \"none\" and \"daily\"' ) class-attribute parameter : Optional [ Parameter ] = Field ( None , description = 'The parameters of the policy, the values are dependent on the type of the policy.' ) class-attribute Configurations Source code in harborapi/models/models.py 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 class Configurations ( BaseModel ): auth_mode : Optional [ str ] = Field ( None , description = 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"' , ) email_from : Optional [ str ] = Field ( None , description = \"The sender name for Email notification.\" ) email_host : Optional [ str ] = Field ( None , description = \"The hostname of SMTP server that sends Email notification.\" ) email_identity : Optional [ str ] = Field ( None , description = \"By default it's empty so the email_username is picked\" ) email_insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the email server.\" , ) email_password : Optional [ str ] = Field ( None , description = \"Email password\" ) email_port : Optional [ int ] = Field ( None , description = \"The port of SMTP server\" ) email_ssl : Optional [ bool ] = Field ( None , description = \"When it''s set to true the system will access Email server via TLS by default. If it''s set to false, it still will handle \\\" STARTTLS \\\" from server side.\" , ) email_username : Optional [ str ] = Field ( None , description = \"The username for authenticate against SMTP server\" ) ldap_base_dn : Optional [ str ] = Field ( None , description = \"The Base DN for LDAP binding.\" ) ldap_filter : Optional [ str ] = Field ( None , description = \"The filter for LDAP search\" ) ldap_group_base_dn : Optional [ str ] = Field ( None , description = \"The base DN to search LDAP group.\" ) ldap_group_admin_dn : Optional [ str ] = Field ( None , description = \"Specify the ldap group which have the same privilege with Harbor admin\" , ) ldap_group_attribute_name : Optional [ str ] = Field ( None , description = \"The attribute which is used as identity of the LDAP group, default is cn.'\" , ) ldap_group_search_filter : Optional [ str ] = Field ( None , description = \"The filter to search the ldap group\" ) ldap_group_search_scope : Optional [ int ] = Field ( None , description = \"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\" , ) ldap_scope : Optional [ int ] = Field ( None , description = \"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\" , ) ldap_search_dn : Optional [ str ] = Field ( None , description = \"The DN of the user to do the search.\" ) ldap_search_password : Optional [ str ] = Field ( None , description = \"The password of the ldap search dn\" ) ldap_timeout : Optional [ int ] = Field ( None , description = \"Timeout in seconds for connection to LDAP server\" ) ldap_uid : Optional [ str ] = Field ( None , description = 'The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"' , ) ldap_url : Optional [ str ] = Field ( None , description = \"The URL of LDAP server\" ) ldap_verify_cert : Optional [ bool ] = Field ( None , description = \"Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.\" , ) ldap_group_membership_attribute : Optional [ str ] = Field ( None , description = \"The user attribute to identify the group membership\" ) project_creation_restriction : Optional [ str ] = Field ( None , description = \"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\" , ) read_only : Optional [ bool ] = Field ( None , description = \"The flag to indicate whether Harbor is in readonly mode.\" ) self_registration : Optional [ bool ] = Field ( None , description = \"Whether the Harbor instance supports self-registration. If it''s set to false, admin need to add user to the instance.\" , ) token_expiration : Optional [ int ] = Field ( None , description = \"The expiration time of the token for internal Registry, in minutes.\" , ) uaa_client_id : Optional [ str ] = Field ( None , description = \"The client id of UAA\" ) uaa_client_secret : Optional [ str ] = Field ( None , description = \"The client secret of the UAA\" ) uaa_endpoint : Optional [ str ] = Field ( None , description = \"The endpoint of the UAA\" ) uaa_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the certificate in UAA server\" ) http_authproxy_endpoint : Optional [ str ] = Field ( None , description = \"The endpoint of the HTTP auth\" ) http_authproxy_tokenreview_endpoint : Optional [ str ] = Field ( None , description = \"The token review endpoint\" ) http_authproxy_admin_groups : Optional [ str ] = Field ( None , description = \"The group which has the harbor admin privileges\" ) http_authproxy_admin_usernames : Optional [ str ] = Field ( None , description = \"The username which has the harbor admin privileges\" ) http_authproxy_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the HTTP auth provider's certificate\" ) http_authproxy_skip_search : Optional [ bool ] = Field ( None , description = \"Search user before onboard\" ) http_authproxy_server_certificate : Optional [ str ] = Field ( None , description = \"The certificate of the HTTP auth provider\" ) oidc_name : Optional [ str ] = Field ( None , description = \"The OIDC provider name\" ) oidc_endpoint : Optional [ str ] = Field ( None , description = \"The endpoint of the OIDC provider\" ) oidc_client_id : Optional [ str ] = Field ( None , description = \"The client ID of the OIDC provider\" ) oidc_client_secret : Optional [ str ] = Field ( None , description = \"The OIDC provider secret\" ) oidc_groups_claim : Optional [ str ] = Field ( None , description = \"The attribute claims the group name\" ) oidc_admin_group : Optional [ str ] = Field ( None , description = \"The OIDC group which has the harbor admin privileges\" ) oidc_scope : Optional [ str ] = Field ( None , description = \"The scope of the OIDC provider\" ) oidc_user_claim : Optional [ str ] = Field ( None , description = \"The attribute claims the username\" ) oidc_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the OIDC provider's certificate'\" ) oidc_auto_onboard : Optional [ bool ] = Field ( None , description = \"Auto onboard the OIDC user\" ) oidc_extra_redirect_parms : Optional [ str ] = Field ( None , description = \"Extra parameters to add when redirect request to OIDC provider\" , ) robot_token_duration : Optional [ int ] = Field ( None , description = \"The robot account token duration in days\" ) robot_name_prefix : Optional [ str ] = Field ( None , description = \"The rebot account name prefix\" ) notification_enable : Optional [ bool ] = Field ( None , description = \"Enable notification\" ) quota_per_project_enable : Optional [ bool ] = Field ( None , description = \"Enable quota per project\" ) storage_per_project : Optional [ int ] = Field ( None , description = \"The storage quota per project\" ) audit_log_forward_endpoint : Optional [ str ] = Field ( None , description = \"The audit log forward endpoint\" ) skip_audit_log_database : Optional [ bool ] = Field ( None , description = \"Skip audit log database\" ) auth_mode : Optional [ str ] = Field ( None , description = 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"' ) class-attribute email_from : Optional [ str ] = Field ( None , description = 'The sender name for Email notification.' ) class-attribute email_host : Optional [ str ] = Field ( None , description = 'The hostname of SMTP server that sends Email notification.' ) class-attribute email_identity : Optional [ str ] = Field ( None , description = \"By default it's empty so the email_username is picked\" ) class-attribute email_insecure : Optional [ bool ] = Field ( None , description = 'Whether or not the certificate will be verified when Harbor tries to access the email server.' ) class-attribute email_password : Optional [ str ] = Field ( None , description = 'Email password' ) class-attribute email_port : Optional [ int ] = Field ( None , description = 'The port of SMTP server' ) class-attribute email_ssl : Optional [ bool ] = Field ( None , description = 'When it \\'\\' s set to true the system will access Email server via TLS by default. If it \\'\\' s set to false, it still will handle \"STARTTLS\" from server side.' ) class-attribute email_username : Optional [ str ] = Field ( None , description = 'The username for authenticate against SMTP server' ) class-attribute ldap_base_dn : Optional [ str ] = Field ( None , description = 'The Base DN for LDAP binding.' ) class-attribute ldap_filter : Optional [ str ] = Field ( None , description = 'The filter for LDAP search' ) class-attribute ldap_group_base_dn : Optional [ str ] = Field ( None , description = 'The base DN to search LDAP group.' ) class-attribute ldap_group_admin_dn : Optional [ str ] = Field ( None , description = 'Specify the ldap group which have the same privilege with Harbor admin' ) class-attribute ldap_group_attribute_name : Optional [ str ] = Field ( None , description = \"The attribute which is used as identity of the LDAP group, default is cn.'\" ) class-attribute ldap_group_search_filter : Optional [ str ] = Field ( None , description = 'The filter to search the ldap group' ) class-attribute ldap_group_search_scope : Optional [ int ] = Field ( None , description = \"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\" ) class-attribute ldap_scope : Optional [ int ] = Field ( None , description = \"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\" ) class-attribute ldap_search_dn : Optional [ str ] = Field ( None , description = 'The DN of the user to do the search.' ) class-attribute ldap_search_password : Optional [ str ] = Field ( None , description = 'The password of the ldap search dn' ) class-attribute ldap_timeout : Optional [ int ] = Field ( None , description = 'Timeout in seconds for connection to LDAP server' ) class-attribute ldap_uid : Optional [ str ] = Field ( None , description = 'The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"' ) class-attribute ldap_url : Optional [ str ] = Field ( None , description = 'The URL of LDAP server' ) class-attribute ldap_verify_cert : Optional [ bool ] = Field ( None , description = 'Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.' ) class-attribute ldap_group_membership_attribute : Optional [ str ] = Field ( None , description = 'The user attribute to identify the group membership' ) class-attribute project_creation_restriction : Optional [ str ] = Field ( None , description = \"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\" ) class-attribute read_only : Optional [ bool ] = Field ( None , description = 'The flag to indicate whether Harbor is in readonly mode.' ) class-attribute self_registration : Optional [ bool ] = Field ( None , description = \"Whether the Harbor instance supports self-registration. If it''s set to false, admin need to add user to the instance.\" ) class-attribute token_expiration : Optional [ int ] = Field ( None , description = 'The expiration time of the token for internal Registry, in minutes.' ) class-attribute uaa_client_id : Optional [ str ] = Field ( None , description = 'The client id of UAA' ) class-attribute uaa_client_secret : Optional [ str ] = Field ( None , description = 'The client secret of the UAA' ) class-attribute uaa_endpoint : Optional [ str ] = Field ( None , description = 'The endpoint of the UAA' ) class-attribute uaa_verify_cert : Optional [ bool ] = Field ( None , description = 'Verify the certificate in UAA server' ) class-attribute http_authproxy_endpoint : Optional [ str ] = Field ( None , description = 'The endpoint of the HTTP auth' ) class-attribute http_authproxy_tokenreview_endpoint : Optional [ str ] = Field ( None , description = 'The token review endpoint' ) class-attribute http_authproxy_admin_groups : Optional [ str ] = Field ( None , description = 'The group which has the harbor admin privileges' ) class-attribute http_authproxy_admin_usernames : Optional [ str ] = Field ( None , description = 'The username which has the harbor admin privileges' ) class-attribute http_authproxy_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the HTTP auth provider's certificate\" ) class-attribute http_authproxy_skip_search : Optional [ bool ] = Field ( None , description = 'Search user before onboard' ) class-attribute http_authproxy_server_certificate : Optional [ str ] = Field ( None , description = 'The certificate of the HTTP auth provider' ) class-attribute oidc_name : Optional [ str ] = Field ( None , description = 'The OIDC provider name' ) class-attribute oidc_endpoint : Optional [ str ] = Field ( None , description = 'The endpoint of the OIDC provider' ) class-attribute oidc_client_id : Optional [ str ] = Field ( None , description = 'The client ID of the OIDC provider' ) class-attribute oidc_client_secret : Optional [ str ] = Field ( None , description = 'The OIDC provider secret' ) class-attribute oidc_groups_claim : Optional [ str ] = Field ( None , description = 'The attribute claims the group name' ) class-attribute oidc_admin_group : Optional [ str ] = Field ( None , description = 'The OIDC group which has the harbor admin privileges' ) class-attribute oidc_scope : Optional [ str ] = Field ( None , description = 'The scope of the OIDC provider' ) class-attribute oidc_user_claim : Optional [ str ] = Field ( None , description = 'The attribute claims the username' ) class-attribute oidc_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the OIDC provider's certificate'\" ) class-attribute oidc_auto_onboard : Optional [ bool ] = Field ( None , description = 'Auto onboard the OIDC user' ) class-attribute oidc_extra_redirect_parms : Optional [ str ] = Field ( None , description = 'Extra parameters to add when redirect request to OIDC provider' ) class-attribute robot_token_duration : Optional [ int ] = Field ( None , description = 'The robot account token duration in days' ) class-attribute robot_name_prefix : Optional [ str ] = Field ( None , description = 'The rebot account name prefix' ) class-attribute notification_enable : Optional [ bool ] = Field ( None , description = 'Enable notification' ) class-attribute quota_per_project_enable : Optional [ bool ] = Field ( None , description = 'Enable quota per project' ) class-attribute storage_per_project : Optional [ int ] = Field ( None , description = 'The storage quota per project' ) class-attribute audit_log_forward_endpoint : Optional [ str ] = Field ( None , description = 'The audit log forward endpoint' ) class-attribute skip_audit_log_database : Optional [ bool ] = Field ( None , description = 'Skip audit log database' ) class-attribute StringConfigItem Source code in harborapi/models/models.py 1357 1358 1359 1360 1361 1362 1363 class StringConfigItem ( BaseModel ): value : Optional [ str ] = Field ( None , description = \"The string value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" ) value : Optional [ str ] = Field ( None , description = 'The string value of current config item' ) class-attribute editable : Optional [ bool ] = Field ( None , description = 'The configure item can be updated or not' ) class-attribute BoolConfigItem Source code in harborapi/models/models.py 1366 1367 1368 1369 1370 1371 1372 class BoolConfigItem ( BaseModel ): value : Optional [ bool ] = Field ( None , description = \"The boolean value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" ) value : Optional [ bool ] = Field ( None , description = 'The boolean value of current config item' ) class-attribute editable : Optional [ bool ] = Field ( None , description = 'The configure item can be updated or not' ) class-attribute IntegerConfigItem Source code in harborapi/models/models.py 1375 1376 1377 1378 1379 1380 1381 class IntegerConfigItem ( BaseModel ): value : Optional [ int ] = Field ( None , description = \"The integer value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" ) value : Optional [ int ] = Field ( None , description = 'The integer value of current config item' ) class-attribute editable : Optional [ bool ] = Field ( None , description = 'The configure item can be updated or not' ) class-attribute ProjectMemberEntity Source code in harborapi/models/models.py 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 class ProjectMemberEntity ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the project member id\" ) project_id : Optional [ int ] = Field ( None , description = \"the project id\" ) entity_name : Optional [ str ] = Field ( None , description = \"the name of the group member.\" ) role_name : Optional [ str ] = Field ( None , description = \"the name of the role\" ) role_id : Optional [ int ] = Field ( None , description = \"the role id\" ) entity_id : Optional [ int ] = Field ( None , description = \"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\" , ) entity_type : Optional [ str ] = Field ( None , description = \"the entity's type, u for user entity, g for group entity.\" ) id : Optional [ int ] = Field ( None , description = 'the project member id' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'the project id' ) class-attribute entity_name : Optional [ str ] = Field ( None , description = 'the name of the group member.' ) class-attribute role_name : Optional [ str ] = Field ( None , description = 'the name of the role' ) class-attribute role_id : Optional [ int ] = Field ( None , description = 'the role id' ) class-attribute entity_id : Optional [ int ] = Field ( None , description = \"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\" ) class-attribute entity_type : Optional [ str ] = Field ( None , description = \"the entity's type, u for user entity, g for group entity.\" ) class-attribute RoleRequest Source code in harborapi/models/models.py 1401 1402 1403 1404 1405 class RoleRequest ( BaseModel ): role_id : Optional [ int ] = Field ( None , description = \"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\" , ) role_id : Optional [ int ] = Field ( None , description = 'The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer' ) class-attribute UserEntity Source code in harborapi/models/models.py 1408 1409 1410 class UserEntity ( BaseModel ): user_id : Optional [ int ] = Field ( None , description = \"The ID of the user.\" ) username : Optional [ str ] = Field ( None , description = \"The name of the user.\" ) user_id : Optional [ int ] = Field ( None , description = 'The ID of the user.' ) class-attribute username : Optional [ str ] = Field ( None , description = 'The name of the user.' ) class-attribute UserProfile Source code in harborapi/models/models.py 1413 1414 1415 1416 class UserProfile ( BaseModel ): email : Optional [ str ] = None realname : Optional [ str ] = None comment : Optional [ str ] = None email : Optional [ str ] = None class-attribute realname : Optional [ str ] = None class-attribute comment : Optional [ str ] = None class-attribute UserCreationReq Source code in harborapi/models/models.py 1419 1420 1421 1422 1423 1424 class UserCreationReq ( BaseModel ): email : Optional [ str ] = Field ( None , max_length = 255 ) realname : Optional [ str ] = None comment : Optional [ str ] = None password : Optional [ str ] = None username : Optional [ str ] = Field ( None , max_length = 255 ) email : Optional [ str ] = Field ( None , max_length = 255 ) class-attribute realname : Optional [ str ] = None class-attribute comment : Optional [ str ] = None class-attribute password : Optional [ str ] = None class-attribute username : Optional [ str ] = Field ( None , max_length = 255 ) class-attribute OIDCUserInfo Source code in harborapi/models/models.py 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 class OIDCUserInfo ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the ID of the OIDC info record\" ) user_id : Optional [ int ] = Field ( None , description = \"the ID of the user\" ) subiss : Optional [ str ] = Field ( None , description = \"the concatenation of sub and issuer in the ID token\" ) secret : Optional [ str ] = Field ( None , description = \"the secret of the OIDC user that can be used for CLI to push/pull artifacts\" , ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the OIDC user info record.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the OIDC user info record.\" ) id : Optional [ int ] = Field ( None , description = 'the ID of the OIDC info record' ) class-attribute user_id : Optional [ int ] = Field ( None , description = 'the ID of the user' ) class-attribute subiss : Optional [ str ] = Field ( None , description = 'the concatenation of sub and issuer in the ID token' ) class-attribute secret : Optional [ str ] = Field ( None , description = 'the secret of the OIDC user that can be used for CLI to push/pull artifacts' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the OIDC user info record.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the OIDC user info record.' ) class-attribute UserResp Source code in harborapi/models/models.py 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 class UserResp ( BaseModel ): email : Optional [ str ] = None realname : Optional [ str ] = None comment : Optional [ str ] = None user_id : Optional [ int ] = None username : Optional [ str ] = None sysadmin_flag : Optional [ bool ] = None admin_role_in_auth : Optional [ bool ] = Field ( None , description = \"indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user\" , ) oidc_user_meta : Optional [ OIDCUserInfo ] = None creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the user.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the user.\" ) email : Optional [ str ] = None class-attribute realname : Optional [ str ] = None class-attribute comment : Optional [ str ] = None class-attribute user_id : Optional [ int ] = None class-attribute username : Optional [ str ] = None class-attribute sysadmin_flag : Optional [ bool ] = None class-attribute admin_role_in_auth : Optional [ bool ] = Field ( None , description = 'indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user' ) class-attribute oidc_user_meta : Optional [ OIDCUserInfo ] = None class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the user.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the user.' ) class-attribute UserSysAdminFlag Source code in harborapi/models/models.py 1465 1466 1467 1468 class UserSysAdminFlag ( BaseModel ): sysadmin_flag : Optional [ bool ] = Field ( None , description = \"true-admin, false-not admin.\" ) sysadmin_flag : Optional [ bool ] = Field ( None , description = 'true-admin, false-not admin.' ) class-attribute UserSearch Source code in harborapi/models/models.py 1471 1472 1473 class UserSearch ( BaseModel ): user_id : Optional [ int ] = Field ( None , description = \"The ID of the user.\" ) username : Optional [ str ] = None user_id : Optional [ int ] = Field ( None , description = 'The ID of the user.' ) class-attribute username : Optional [ str ] = None class-attribute PasswordReq Source code in harborapi/models/models.py 1476 1477 1478 1479 1480 1481 1482 class PasswordReq ( BaseModel ): old_password : Optional [ str ] = Field ( None , description = \"The user's existing password.\" ) new_password : Optional [ str ] = Field ( None , description = \"New password for marking as to be updated.\" ) old_password : Optional [ str ] = Field ( None , description = \"The user's existing password.\" ) class-attribute new_password : Optional [ str ] = Field ( None , description = 'New password for marking as to be updated.' ) class-attribute UserSearchRespItem Source code in harborapi/models/models.py 1485 1486 1487 class UserSearchRespItem ( BaseModel ): user_id : Optional [ int ] = Field ( None , description = \"The ID of the user.\" ) username : Optional [ str ] = None user_id : Optional [ int ] = Field ( None , description = 'The ID of the user.' ) class-attribute username : Optional [ str ] = None class-attribute Permission Source code in harborapi/models/models.py 1490 1491 1492 class Permission ( BaseModel ): resource : Optional [ str ] = Field ( None , description = \"The permission resoruce\" ) action : Optional [ str ] = Field ( None , description = \"The permission action\" ) resource : Optional [ str ] = Field ( None , description = 'The permission resoruce' ) class-attribute action : Optional [ str ] = Field ( None , description = 'The permission action' ) class-attribute OIDCCliSecretReq Source code in harborapi/models/models.py 1495 1496 class OIDCCliSecretReq ( BaseModel ): secret : Optional [ str ] = Field ( None , description = \"The new secret\" ) secret : Optional [ str ] = Field ( None , description = 'The new secret' ) class-attribute ComponentHealthStatus Source code in harborapi/models/models.py 1499 1500 1501 1502 1503 1504 class ComponentHealthStatus ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The component name\" ) status : Optional [ str ] = Field ( None , description = \"The health status of component\" ) error : Optional [ str ] = Field ( None , description = '(optional) The error message when the status is \"unhealthy\"' ) name : Optional [ str ] = Field ( None , description = 'The component name' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The health status of component' ) class-attribute error : Optional [ str ] = Field ( None , description = '(optional) The error message when the status is \"unhealthy\"' ) class-attribute Statistic Source code in harborapi/models/models.py 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 class Statistic ( BaseModel ): private_project_count : Optional [ int ] = Field ( None , description = \"The count of the private projects\" ) private_repo_count : Optional [ int ] = Field ( None , description = \"The count of the private repositories\" ) public_project_count : Optional [ int ] = Field ( None , description = \"The count of the public projects\" ) public_repo_count : Optional [ int ] = Field ( None , description = \"The count of the public repositories\" ) total_project_count : Optional [ int ] = Field ( None , description = \"The count of the total projects, only be seen by the system admin\" , ) total_repo_count : Optional [ int ] = Field ( None , description = \"The count of the total repositories, only be seen by the system admin\" , ) total_storage_consumption : Optional [ int ] = Field ( None , description = \"The total storage consumption of blobs, only be seen by the system admin\" , ) private_project_count : Optional [ int ] = Field ( None , description = 'The count of the private projects' ) class-attribute private_repo_count : Optional [ int ] = Field ( None , description = 'The count of the private repositories' ) class-attribute public_project_count : Optional [ int ] = Field ( None , description = 'The count of the public projects' ) class-attribute public_repo_count : Optional [ int ] = Field ( None , description = 'The count of the public repositories' ) class-attribute total_project_count : Optional [ int ] = Field ( None , description = 'The count of the total projects, only be seen by the system admin' ) class-attribute total_repo_count : Optional [ int ] = Field ( None , description = 'The count of the total repositories, only be seen by the system admin' ) class-attribute total_storage_consumption : Optional [ int ] = Field ( None , description = 'The total storage consumption of blobs, only be seen by the system admin' ) class-attribute Accessory Source code in harborapi/models/models.py 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 class Accessory ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the accessory\" ) artifact_id : Optional [ int ] = Field ( None , description = \"The artifact id of the accessory\" ) subject_artifact_id : Optional [ int ] = Field ( None , description = \"The subject artifact id of the accessory\" ) size : Optional [ int ] = Field ( None , description = \"The artifact size of the accessory\" ) digest : Optional [ str ] = Field ( None , description = \"The artifact digest of the accessory\" ) type : Optional [ str ] = Field ( None , description = \"The artifact size of the accessory\" ) icon : Optional [ str ] = Field ( None , description = \"The icon of the accessory\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the accessory\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the accessory' ) class-attribute artifact_id : Optional [ int ] = Field ( None , description = 'The artifact id of the accessory' ) class-attribute subject_artifact_id : Optional [ int ] = Field ( None , description = 'The subject artifact id of the accessory' ) class-attribute size : Optional [ int ] = Field ( None , description = 'The artifact size of the accessory' ) class-attribute digest : Optional [ str ] = Field ( None , description = 'The artifact digest of the accessory' ) class-attribute type : Optional [ str ] = Field ( None , description = 'The artifact size of the accessory' ) class-attribute icon : Optional [ str ] = Field ( None , description = 'The icon of the accessory' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the accessory' ) class-attribute Errors Source code in harborapi/models/models.py 1553 1554 class Errors ( BaseModel ): errors : Optional [ List [ Error ]] = None errors : Optional [ List [ Error ]] = None class-attribute ChartVersion Source code in harborapi/models/models.py 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 class ChartVersion ( ChartMetadata ): created : Optional [ str ] = Field ( None , description = \"The created time of the chart entry\" ) removed : Optional [ bool ] = Field ( None , description = \"A flag to indicate if the chart entry is removed\" ) digest : Optional [ str ] = Field ( None , description = \"The digest value of the chart entry\" ) urls : Optional [ List [ str ]] = Field ( None , description = \"The urls of the chart entry\" ) labels : Optional [ List [ Label ]] = Field ( None , description = \"A list of label\" ) created : Optional [ str ] = Field ( None , description = 'The created time of the chart entry' ) class-attribute removed : Optional [ bool ] = Field ( None , description = 'A flag to indicate if the chart entry is removed' ) class-attribute digest : Optional [ str ] = Field ( None , description = 'The digest value of the chart entry' ) class-attribute urls : Optional [ List [ str ]] = Field ( None , description = 'The urls of the chart entry' ) class-attribute labels : Optional [ List [ Label ]] = Field ( None , description = 'A list of label' ) class-attribute Reference Source code in harborapi/models/models.py 1571 1572 1573 1574 1575 1576 1577 1578 1579 class Reference ( BaseModel ): parent_id : Optional [ int ] = Field ( None , description = \"The parent ID of the reference\" ) child_id : Optional [ int ] = Field ( None , description = \"The child ID of the reference\" ) child_digest : Optional [ str ] = Field ( None , description = \"The digest of the child artifact\" ) platform : Optional [ Platform ] = None annotations : Optional [ Annotations ] = None urls : Optional [ List [ str ]] = Field ( None , description = \"The download URLs\" ) parent_id : Optional [ int ] = Field ( None , description = 'The parent ID of the reference' ) class-attribute child_id : Optional [ int ] = Field ( None , description = 'The child ID of the reference' ) class-attribute child_digest : Optional [ str ] = Field ( None , description = 'The digest of the child artifact' ) class-attribute platform : Optional [ Platform ] = None class-attribute annotations : Optional [ Annotations ] = None class-attribute urls : Optional [ List [ str ]] = Field ( None , description = 'The download URLs' ) class-attribute NativeReportSummary Source code in harborapi/models/models.py 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 class NativeReportSummary ( BaseModel ): report_id : Optional [ str ] = Field ( None , description = \"id of the native scan report\" , example = \"5f62c830-f996-11e9-957f-0242c0a89008\" , ) scan_status : Optional [ str ] = Field ( None , description = \"The status of the report generating process\" , example = \"Success\" , ) severity : Optional [ str ] = Field ( None , description = \"The overall severity\" , example = \"High\" ) duration : Optional [ int ] = Field ( None , description = \"The seconds spent for generating the report\" , example = 300 ) summary : Optional [ VulnerabilitySummary ] = None start_time : Optional [ datetime ] = Field ( None , description = \"The start time of the scan process that generating report\" , example = \"2006-01-02T14:04:05Z\" , ) end_time : Optional [ datetime ] = Field ( None , description = \"The end time of the scan process that generating report\" , example = \"2006-01-02T15:04:05Z\" , ) complete_percent : Optional [ int ] = Field ( None , description = \"The complete percent of the scanning which value is between 0 and 100\" , example = 100 , ) scanner : Optional [ Scanner ] = None report_id : Optional [ str ] = Field ( None , description = 'id of the native scan report' , example = '5f62c830-f996-11e9-957f-0242c0a89008' ) class-attribute scan_status : Optional [ str ] = Field ( None , description = 'The status of the report generating process' , example = 'Success' ) class-attribute severity : Optional [ str ] = Field ( None , description = 'The overall severity' , example = 'High' ) class-attribute duration : Optional [ int ] = Field ( None , description = 'The seconds spent for generating the report' , example = 300 ) class-attribute summary : Optional [ VulnerabilitySummary ] = None class-attribute start_time : Optional [ datetime ] = Field ( None , description = 'The start time of the scan process that generating report' , example = '2006-01-02T14:04:05Z' ) class-attribute end_time : Optional [ datetime ] = Field ( None , description = 'The end time of the scan process that generating report' , example = '2006-01-02T15:04:05Z' ) class-attribute complete_percent : Optional [ int ] = Field ( None , description = 'The complete percent of the scanning which value is between 0 and 100' , example = 100 ) class-attribute scanner : Optional [ Scanner ] = None class-attribute ProjectSummaryQuota Source code in harborapi/models/models.py 1618 1619 1620 1621 1622 1623 1624 class ProjectSummaryQuota ( BaseModel ): hard : Optional [ ResourceList ] = Field ( None , description = \"The hard limits of the quota\" ) used : Optional [ ResourceList ] = Field ( None , description = \"The used status of the quota\" ) hard : Optional [ ResourceList ] = Field ( None , description = 'The hard limits of the quota' ) class-attribute used : Optional [ ResourceList ] = Field ( None , description = 'The used status of the quota' ) class-attribute CVEAllowlist Source code in harborapi/models/models.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 class CVEAllowlist ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"ID of the allowlist\" ) project_id : Optional [ int ] = Field ( None , description = \"ID of the project which the allowlist belongs to. For system level allowlist this attribute is zero.\" , ) expires_at : Optional [ int ] = Field ( None , description = \"the time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.\" , ) items : Optional [ List [ CVEAllowlistItem ]] = None creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the allowlist.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the allowlist.\" ) id : Optional [ int ] = Field ( None , description = 'ID of the allowlist' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'ID of the project which the allowlist belongs to. For system level allowlist this attribute is zero.' ) class-attribute expires_at : Optional [ int ] = Field ( None , description = \"the time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.\" ) class-attribute items : Optional [ List [ CVEAllowlistItem ]] = None class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the allowlist.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the allowlist.' ) class-attribute ReplicationTrigger Source code in harborapi/models/models.py 1646 1647 1648 1649 1650 1651 class ReplicationTrigger ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The replication policy trigger type. The valid values are manual, event_based and scheduled.\" , ) trigger_settings : Optional [ ReplicationTriggerSettings ] = None type : Optional [ str ] = Field ( None , description = 'The replication policy trigger type. The valid values are manual, event_based and scheduled.' ) class-attribute trigger_settings : Optional [ ReplicationTriggerSettings ] = None class-attribute RegistryInfo Source code in harborapi/models/models.py 1654 1655 1656 1657 1658 1659 1660 1661 1662 class RegistryInfo ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The registry type\" ) description : Optional [ str ] = Field ( None , description = \"The description\" ) supported_resource_filters : Optional [ List [ FilterStyle ]] = Field ( None , description = \"The filters that the registry supports\" ) supported_triggers : Optional [ List [ str ]] = Field ( None , description = \"The triggers that the registry supports\" ) type : Optional [ str ] = Field ( None , description = 'The registry type' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description' ) class-attribute supported_resource_filters : Optional [ List [ FilterStyle ]] = Field ( None , description = 'The filters that the registry supports' ) class-attribute supported_triggers : Optional [ List [ str ]] = Field ( None , description = 'The triggers that the registry supports' ) class-attribute RegistryProviderEndpointPattern Source code in harborapi/models/models.py 1665 1666 1667 1668 1669 class RegistryProviderEndpointPattern ( BaseModel ): endpoint_type : Optional [ str ] = Field ( None , description = \"The endpoint type\" ) endpoints : Optional [ List [ RegistryEndpoint ]] = Field ( None , description = \"The endpoint list\" ) endpoint_type : Optional [ str ] = Field ( None , description = 'The endpoint type' ) class-attribute endpoints : Optional [ List [ RegistryEndpoint ]] = Field ( None , description = 'The endpoint list' ) class-attribute RobotPermission Source code in harborapi/models/models.py 1672 1673 1674 1675 1676 1677 class RobotPermission ( BaseModel ): kind : Optional [ str ] = Field ( None , description = \"The kind of the permission\" ) namespace : Optional [ str ] = Field ( None , description = \"The namespace of the permission\" ) access : Optional [ List [ Access ]] = None kind : Optional [ str ] = Field ( None , description = 'The kind of the permission' ) class-attribute namespace : Optional [ str ] = Field ( None , description = 'The namespace of the permission' ) class-attribute access : Optional [ List [ Access ]] = None class-attribute GeneralInfo Source code in harborapi/models/models.py 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 class GeneralInfo ( BaseModel ): current_time : Optional [ datetime ] = Field ( None , description = \"The current time of the server.\" ) with_notary : Optional [ bool ] = Field ( None , description = \"If the Harbor instance is deployed with nested notary.\" ) with_chartmuseum : Optional [ bool ] = Field ( None , description = \"If the Harbor instance is deployed with nested chartmuseum.\" ) registry_url : Optional [ str ] = Field ( None , description = \"The url of registry against which the docker command should be issued.\" , ) external_url : Optional [ str ] = Field ( None , description = \"The external URL of Harbor, with protocol.\" ) auth_mode : Optional [ str ] = Field ( None , description = \"The auth mode of current Harbor instance.\" ) project_creation_restriction : Optional [ str ] = Field ( None , description = \"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\" , ) self_registration : Optional [ bool ] = Field ( None , description = \"Indicate whether the Harbor instance enable user to register himself.\" , ) has_ca_root : Optional [ bool ] = Field ( None , description = \"Indicate whether there is a ca root cert file ready for download in the file system.\" , ) harbor_version : Optional [ str ] = Field ( None , description = \"The build version of Harbor.\" ) registry_storage_provider_name : Optional [ str ] = Field ( None , description = \"The storage provider's name of Harbor registry\" ) read_only : Optional [ bool ] = Field ( None , description = \"The flag to indicate whether Harbor is in readonly mode.\" ) notification_enable : Optional [ bool ] = Field ( None , description = \"The flag to indicate whether notification mechanism is enabled on Harbor instance.\" , ) authproxy_settings : Optional [ AuthproxySetting ] = Field ( None , description = \"The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.\" , ) current_time : Optional [ datetime ] = Field ( None , description = 'The current time of the server.' ) class-attribute with_notary : Optional [ bool ] = Field ( None , description = 'If the Harbor instance is deployed with nested notary.' ) class-attribute with_chartmuseum : Optional [ bool ] = Field ( None , description = 'If the Harbor instance is deployed with nested chartmuseum.' ) class-attribute registry_url : Optional [ str ] = Field ( None , description = 'The url of registry against which the docker command should be issued.' ) class-attribute external_url : Optional [ str ] = Field ( None , description = 'The external URL of Harbor, with protocol.' ) class-attribute auth_mode : Optional [ str ] = Field ( None , description = 'The auth mode of current Harbor instance.' ) class-attribute project_creation_restriction : Optional [ str ] = Field ( None , description = \"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\" ) class-attribute self_registration : Optional [ bool ] = Field ( None , description = 'Indicate whether the Harbor instance enable user to register himself.' ) class-attribute has_ca_root : Optional [ bool ] = Field ( None , description = 'Indicate whether there is a ca root cert file ready for download in the file system.' ) class-attribute harbor_version : Optional [ str ] = Field ( None , description = 'The build version of Harbor.' ) class-attribute registry_storage_provider_name : Optional [ str ] = Field ( None , description = \"The storage provider's name of Harbor registry\" ) class-attribute read_only : Optional [ bool ] = Field ( None , description = 'The flag to indicate whether Harbor is in readonly mode.' ) class-attribute notification_enable : Optional [ bool ] = Field ( None , description = 'The flag to indicate whether notification mechanism is enabled on Harbor instance.' ) class-attribute authproxy_settings : Optional [ AuthproxySetting ] = Field ( None , description = 'The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.' ) class-attribute GCHistory Source code in harborapi/models/models.py 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 class GCHistory ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the id of gc job.\" ) job_name : Optional [ str ] = Field ( None , description = \"the job name of gc job.\" ) job_kind : Optional [ str ] = Field ( None , description = \"the job kind of gc job.\" ) job_parameters : Optional [ str ] = Field ( None , description = \"the job parameters of gc job.\" ) schedule : Optional [ ScheduleObj ] = None job_status : Optional [ str ] = Field ( None , description = \"the status of gc job.\" ) deleted : Optional [ bool ] = Field ( None , description = \"if gc job was deleted.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of gc job.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of gc job.\" ) id : Optional [ int ] = Field ( None , description = 'the id of gc job.' ) class-attribute job_name : Optional [ str ] = Field ( None , description = 'the job name of gc job.' ) class-attribute job_kind : Optional [ str ] = Field ( None , description = 'the job kind of gc job.' ) class-attribute job_parameters : Optional [ str ] = Field ( None , description = 'the job parameters of gc job.' ) class-attribute schedule : Optional [ ScheduleObj ] = None class-attribute job_status : Optional [ str ] = Field ( None , description = 'the status of gc job.' ) class-attribute deleted : Optional [ bool ] = Field ( None , description = 'if gc job was deleted.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'the creation time of gc job.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'the update time of gc job.' ) class-attribute ExecHistory Source code in harborapi/models/models.py 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 class ExecHistory ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the id of purge job.\" ) job_name : Optional [ str ] = Field ( None , description = \"the job name of purge job.\" ) job_kind : Optional [ str ] = Field ( None , description = \"the job kind of purge job.\" ) job_parameters : Optional [ str ] = Field ( None , description = \"the job parameters of purge job.\" ) schedule : Optional [ ScheduleObj ] = None job_status : Optional [ str ] = Field ( None , description = \"the status of purge job.\" ) deleted : Optional [ bool ] = Field ( None , description = \"if purge job was deleted.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of purge job.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of purge job.\" ) id : Optional [ int ] = Field ( None , description = 'the id of purge job.' ) class-attribute job_name : Optional [ str ] = Field ( None , description = 'the job name of purge job.' ) class-attribute job_kind : Optional [ str ] = Field ( None , description = 'the job kind of purge job.' ) class-attribute job_parameters : Optional [ str ] = Field ( None , description = 'the job parameters of purge job.' ) class-attribute schedule : Optional [ ScheduleObj ] = None class-attribute job_status : Optional [ str ] = Field ( None , description = 'the status of purge job.' ) class-attribute deleted : Optional [ bool ] = Field ( None , description = 'if purge job was deleted.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'the creation time of purge job.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'the update time of purge job.' ) class-attribute Schedule Source code in harborapi/models/models.py 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 class Schedule ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The id of the schedule.\" ) status : Optional [ str ] = Field ( None , description = \"The status of the schedule.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of the schedule.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of the schedule.\" ) schedule : Optional [ ScheduleObj ] = None parameters : Optional [ Dict [ str , Dict [ str , Any ]]] = Field ( None , description = \"The parameters of schedule job\" ) id : Optional [ int ] = Field ( None , description = 'The id of the schedule.' ) class-attribute status : Optional [ str ] = Field ( None , description = 'The status of the schedule.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'the creation time of the schedule.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'the update time of the schedule.' ) class-attribute schedule : Optional [ ScheduleObj ] = None class-attribute parameters : Optional [ Dict [ str , Dict [ str , Any ]]] = Field ( None , description = 'The parameters of schedule job' ) class-attribute RetentionRuleMetadata Source code in harborapi/models/models.py 1782 1783 1784 1785 1786 1787 1788 class RetentionRuleMetadata ( BaseModel ): rule_template : Optional [ str ] = Field ( None , description = \"rule id\" ) display_text : Optional [ str ] = Field ( None , description = \"rule display text\" ) action : Optional [ str ] = Field ( None , description = \"rule action\" ) params : Optional [ List [ RetentionRuleParamMetadata ]] = Field ( None , description = \"rule params\" ) rule_template : Optional [ str ] = Field ( None , description = 'rule id' ) class-attribute display_text : Optional [ str ] = Field ( None , description = 'rule display text' ) class-attribute action : Optional [ str ] = Field ( None , description = 'rule action' ) class-attribute params : Optional [ List [ RetentionRuleParamMetadata ]] = Field ( None , description = 'rule params' ) class-attribute RetentionRule Source code in harborapi/models/models.py 1791 1792 1793 1794 1795 1796 1797 1798 1799 class RetentionRule ( BaseModel ): id : Optional [ int ] = None priority : Optional [ int ] = None disabled : Optional [ bool ] = None action : Optional [ str ] = None template : Optional [ str ] = None params : Optional [ Dict [ str , Dict [ str , Any ]]] = None tag_selectors : Optional [ List [ RetentionSelector ]] = None scope_selectors : Optional [ Dict [ str , List [ RetentionSelector ]]] = None id : Optional [ int ] = None class-attribute priority : Optional [ int ] = None class-attribute disabled : Optional [ bool ] = None class-attribute action : Optional [ str ] = None class-attribute template : Optional [ str ] = None class-attribute params : Optional [ Dict [ str , Dict [ str , Any ]]] = None class-attribute tag_selectors : Optional [ List [ RetentionSelector ]] = None class-attribute scope_selectors : Optional [ Dict [ str , List [ RetentionSelector ]]] = None class-attribute ImmutableRule Source code in harborapi/models/models.py 1802 1803 1804 1805 1806 1807 1808 1809 1810 class ImmutableRule ( BaseModel ): id : Optional [ int ] = None priority : Optional [ int ] = None disabled : Optional [ bool ] = None action : Optional [ str ] = None template : Optional [ str ] = None params : Optional [ Dict [ str , Dict [ str , Any ]]] = None tag_selectors : Optional [ List [ ImmutableSelector ]] = None scope_selectors : Optional [ Dict [ str , List [ ImmutableSelector ]]] = None id : Optional [ int ] = None class-attribute priority : Optional [ int ] = None class-attribute disabled : Optional [ bool ] = None class-attribute action : Optional [ str ] = None class-attribute template : Optional [ str ] = None class-attribute params : Optional [ Dict [ str , Dict [ str , Any ]]] = None class-attribute tag_selectors : Optional [ List [ ImmutableSelector ]] = None class-attribute scope_selectors : Optional [ Dict [ str , List [ ImmutableSelector ]]] = None class-attribute SupportedWebhookEventTypes Source code in harborapi/models/models.py 1813 1814 1815 class SupportedWebhookEventTypes ( BaseModel ): event_type : Optional [ List [ EventType ]] = None notify_type : Optional [ List [ NotifyType ]] = None event_type : Optional [ List [ EventType ]] = None class-attribute notify_type : Optional [ List [ NotifyType ]] = None class-attribute ConfigurationsResponse Source code in harborapi/models/models.py 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 class ConfigurationsResponse ( BaseModel ): auth_mode : Optional [ StringConfigItem ] = Field ( None , description = 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"' , ) email_from : Optional [ StringConfigItem ] = Field ( None , description = \"The sender name for Email notification.\" ) email_host : Optional [ StringConfigItem ] = Field ( None , description = \"The hostname of SMTP server that sends Email notification.\" ) email_identity : Optional [ StringConfigItem ] = Field ( None , description = \"By default it's empty so the email_username is picked\" ) email_insecure : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the email server.\" , ) email_port : Optional [ IntegerConfigItem ] = Field ( None , description = \"The port of SMTP server\" ) email_ssl : Optional [ BoolConfigItem ] = Field ( None , description = \"When it''s set to true the system will access Email server via TLS by default. If it''s set to false, it still will handle \\\" STARTTLS \\\" from server side.\" , ) email_username : Optional [ StringConfigItem ] = Field ( None , description = \"The username for authenticate against SMTP server\" ) ldap_base_dn : Optional [ StringConfigItem ] = Field ( None , description = \"The Base DN for LDAP binding.\" ) ldap_filter : Optional [ StringConfigItem ] = Field ( None , description = \"The filter for LDAP search\" ) ldap_group_base_dn : Optional [ StringConfigItem ] = Field ( None , description = \"The base DN to search LDAP group.\" ) ldap_group_admin_dn : Optional [ StringConfigItem ] = Field ( None , description = \"Specify the ldap group which have the same privilege with Harbor admin\" , ) ldap_group_attribute_name : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute which is used as identity of the LDAP group, default is cn.'\" , ) ldap_group_search_filter : Optional [ StringConfigItem ] = Field ( None , description = \"The filter to search the ldap group\" ) ldap_group_search_scope : Optional [ IntegerConfigItem ] = Field ( None , description = \"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\" , ) ldap_scope : Optional [ IntegerConfigItem ] = Field ( None , description = \"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\" , ) ldap_search_dn : Optional [ StringConfigItem ] = Field ( None , description = \"The DN of the user to do the search.\" ) ldap_timeout : Optional [ IntegerConfigItem ] = Field ( None , description = \"Timeout in seconds for connection to LDAP server\" ) ldap_uid : Optional [ StringConfigItem ] = Field ( None , description = 'The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"' , ) ldap_url : Optional [ StringConfigItem ] = Field ( None , description = \"The URL of LDAP server\" ) ldap_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.\" , ) ldap_group_membership_attribute : Optional [ StringConfigItem ] = Field ( None , description = \"The user attribute to identify the group membership\" ) project_creation_restriction : Optional [ StringConfigItem ] = Field ( None , description = \"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\" , ) read_only : Optional [ BoolConfigItem ] = Field ( None , description = \"The flag to indicate whether Harbor is in readonly mode.\" ) self_registration : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether the Harbor instance supports self-registration. If it''s set to false, admin need to add user to the instance.\" , ) token_expiration : Optional [ IntegerConfigItem ] = Field ( None , description = \"The expiration time of the token for internal Registry, in minutes.\" , ) uaa_client_id : Optional [ StringConfigItem ] = Field ( None , description = \"The client id of UAA\" ) uaa_client_secret : Optional [ StringConfigItem ] = Field ( None , description = \"The client secret of the UAA\" ) uaa_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the UAA\" ) uaa_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the certificate in UAA server\" ) http_authproxy_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the HTTP auth\" ) http_authproxy_tokenreview_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The token review endpoint\" ) http_authproxy_admin_groups : Optional [ StringConfigItem ] = Field ( None , description = \"The group which has the harbor admin privileges\" ) http_authproxy_admin_usernames : Optional [ StringConfigItem ] = Field ( None , description = \"The usernames which has the harbor admin privileges\" ) http_authproxy_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the HTTP auth provider's certificate\" ) http_authproxy_skip_search : Optional [ BoolConfigItem ] = Field ( None , description = \"Search user before onboard\" ) http_authproxy_server_certificate : Optional [ StringConfigItem ] = Field ( None , description = \"The certificate of the HTTP auth provider\" ) oidc_name : Optional [ StringConfigItem ] = Field ( None , description = \"The OIDC provider name\" ) oidc_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the OIDC provider\" ) oidc_client_id : Optional [ StringConfigItem ] = Field ( None , description = \"The client ID of the OIDC provider\" ) oidc_groups_claim : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute claims the group name\" ) oidc_admin_group : Optional [ StringConfigItem ] = Field ( None , description = \"The OIDC group which has the harbor admin privileges\" ) oidc_scope : Optional [ StringConfigItem ] = Field ( None , description = \"The scope of the OIDC provider\" ) oidc_user_claim : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute claims the username\" ) oidc_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the OIDC provider's certificate'\" ) oidc_auto_onboard : Optional [ BoolConfigItem ] = Field ( None , description = \"Auto onboard the OIDC user\" ) oidc_extra_redirect_parms : Optional [ StringConfigItem ] = Field ( None , description = \"Extra parameters to add when redirect request to OIDC provider\" , ) robot_token_duration : Optional [ IntegerConfigItem ] = Field ( None , description = \"The robot account token duration in days\" ) robot_name_prefix : Optional [ StringConfigItem ] = Field ( None , description = \"The rebot account name prefix\" ) notification_enable : Optional [ BoolConfigItem ] = Field ( None , description = \"Enable notification\" ) quota_per_project_enable : Optional [ BoolConfigItem ] = Field ( None , description = \"Enable quota per project\" ) storage_per_project : Optional [ IntegerConfigItem ] = Field ( None , description = \"The storage quota per project\" ) audit_log_forward_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the audit log forwarder\" ) skip_audit_log_database : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether skip the audit log in database\" ) scan_all_policy : Optional [ ScanAllPolicy ] = None auth_mode : Optional [ StringConfigItem ] = Field ( None , description = 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"' ) class-attribute email_from : Optional [ StringConfigItem ] = Field ( None , description = 'The sender name for Email notification.' ) class-attribute email_host : Optional [ StringConfigItem ] = Field ( None , description = 'The hostname of SMTP server that sends Email notification.' ) class-attribute email_identity : Optional [ StringConfigItem ] = Field ( None , description = \"By default it's empty so the email_username is picked\" ) class-attribute email_insecure : Optional [ BoolConfigItem ] = Field ( None , description = 'Whether or not the certificate will be verified when Harbor tries to access the email server.' ) class-attribute email_port : Optional [ IntegerConfigItem ] = Field ( None , description = 'The port of SMTP server' ) class-attribute email_ssl : Optional [ BoolConfigItem ] = Field ( None , description = 'When it \\'\\' s set to true the system will access Email server via TLS by default. If it \\'\\' s set to false, it still will handle \"STARTTLS\" from server side.' ) class-attribute email_username : Optional [ StringConfigItem ] = Field ( None , description = 'The username for authenticate against SMTP server' ) class-attribute ldap_base_dn : Optional [ StringConfigItem ] = Field ( None , description = 'The Base DN for LDAP binding.' ) class-attribute ldap_filter : Optional [ StringConfigItem ] = Field ( None , description = 'The filter for LDAP search' ) class-attribute ldap_group_base_dn : Optional [ StringConfigItem ] = Field ( None , description = 'The base DN to search LDAP group.' ) class-attribute ldap_group_admin_dn : Optional [ StringConfigItem ] = Field ( None , description = 'Specify the ldap group which have the same privilege with Harbor admin' ) class-attribute ldap_group_attribute_name : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute which is used as identity of the LDAP group, default is cn.'\" ) class-attribute ldap_group_search_filter : Optional [ StringConfigItem ] = Field ( None , description = 'The filter to search the ldap group' ) class-attribute ldap_group_search_scope : Optional [ IntegerConfigItem ] = Field ( None , description = \"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\" ) class-attribute ldap_scope : Optional [ IntegerConfigItem ] = Field ( None , description = \"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\" ) class-attribute ldap_search_dn : Optional [ StringConfigItem ] = Field ( None , description = 'The DN of the user to do the search.' ) class-attribute ldap_timeout : Optional [ IntegerConfigItem ] = Field ( None , description = 'Timeout in seconds for connection to LDAP server' ) class-attribute ldap_uid : Optional [ StringConfigItem ] = Field ( None , description = 'The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"' ) class-attribute ldap_url : Optional [ StringConfigItem ] = Field ( None , description = 'The URL of LDAP server' ) class-attribute ldap_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = 'Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.' ) class-attribute ldap_group_membership_attribute : Optional [ StringConfigItem ] = Field ( None , description = 'The user attribute to identify the group membership' ) class-attribute project_creation_restriction : Optional [ StringConfigItem ] = Field ( None , description = \"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\" ) class-attribute read_only : Optional [ BoolConfigItem ] = Field ( None , description = 'The flag to indicate whether Harbor is in readonly mode.' ) class-attribute self_registration : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether the Harbor instance supports self-registration. If it''s set to false, admin need to add user to the instance.\" ) class-attribute token_expiration : Optional [ IntegerConfigItem ] = Field ( None , description = 'The expiration time of the token for internal Registry, in minutes.' ) class-attribute uaa_client_id : Optional [ StringConfigItem ] = Field ( None , description = 'The client id of UAA' ) class-attribute uaa_client_secret : Optional [ StringConfigItem ] = Field ( None , description = 'The client secret of the UAA' ) class-attribute uaa_endpoint : Optional [ StringConfigItem ] = Field ( None , description = 'The endpoint of the UAA' ) class-attribute uaa_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = 'Verify the certificate in UAA server' ) class-attribute http_authproxy_endpoint : Optional [ StringConfigItem ] = Field ( None , description = 'The endpoint of the HTTP auth' ) class-attribute http_authproxy_tokenreview_endpoint : Optional [ StringConfigItem ] = Field ( None , description = 'The token review endpoint' ) class-attribute http_authproxy_admin_groups : Optional [ StringConfigItem ] = Field ( None , description = 'The group which has the harbor admin privileges' ) class-attribute http_authproxy_admin_usernames : Optional [ StringConfigItem ] = Field ( None , description = 'The usernames which has the harbor admin privileges' ) class-attribute http_authproxy_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the HTTP auth provider's certificate\" ) class-attribute http_authproxy_skip_search : Optional [ BoolConfigItem ] = Field ( None , description = 'Search user before onboard' ) class-attribute http_authproxy_server_certificate : Optional [ StringConfigItem ] = Field ( None , description = 'The certificate of the HTTP auth provider' ) class-attribute oidc_name : Optional [ StringConfigItem ] = Field ( None , description = 'The OIDC provider name' ) class-attribute oidc_endpoint : Optional [ StringConfigItem ] = Field ( None , description = 'The endpoint of the OIDC provider' ) class-attribute oidc_client_id : Optional [ StringConfigItem ] = Field ( None , description = 'The client ID of the OIDC provider' ) class-attribute oidc_groups_claim : Optional [ StringConfigItem ] = Field ( None , description = 'The attribute claims the group name' ) class-attribute oidc_admin_group : Optional [ StringConfigItem ] = Field ( None , description = 'The OIDC group which has the harbor admin privileges' ) class-attribute oidc_scope : Optional [ StringConfigItem ] = Field ( None , description = 'The scope of the OIDC provider' ) class-attribute oidc_user_claim : Optional [ StringConfigItem ] = Field ( None , description = 'The attribute claims the username' ) class-attribute oidc_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the OIDC provider's certificate'\" ) class-attribute oidc_auto_onboard : Optional [ BoolConfigItem ] = Field ( None , description = 'Auto onboard the OIDC user' ) class-attribute oidc_extra_redirect_parms : Optional [ StringConfigItem ] = Field ( None , description = 'Extra parameters to add when redirect request to OIDC provider' ) class-attribute robot_token_duration : Optional [ IntegerConfigItem ] = Field ( None , description = 'The robot account token duration in days' ) class-attribute robot_name_prefix : Optional [ StringConfigItem ] = Field ( None , description = 'The rebot account name prefix' ) class-attribute notification_enable : Optional [ BoolConfigItem ] = Field ( None , description = 'Enable notification' ) class-attribute quota_per_project_enable : Optional [ BoolConfigItem ] = Field ( None , description = 'Enable quota per project' ) class-attribute storage_per_project : Optional [ IntegerConfigItem ] = Field ( None , description = 'The storage quota per project' ) class-attribute audit_log_forward_endpoint : Optional [ StringConfigItem ] = Field ( None , description = 'The endpoint of the audit log forwarder' ) class-attribute skip_audit_log_database : Optional [ BoolConfigItem ] = Field ( None , description = 'Whether skip the audit log in database' ) class-attribute scan_all_policy : Optional [ ScanAllPolicy ] = None class-attribute ProjectMember Source code in harborapi/models/models.py 1997 1998 1999 2000 2001 2002 2003 class ProjectMember ( BaseModel ): role_id : Optional [ int ] = Field ( None , description = \"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\" , ) member_user : Optional [ UserEntity ] = None member_group : Optional [ UserGroup ] = None role_id : Optional [ int ] = Field ( None , description = 'The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer' ) class-attribute member_user : Optional [ UserEntity ] = None class-attribute member_group : Optional [ UserGroup ] = None class-attribute OverallHealthStatus Source code in harborapi/models/models.py 2006 2007 2008 2009 2010 2011 class OverallHealthStatus ( BaseModel ): status : Optional [ str ] = Field ( None , description = 'The overall health status. It is \"healthy\" only when all the components \\' status are \"healthy\"' , ) components : Optional [ List [ ComponentHealthStatus ]] = None status : Optional [ str ] = Field ( None , description = 'The overall health status. It is \"healthy\" only when all the components \\' status are \"healthy\"' ) class-attribute components : Optional [ List [ ComponentHealthStatus ]] = None class-attribute SearchResult Source code in harborapi/models/models.py 2014 2015 2016 2017 2018 2019 class SearchResult ( BaseModel ): name : Optional [ str ] = Field ( None , alias = \"Name\" , description = \"The chart name with repo name\" ) score : Optional [ int ] = Field ( None , alias = \"Score\" , description = \"The matched level\" ) chart : Optional [ ChartVersion ] = Field ( None , alias = \"Chart\" ) name : Optional [ str ] = Field ( None , alias = 'Name' , description = 'The chart name with repo name' ) class-attribute score : Optional [ int ] = Field ( None , alias = 'Score' , description = 'The matched level' ) class-attribute chart : Optional [ ChartVersion ] = Field ( None , alias = 'Chart' ) class-attribute Artifact Source code in harborapi/models/models.py 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 class Artifact ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the artifact\" ) type : Optional [ str ] = Field ( None , description = \"The type of the artifact, e.g. image, chart, etc\" ) media_type : Optional [ str ] = Field ( None , description = \"The media type of the artifact\" ) manifest_media_type : Optional [ str ] = Field ( None , description = \"The manifest media type of the artifact\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of the project that the artifact belongs to\" ) repository_id : Optional [ int ] = Field ( None , description = \"The ID of the repository that the artifact belongs to\" ) digest : Optional [ str ] = Field ( None , description = \"The digest of the artifact\" ) size : Optional [ int ] = Field ( None , description = \"The size of the artifact\" ) icon : Optional [ str ] = Field ( None , description = \"The digest of the icon\" ) push_time : Optional [ datetime ] = Field ( None , description = \"The push time of the artifact\" ) pull_time : Optional [ datetime ] = Field ( None , description = \"The latest pull time of the artifact\" ) extra_attrs : Optional [ ExtraAttrs ] = None annotations : Optional [ Annotations ] = None references : Optional [ List [ Reference ]] = None tags : Optional [ List [ Tag ]] = None addition_links : Optional [ AdditionLinks ] = None labels : Optional [ List [ Label ]] = None scan_overview : Optional [ ScanOverview ] = Field ( None , description = \"The overview of the scan result.\" ) # TODO: change type to Optional[Union[ScanOverview, NativeReportSummary]] accessories : Optional [ List [ Accessory ]] = None id : Optional [ int ] = Field ( None , description = 'The ID of the artifact' ) class-attribute type : Optional [ str ] = Field ( None , description = 'The type of the artifact, e.g. image, chart, etc' ) class-attribute media_type : Optional [ str ] = Field ( None , description = 'The media type of the artifact' ) class-attribute manifest_media_type : Optional [ str ] = Field ( None , description = 'The manifest media type of the artifact' ) class-attribute project_id : Optional [ int ] = Field ( None , description = 'The ID of the project that the artifact belongs to' ) class-attribute repository_id : Optional [ int ] = Field ( None , description = 'The ID of the repository that the artifact belongs to' ) class-attribute digest : Optional [ str ] = Field ( None , description = 'The digest of the artifact' ) class-attribute size : Optional [ int ] = Field ( None , description = 'The size of the artifact' ) class-attribute icon : Optional [ str ] = Field ( None , description = 'The digest of the icon' ) class-attribute push_time : Optional [ datetime ] = Field ( None , description = 'The push time of the artifact' ) class-attribute pull_time : Optional [ datetime ] = Field ( None , description = 'The latest pull time of the artifact' ) class-attribute extra_attrs : Optional [ ExtraAttrs ] = None class-attribute annotations : Optional [ Annotations ] = None class-attribute references : Optional [ List [ Reference ]] = None class-attribute tags : Optional [ List [ Tag ]] = None class-attribute addition_links : Optional [ AdditionLinks ] = None class-attribute labels : Optional [ List [ Label ]] = None class-attribute scan_overview : Optional [ ScanOverview ] = Field ( None , description = 'The overview of the scan result.' ) class-attribute accessories : Optional [ List [ Accessory ]] = None class-attribute ProjectReq Source code in harborapi/models/models.py 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 class ProjectReq ( BaseModel ): project_name : Optional [ str ] = Field ( None , description = \"The name of the project.\" , max_length = 255 ) public : Optional [ bool ] = Field ( None , description = \"deprecated, reserved for project creation in replication\" ) metadata : Optional [ ProjectMetadata ] = Field ( None , description = \"The metadata of the project.\" ) cve_allowlist : Optional [ CVEAllowlist ] = Field ( None , description = \"The CVE allowlist of the project.\" ) storage_limit : Optional [ int ] = Field ( None , description = \"The storage quota of the project.\" ) registry_id : Optional [ int ] = Field ( None , description = \"The ID of referenced registry when creating the proxy cache project\" , ) project_name : Optional [ str ] = Field ( None , description = 'The name of the project.' , max_length = 255 ) class-attribute public : Optional [ bool ] = Field ( None , description = 'deprecated, reserved for project creation in replication' ) class-attribute metadata : Optional [ ProjectMetadata ] = Field ( None , description = 'The metadata of the project.' ) class-attribute cve_allowlist : Optional [ CVEAllowlist ] = Field ( None , description = 'The CVE allowlist of the project.' ) class-attribute storage_limit : Optional [ int ] = Field ( None , description = 'The storage quota of the project.' ) class-attribute registry_id : Optional [ int ] = Field ( None , description = 'The ID of referenced registry when creating the proxy cache project' ) class-attribute Project Source code in harborapi/models/models.py 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 class Project ( BaseModel ): project_id : Optional [ int ] = Field ( None , description = \"Project ID\" ) owner_id : Optional [ int ] = Field ( None , description = \"The owner ID of the project always means the creator of the project.\" , ) name : Optional [ str ] = Field ( None , description = \"The name of the project.\" ) registry_id : Optional [ int ] = Field ( None , description = \"The ID of referenced registry when the project is a proxy cache project.\" , ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the project.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the project.\" ) deleted : Optional [ bool ] = Field ( None , description = \"A deletion mark of the project.\" ) owner_name : Optional [ str ] = Field ( None , description = \"The owner name of the project.\" ) togglable : Optional [ bool ] = Field ( None , description = \"Correspond to the UI about whether the project's publicity is updatable (for UI)\" , ) current_user_role_id : Optional [ int ] = Field ( None , description = \"The role ID with highest permission of the current user who triggered the API (for UI). This attribute is deprecated and will be removed in future versions.\" , ) current_user_role_ids : Optional [ List [ int ]] = Field ( None , description = \"The list of role ID of the current user who triggered the API (for UI)\" , ) repo_count : Optional [ int ] = Field ( None , description = \"The number of the repositories under this project.\" ) chart_count : Optional [ int ] = Field ( None , description = \"The total number of charts under this project.\" ) metadata : Optional [ ProjectMetadata ] = Field ( None , description = \"The metadata of the project.\" ) cve_allowlist : Optional [ CVEAllowlist ] = Field ( None , description = \"The CVE allowlist of this project.\" ) project_id : Optional [ int ] = Field ( None , description = 'Project ID' ) class-attribute owner_id : Optional [ int ] = Field ( None , description = 'The owner ID of the project always means the creator of the project.' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of the project.' ) class-attribute registry_id : Optional [ int ] = Field ( None , description = 'The ID of referenced registry when the project is a proxy cache project.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the project.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the project.' ) class-attribute deleted : Optional [ bool ] = Field ( None , description = 'A deletion mark of the project.' ) class-attribute owner_name : Optional [ str ] = Field ( None , description = 'The owner name of the project.' ) class-attribute togglable : Optional [ bool ] = Field ( None , description = \"Correspond to the UI about whether the project's publicity is updatable (for UI)\" ) class-attribute current_user_role_id : Optional [ int ] = Field ( None , description = 'The role ID with highest permission of the current user who triggered the API (for UI). This attribute is deprecated and will be removed in future versions.' ) class-attribute current_user_role_ids : Optional [ List [ int ]] = Field ( None , description = 'The list of role ID of the current user who triggered the API (for UI)' ) class-attribute repo_count : Optional [ int ] = Field ( None , description = 'The number of the repositories under this project.' ) class-attribute chart_count : Optional [ int ] = Field ( None , description = 'The total number of charts under this project.' ) class-attribute metadata : Optional [ ProjectMetadata ] = Field ( None , description = 'The metadata of the project.' ) class-attribute cve_allowlist : Optional [ CVEAllowlist ] = Field ( None , description = 'The CVE allowlist of this project.' ) class-attribute ProjectSummary Source code in harborapi/models/models.py 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 class ProjectSummary ( BaseModel ): repo_count : Optional [ int ] = Field ( None , description = \"The number of the repositories under this project.\" ) chart_count : Optional [ int ] = Field ( None , description = \"The total number of charts under this project.\" ) project_admin_count : Optional [ int ] = Field ( None , description = \"The total number of project admin members.\" ) maintainer_count : Optional [ int ] = Field ( None , description = \"The total number of maintainer members.\" ) developer_count : Optional [ int ] = Field ( None , description = \"The total number of developer members.\" ) guest_count : Optional [ int ] = Field ( None , description = \"The total number of guest members.\" ) limited_guest_count : Optional [ int ] = Field ( None , description = \"The total number of limited guest members.\" ) quota : Optional [ ProjectSummaryQuota ] = None registry : Optional [ Registry ] = None repo_count : Optional [ int ] = Field ( None , description = 'The number of the repositories under this project.' ) class-attribute chart_count : Optional [ int ] = Field ( None , description = 'The total number of charts under this project.' ) class-attribute project_admin_count : Optional [ int ] = Field ( None , description = 'The total number of project admin members.' ) class-attribute maintainer_count : Optional [ int ] = Field ( None , description = 'The total number of maintainer members.' ) class-attribute developer_count : Optional [ int ] = Field ( None , description = 'The total number of developer members.' ) class-attribute guest_count : Optional [ int ] = Field ( None , description = 'The total number of guest members.' ) class-attribute limited_guest_count : Optional [ int ] = Field ( None , description = 'The total number of limited guest members.' ) class-attribute quota : Optional [ ProjectSummaryQuota ] = None class-attribute registry : Optional [ Registry ] = None class-attribute ReplicationPolicy Source code in harborapi/models/models.py 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 class ReplicationPolicy ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The policy ID.\" ) name : Optional [ str ] = Field ( None , description = \"The policy name.\" ) description : Optional [ str ] = Field ( None , description = \"The description of the policy.\" ) src_registry : Optional [ Registry ] = Field ( None , description = \"The source registry.\" ) dest_registry : Optional [ Registry ] = Field ( None , description = \"The destination registry.\" ) dest_namespace : Optional [ str ] = Field ( None , description = \"The destination namespace.\" ) dest_namespace_replace_count : Optional [ int ] = Field ( None , description = \"Specify how many path components will be replaced by the provided destination namespace. \\n The default value is -1 in which case the legacy mode will be applied.\" , ) trigger : Optional [ ReplicationTrigger ] = None filters : Optional [ List [ ReplicationFilter ]] = Field ( None , description = \"The replication policy filter array.\" ) replicate_deletion : Optional [ bool ] = Field ( None , description = \"Whether to replicate the deletion operation.\" ) deletion : Optional [ bool ] = Field ( None , description = 'Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.' , ) override : Optional [ bool ] = Field ( None , description = \"Whether to override the resources on the destination registry.\" , ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the policy is enabled or not.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The create time of the policy.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the policy.\" ) speed : Optional [ int ] = Field ( None , description = \"speed limit for each task\" ) id : Optional [ int ] = Field ( None , description = 'The policy ID.' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The policy name.' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description of the policy.' ) class-attribute src_registry : Optional [ Registry ] = Field ( None , description = 'The source registry.' ) class-attribute dest_registry : Optional [ Registry ] = Field ( None , description = 'The destination registry.' ) class-attribute dest_namespace : Optional [ str ] = Field ( None , description = 'The destination namespace.' ) class-attribute dest_namespace_replace_count : Optional [ int ] = Field ( None , description = 'Specify how many path components will be replaced by the provided destination namespace. \\n The default value is -1 in which case the legacy mode will be applied.' ) class-attribute trigger : Optional [ ReplicationTrigger ] = None class-attribute filters : Optional [ List [ ReplicationFilter ]] = Field ( None , description = 'The replication policy filter array.' ) class-attribute replicate_deletion : Optional [ bool ] = Field ( None , description = 'Whether to replicate the deletion operation.' ) class-attribute deletion : Optional [ bool ] = Field ( None , description = 'Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.' ) class-attribute override : Optional [ bool ] = Field ( None , description = 'Whether to override the resources on the destination registry.' ) class-attribute enabled : Optional [ bool ] = Field ( None , description = 'Whether the policy is enabled or not.' ) class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The create time of the policy.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the policy.' ) class-attribute speed : Optional [ int ] = Field ( None , description = 'speed limit for each task' ) class-attribute RegistryProviderInfo Source code in harborapi/models/models.py 2199 2200 2201 2202 2203 2204 2205 class RegistryProviderInfo ( BaseModel ): endpoint_pattern : Optional [ RegistryProviderEndpointPattern ] = Field ( None , description = \"The endpoint pattern\" ) credential_pattern : Optional [ RegistryProviderCredentialPattern ] = Field ( None , description = \"The credential pattern\" ) endpoint_pattern : Optional [ RegistryProviderEndpointPattern ] = Field ( None , description = 'The endpoint pattern' ) class-attribute credential_pattern : Optional [ RegistryProviderCredentialPattern ] = Field ( None , description = 'The credential pattern' ) class-attribute Robot Source code in harborapi/models/models.py 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 class Robot ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the robot\" ) name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) description : Optional [ str ] = Field ( None , description = \"The description of the robot\" ) secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) level : Optional [ str ] = Field ( None , description = \"The level of the robot, project or system\" ) duration : Optional [ int ] = Field ( None , description = \"The duration of the robot in days\" ) editable : Optional [ bool ] = Field ( None , description = \"The editable status of the robot\" ) disable : Optional [ bool ] = Field ( None , description = \"The disable status of the robot\" ) expires_at : Optional [ int ] = Field ( None , description = \"The expiration data of the robot\" ) permissions : Optional [ List [ RobotPermission ]] = None creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the robot.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the robot.\" ) id : Optional [ int ] = Field ( None , description = 'The ID of the robot' ) class-attribute name : Optional [ str ] = Field ( None , description = 'The name of the tag' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description of the robot' ) class-attribute secret : Optional [ str ] = Field ( None , description = 'The secret of the robot' ) class-attribute level : Optional [ str ] = Field ( None , description = 'The level of the robot, project or system' ) class-attribute duration : Optional [ int ] = Field ( None , description = 'The duration of the robot in days' ) class-attribute editable : Optional [ bool ] = Field ( None , description = 'The editable status of the robot' ) class-attribute disable : Optional [ bool ] = Field ( None , description = 'The disable status of the robot' ) class-attribute expires_at : Optional [ int ] = Field ( None , description = 'The expiration data of the robot' ) class-attribute permissions : Optional [ List [ RobotPermission ]] = None class-attribute creation_time : Optional [ datetime ] = Field ( None , description = 'The creation time of the robot.' ) class-attribute update_time : Optional [ datetime ] = Field ( None , description = 'The update time of the robot.' ) class-attribute RobotCreate Source code in harborapi/models/models.py 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 class RobotCreate ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) description : Optional [ str ] = Field ( None , description = \"The description of the robot\" ) secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) level : Optional [ str ] = Field ( None , description = \"The level of the robot, project or system\" ) disable : Optional [ bool ] = Field ( None , description = \"The disable status of the robot\" ) duration : Optional [ int ] = Field ( None , description = \"The duration of the robot in days\" ) permissions : Optional [ List [ RobotPermission ]] = None name : Optional [ str ] = Field ( None , description = 'The name of the tag' ) class-attribute description : Optional [ str ] = Field ( None , description = 'The description of the robot' ) class-attribute secret : Optional [ str ] = Field ( None , description = 'The secret of the robot' ) class-attribute level : Optional [ str ] = Field ( None , description = 'The level of the robot, project or system' ) class-attribute disable : Optional [ bool ] = Field ( None , description = 'The disable status of the robot' ) class-attribute duration : Optional [ int ] = Field ( None , description = 'The duration of the robot in days' ) class-attribute permissions : Optional [ List [ RobotPermission ]] = None class-attribute RetentionMetadata Source code in harborapi/models/models.py 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 class RetentionMetadata ( BaseModel ): templates : Optional [ List [ RetentionRuleMetadata ]] = Field ( None , description = \"templates\" ) scope_selectors : Optional [ List [ RetentionSelectorMetadata ]] = Field ( None , description = \"supported scope selectors\" ) tag_selectors : Optional [ List [ RetentionSelectorMetadata ]] = Field ( None , description = \"supported tag selectors\" ) templates : Optional [ List [ RetentionRuleMetadata ]] = Field ( None , description = 'templates' ) class-attribute scope_selectors : Optional [ List [ RetentionSelectorMetadata ]] = Field ( None , description = 'supported scope selectors' ) class-attribute tag_selectors : Optional [ List [ RetentionSelectorMetadata ]] = Field ( None , description = 'supported tag selectors' ) class-attribute RetentionPolicy Source code in harborapi/models/models.py 2261 2262 2263 2264 2265 2266 class RetentionPolicy ( BaseModel ): id : Optional [ int ] = None algorithm : Optional [ str ] = None rules : Optional [ List [ RetentionRule ]] = None trigger : Optional [ RetentionRuleTrigger ] = None scope : Optional [ RetentionPolicyScope ] = None id : Optional [ int ] = None class-attribute algorithm : Optional [ str ] = None class-attribute rules : Optional [ List [ RetentionRule ]] = None class-attribute trigger : Optional [ RetentionRuleTrigger ] = None class-attribute scope : Optional [ RetentionPolicyScope ] = None class-attribute Search Source code in harborapi/models/models.py 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 class Search ( BaseModel ): project : Optional [ List [ Project ]] = Field ( None , description = \"Search results of the projects that matched the filter keywords.\" , ) repository : Optional [ List [ SearchRepository ]] = Field ( None , description = \"Search results of the repositories that matched the filter keywords.\" , ) chart : Optional [ List [ SearchResult ]] = Field ( None , description = \"Search results of the charts that macthed the filter keywords.\" , ) project : Optional [ List [ Project ]] = Field ( None , description = 'Search results of the projects that matched the filter keywords.' ) class-attribute repository : Optional [ List [ SearchRepository ]] = Field ( None , description = 'Search results of the repositories that matched the filter keywords.' ) class-attribute chart : Optional [ List [ SearchResult ]] = Field ( None , description = 'Search results of the charts that macthed the filter keywords.' ) class-attribute","title":"Models"},{"location":"reference/models/models/#models","text":"The majority of these models have been auto-generated from the official Harbor REST API v2.0 Swagger 2.0 Schema using datamodel-code-generator .","title":"Models"},{"location":"reference/models/models/#harborapi.models.models.Model","text":"Source code in harborapi/models/models.py 14 15 class Model ( BaseModel ): __root__ : Any","title":"Model"},{"location":"reference/models/models/#harborapi.models.models.Model.__root__","text":"","title":"__root__"},{"location":"reference/models/models/#harborapi.models.models.Error","text":"Source code in harborapi/models/models.py 18 19 20 class Error ( BaseModel ): code : Optional [ str ] = Field ( None , description = \"The error code\" ) message : Optional [ str ] = Field ( None , description = \"The error message\" )","title":"Error"},{"location":"reference/models/models/#harborapi.models.models.Error.code","text":"","title":"code"},{"location":"reference/models/models/#harborapi.models.models.Error.message","text":"","title":"message"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository","text":"Source code in harborapi/models/models.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class SearchRepository ( BaseModel ): project_id : Optional [ int ] = Field ( None , description = \"The ID of the project that the repository belongs to\" ) project_name : Optional [ str ] = Field ( None , description = \"The name of the project that the repository belongs to\" ) project_public : Optional [ bool ] = Field ( None , description = \"The flag to indicate the publicity of the project that the repository belongs to (1 is public, 0 is not)\" , ) repository_name : Optional [ str ] = Field ( None , description = \"The name of the repository\" ) pull_count : Optional [ int ] = Field ( None , description = \"The count how many times the repository is pulled\" ) artifact_count : Optional [ int ] = Field ( None , description = \"The count of artifacts in the repository\" )","title":"SearchRepository"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository.project_name","text":"","title":"project_name"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository.project_public","text":"","title":"project_public"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository.repository_name","text":"","title":"repository_name"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository.pull_count","text":"","title":"pull_count"},{"location":"reference/models/models/#harborapi.models.models.SearchRepository.artifact_count","text":"","title":"artifact_count"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata","text":"Source code in harborapi/models/models.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class ChartMetadata ( BaseModel ): name : str = Field ( ... , description = \"The name of the chart\" ) home : Optional [ str ] = Field ( None , description = \"The URL to the relevant project page\" ) sources : Optional [ List [ str ]] = Field ( None , description = \"The URL to the source code of chart\" ) version : str = Field ( ... , description = \"A SemVer 2 version of chart\" ) description : Optional [ str ] = Field ( None , description = \"A one-sentence description of chart\" ) keywords : Optional [ List [ str ]] = Field ( None , description = \"A list of string keywords\" ) engine : str = Field ( ... , description = \"The name of template engine\" ) icon : str = Field ( ... , description = \"The URL to an icon file\" ) api_version : str = Field ( ... , alias = \"apiVersion\" , description = \"The API version of this chart\" ) app_version : str = Field ( ... , alias = \"appVersion\" , description = \"The version of the application enclosed in the chart\" , ) deprecated : Optional [ bool ] = Field ( None , description = \"Whether or not this chart is deprecated\" )","title":"ChartMetadata"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.home","text":"","title":"home"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.sources","text":"","title":"sources"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.version","text":"","title":"version"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.keywords","text":"","title":"keywords"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.engine","text":"","title":"engine"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.icon","text":"","title":"icon"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.api_version","text":"","title":"api_version"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.app_version","text":"","title":"app_version"},{"location":"reference/models/models/#harborapi.models.models.ChartMetadata.deprecated","text":"","title":"deprecated"},{"location":"reference/models/models/#harborapi.models.models.Repository","text":"Source code in harborapi/models/models.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class Repository ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the repository\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of the project that the repository belongs to\" ) name : Optional [ str ] = Field ( None , description = \"The name of the repository\" ) description : Optional [ str ] = Field ( None , description = \"The description of the repository\" ) artifact_count : Optional [ int ] = Field ( None , description = \"The count of the artifacts inside the repository\" ) pull_count : Optional [ int ] = Field ( None , description = \"The count that the artifact inside the repository pulled\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the repository\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the repository\" )","title":"Repository"},{"location":"reference/models/models/#harborapi.models.models.Repository.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Repository.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.Repository.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Repository.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.Repository.artifact_count","text":"","title":"artifact_count"},{"location":"reference/models/models/#harborapi.models.models.Repository.pull_count","text":"","title":"pull_count"},{"location":"reference/models/models/#harborapi.models.models.Repository.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Repository.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Tag","text":"Source code in harborapi/models/models.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Tag ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the tag\" ) repository_id : Optional [ int ] = Field ( None , description = \"The ID of the repository that the tag belongs to\" ) artifact_id : Optional [ int ] = Field ( None , description = \"The ID of the artifact that the tag attached to\" ) name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) push_time : Optional [ datetime ] = Field ( None , description = \"The push time of the tag\" ) pull_time : Optional [ datetime ] = Field ( None , description = \"The latest pull time of the tag\" ) immutable : Optional [ bool ] = Field ( None , description = \"The immutable status of the tag\" ) signed : Optional [ bool ] = Field ( None , description = \"The attribute indicates whether the tag is signed or not\" )","title":"Tag"},{"location":"reference/models/models/#harborapi.models.models.Tag.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Tag.repository_id","text":"","title":"repository_id"},{"location":"reference/models/models/#harborapi.models.models.Tag.artifact_id","text":"","title":"artifact_id"},{"location":"reference/models/models/#harborapi.models.models.Tag.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Tag.push_time","text":"","title":"push_time"},{"location":"reference/models/models/#harborapi.models.models.Tag.pull_time","text":"","title":"pull_time"},{"location":"reference/models/models/#harborapi.models.models.Tag.immutable","text":"","title":"immutable"},{"location":"reference/models/models/#harborapi.models.models.Tag.signed","text":"","title":"signed"},{"location":"reference/models/models/#harborapi.models.models.ExtraAttrs","text":"Source code in harborapi/models/models.py 117 118 119 120 121 class ExtraAttrs ( BaseModel ): pass class Config : extra = Extra . allow","title":"ExtraAttrs"},{"location":"reference/models/models/#harborapi.models.models.ExtraAttrs.Config","text":"Source code in harborapi/models/models.py 120 121 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.ExtraAttrs.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.Annotations","text":"Source code in harborapi/models/models.py 124 125 126 127 128 class Annotations ( BaseModel ): pass class Config : extra = Extra . allow","title":"Annotations"},{"location":"reference/models/models/#harborapi.models.models.Annotations.Config","text":"Source code in harborapi/models/models.py 127 128 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.Annotations.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.AdditionLinks","text":"Source code in harborapi/models/models.py 131 132 133 134 135 class AdditionLinks ( BaseModel ): pass class Config : extra = Extra . allow","title":"AdditionLinks"},{"location":"reference/models/models/#harborapi.models.models.AdditionLinks.Config","text":"Source code in harborapi/models/models.py 134 135 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.AdditionLinks.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.AdditionLink","text":"Source code in harborapi/models/models.py 138 139 140 141 142 class AdditionLink ( BaseModel ): href : Optional [ str ] = Field ( None , description = \"The link of the addition\" ) absolute : Optional [ bool ] = Field ( None , description = \"Determine whether the link is an absolute URL or not\" )","title":"AdditionLink"},{"location":"reference/models/models/#harborapi.models.models.AdditionLink.href","text":"","title":"href"},{"location":"reference/models/models/#harborapi.models.models.AdditionLink.absolute","text":"","title":"absolute"},{"location":"reference/models/models/#harborapi.models.models.Platform","text":"Source code in harborapi/models/models.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class Platform ( BaseModel ): architecture : Optional [ str ] = Field ( None , description = \"The architecture that the artifact applys to\" ) os : Optional [ str ] = Field ( None , description = \"The OS that the artifact applys to\" ) _os_version_ : Optional [ str ] = Field ( None , alias = \"'os.version'\" , description = \"The version of the OS that the artifact applys to\" , ) _os_features_ : Optional [ List [ str ]] = Field ( None , alias = \"'os.features'\" , description = \"The features of the OS that the artifact applys to\" , ) variant : Optional [ str ] = Field ( None , description = \"The variant of the CPU\" )","title":"Platform"},{"location":"reference/models/models/#harborapi.models.models.Platform.architecture","text":"","title":"architecture"},{"location":"reference/models/models/#harborapi.models.models.Platform.os","text":"","title":"os"},{"location":"reference/models/models/#harborapi.models.models.Platform.variant","text":"","title":"variant"},{"location":"reference/models/models/#harborapi.models.models.Label","text":"Source code in harborapi/models/models.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class Label ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the label\" ) name : Optional [ str ] = Field ( None , description = \"The name the label\" ) description : Optional [ str ] = Field ( None , description = \"The description the label\" ) color : Optional [ str ] = Field ( None , description = \"The color the label\" ) scope : Optional [ str ] = Field ( None , description = \"The scope the label\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of project that the label belongs to\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time the label\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the label\" )","title":"Label"},{"location":"reference/models/models/#harborapi.models.models.Label.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Label.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Label.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.Label.color","text":"","title":"color"},{"location":"reference/models/models/#harborapi.models.models.Label.scope","text":"","title":"scope"},{"location":"reference/models/models/#harborapi.models.models.Label.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.Label.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Label.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Scanner","text":"Source code in harborapi/models/models.py 180 181 182 183 184 185 186 187 188 189 class Scanner ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"Name of the scanner\" , example = \"Trivy\" ) vendor : Optional [ str ] = Field ( None , description = \"Name of the scanner provider\" , example = \"Aqua Security\" ) version : Optional [ str ] = Field ( None , description = \"Version of the scanner adapter\" , example = \"v0.9.1\" )","title":"Scanner"},{"location":"reference/models/models/#harborapi.models.models.Scanner.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Scanner.vendor","text":"","title":"vendor"},{"location":"reference/models/models/#harborapi.models.models.Scanner.version","text":"","title":"version"},{"location":"reference/models/models/#harborapi.models.models.ScanOverview","text":"Constructs a scan overview from a dict of mime_type:scan_overview The API spec does not specify the contents of the scan overview, but from investigating the behavior of the API, it seems to return a dict that looks like this: { \"application/vnd.security.vulnerability.report; version=1.1\" : { # dict that conforms to NativeReportSummary spec ... } } The __new__ method constructs a NativeReportSummary object and returns it if the MIME type is one of the two MIME types specified in the spec. If the MIME type is not recognized, __new__ returns a ScanOverview object with the dict assigned as an extra attribute. This behavior is not specified. Source code in harborapi/models/models.py 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 class ScanOverview ( BaseModel ): \"\"\"Constructs a scan overview from a dict of `mime_type:scan_overview` The API spec does not specify the contents of the scan overview, but from investigating the behavior of the API, it seems to return a dict that looks like this: ```py { \"application/vnd.security.vulnerability.report; version=1.1\": { # dict that conforms to NativeReportSummary spec ... } } ``` The `__new__` method constructs a `NativeReportSummary` object and returns it if the MIME type is one of the two MIME types specified in the spec. If the MIME type is not recognized, `__new__` returns a `ScanOverview` object with the dict assigned as an extra attribute. This behavior is not specified. \"\"\" def __new__ ( cls , * args , ** kwargs ): mime_types = ( \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" , \"application/vnd.security.vulnerability.report; version=1.1\" , ) for k , v in kwargs . items (): if k in mime_types : return NativeReportSummary ( ** v ) # add logging call here return super () . __new__ ( cls ) class Config : extra = Extra . allow","title":"ScanOverview"},{"location":"reference/models/models/#harborapi.models.models.ScanOverview.Config","text":"Source code in harborapi/models/models.py 225 226 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.ScanOverview.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.ScanOverview.__new__","text":"Source code in harborapi/models/models.py 214 215 216 217 218 219 220 221 222 223 def __new__ ( cls , * args , ** kwargs ): mime_types = ( \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" , \"application/vnd.security.vulnerability.report; version=1.1\" , ) for k , v in kwargs . items (): if k in mime_types : return NativeReportSummary ( ** v ) # add logging call here return super () . __new__ ( cls )","title":"__new__()"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary","text":"Source code in harborapi/models/models.py 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 class VulnerabilitySummary ( BaseModel ): total : Optional [ int ] = Field ( None , description = \"The total number of the found vulnerabilities\" , example = 500 ) fixable : Optional [ int ] = Field ( None , description = \"The number of the fixable vulnerabilities\" , example = 100 ) # These severity fields are not native to the API spec, # but are added to make the API more user friendly by making # the severity fields accessible directly instead of through the summary field. # See root validator for more details. critical : int = Field ( 0 , alias = \"Critical\" , description = \"The number of critical vulnerabilities detected.\" , ) high : int = Field ( 0 , alias = \"High\" , description = \"The number of critical vulnerabilities detected.\" ) medium : int = Field ( 0 , alias = \"Medium\" , description = \"The number of critical vulnerabilities detected.\" , ) low : int = Field ( 0 , alias = \"Low\" , description = \"The number of critical vulnerabilities detected.\" ) # The original summary field (prefer using the severity fields above) # The field is kept to not remove anything native to the API spec. summary : Optional [ Dict [ str , int ]] = Field ( None , description = \"Numbers of the vulnerabilities with different severity\" , example = { \"Critical\" : 5 , \"High\" : 5 }, ) @root_validator ( pre = True ) def assign_severity_breakdown ( cls , values : Dict [ str , Any ]) -> Dict [ str , Any ]: summary = values . get ( \"summary\" , {}) if not isinstance ( summary , dict ): raise ValueError ( \"'summary' must be a dict\" ) return { ** values , ** summary }","title":"VulnerabilitySummary"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.total","text":"","title":"total"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.fixable","text":"","title":"fixable"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.critical","text":"","title":"critical"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.high","text":"","title":"high"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.medium","text":"","title":"medium"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.low","text":"","title":"low"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.summary","text":"","title":"summary"},{"location":"reference/models/models/#harborapi.models.models.VulnerabilitySummary.assign_severity_breakdown","text":"Source code in harborapi/models/models.py 266 267 268 269 270 271 @root_validator ( pre = True ) def assign_severity_breakdown ( cls , values : Dict [ str , Any ]) -> Dict [ str , Any ]: summary = values . get ( \"summary\" , {}) if not isinstance ( summary , dict ): raise ValueError ( \"'summary' must be a dict\" ) return { ** values , ** summary }","title":"assign_severity_breakdown()"},{"location":"reference/models/models/#harborapi.models.models.AuditLog","text":"Source code in harborapi/models/models.py 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 class AuditLog ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the audit log entry.\" ) username : Optional [ str ] = Field ( None , description = \"Username of the user in this log entry.\" ) resource : Optional [ str ] = Field ( None , description = \"Name of the repository in this log entry.\" ) resource_type : Optional [ str ] = Field ( None , description = \"Tag of the repository in this log entry.\" ) operation : Optional [ str ] = Field ( None , description = \"The operation against the repository in this log entry.\" ) op_time : Optional [ datetime ] = Field ( None , description = \"The time when this operation is triggered.\" , example = \"2006-01-02T15:04:05Z\" , )","title":"AuditLog"},{"location":"reference/models/models/#harborapi.models.models.AuditLog.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.AuditLog.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.AuditLog.resource","text":"","title":"resource"},{"location":"reference/models/models/#harborapi.models.models.AuditLog.resource_type","text":"","title":"resource_type"},{"location":"reference/models/models/#harborapi.models.models.AuditLog.operation","text":"","title":"operation"},{"location":"reference/models/models/#harborapi.models.models.AuditLog.op_time","text":"","title":"op_time"},{"location":"reference/models/models/#harborapi.models.models.Metadata","text":"Source code in harborapi/models/models.py 295 296 297 298 299 300 301 class Metadata ( BaseModel ): id : Optional [ str ] = Field ( None , description = \"id\" ) name : Optional [ str ] = Field ( None , description = \"name\" ) icon : Optional [ str ] = Field ( None , description = \"icon\" ) maintainers : Optional [ List [ str ]] = Field ( None , description = \"maintainers\" ) version : Optional [ str ] = Field ( None , description = \"version\" ) source : Optional [ str ] = Field ( None , description = \"source\" )","title":"Metadata"},{"location":"reference/models/models/#harborapi.models.models.Metadata.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Metadata.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Metadata.icon","text":"","title":"icon"},{"location":"reference/models/models/#harborapi.models.models.Metadata.maintainers","text":"","title":"maintainers"},{"location":"reference/models/models/#harborapi.models.models.Metadata.version","text":"","title":"version"},{"location":"reference/models/models/#harborapi.models.models.Metadata.source","text":"","title":"source"},{"location":"reference/models/models/#harborapi.models.models.Instance","text":"Source code in harborapi/models/models.py 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 class Instance ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"Unique ID\" ) name : Optional [ str ] = Field ( None , description = \"Instance name\" ) description : Optional [ str ] = Field ( None , description = \"Description of instance\" ) vendor : Optional [ str ] = Field ( None , description = \"Based on which driver, identified by ID\" ) endpoint : Optional [ str ] = Field ( None , description = \"The service endpoint of this instance\" ) auth_mode : Optional [ str ] = Field ( None , description = \"The authentication way supported\" ) auth_info : Optional [ Dict [ str , str ]] = Field ( None , description = \"The auth credential data if exists\" ) status : Optional [ str ] = Field ( None , description = \"The health status\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the instance is activated or not\" ) default : Optional [ bool ] = Field ( None , description = \"Whether the instance is default or not\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether the instance endpoint is insecure or not\" ) setup_timestamp : Optional [ int ] = Field ( None , description = \"The timestamp of instance setting up\" )","title":"Instance"},{"location":"reference/models/models/#harborapi.models.models.Instance.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Instance.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Instance.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.Instance.vendor","text":"","title":"vendor"},{"location":"reference/models/models/#harborapi.models.models.Instance.endpoint","text":"","title":"endpoint"},{"location":"reference/models/models/#harborapi.models.models.Instance.auth_mode","text":"","title":"auth_mode"},{"location":"reference/models/models/#harborapi.models.models.Instance.auth_info","text":"","title":"auth_info"},{"location":"reference/models/models/#harborapi.models.models.Instance.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.Instance.enabled","text":"","title":"enabled"},{"location":"reference/models/models/#harborapi.models.models.Instance.default","text":"","title":"default"},{"location":"reference/models/models/#harborapi.models.models.Instance.insecure","text":"","title":"insecure"},{"location":"reference/models/models/#harborapi.models.models.Instance.setup_timestamp","text":"","title":"setup_timestamp"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy","text":"Source code in harborapi/models/models.py 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 class PreheatPolicy ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of preheat policy\" ) name : Optional [ str ] = Field ( None , description = \"The Name of preheat policy\" ) description : Optional [ str ] = Field ( None , description = \"The Description of preheat policy\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of preheat policy project\" ) provider_id : Optional [ int ] = Field ( None , description = \"The ID of preheat policy provider\" ) provider_name : Optional [ str ] = Field ( None , description = \"The Name of preheat policy provider\" ) filters : Optional [ str ] = Field ( None , description = \"The Filters of preheat policy\" ) trigger : Optional [ str ] = Field ( None , description = \"The Trigger of preheat policy\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the preheat policy enabled\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The Create Time of preheat policy\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The Update Time of preheat policy\" )","title":"PreheatPolicy"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.provider_id","text":"","title":"provider_id"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.provider_name","text":"","title":"provider_name"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.filters","text":"","title":"filters"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.enabled","text":"","title":"enabled"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.PreheatPolicy.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Metrics","text":"Source code in harborapi/models/models.py 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 class Metrics ( BaseModel ): task_count : Optional [ int ] = Field ( None , description = \"The count of task\" ) success_task_count : Optional [ int ] = Field ( None , description = \"The count of success task\" ) error_task_count : Optional [ int ] = Field ( None , description = \"The count of error task\" ) pending_task_count : Optional [ int ] = Field ( None , description = \"The count of pending task\" ) running_task_count : Optional [ int ] = Field ( None , description = \"The count of running task\" ) scheduled_task_count : Optional [ int ] = Field ( None , description = \"The count of scheduled task\" ) stopped_task_count : Optional [ int ] = Field ( None , description = \"The count of stopped task\" )","title":"Metrics"},{"location":"reference/models/models/#harborapi.models.models.Metrics.task_count","text":"","title":"task_count"},{"location":"reference/models/models/#harborapi.models.models.Metrics.success_task_count","text":"","title":"success_task_count"},{"location":"reference/models/models/#harborapi.models.models.Metrics.error_task_count","text":"","title":"error_task_count"},{"location":"reference/models/models/#harborapi.models.models.Metrics.pending_task_count","text":"","title":"pending_task_count"},{"location":"reference/models/models/#harborapi.models.models.Metrics.running_task_count","text":"","title":"running_task_count"},{"location":"reference/models/models/#harborapi.models.models.Metrics.scheduled_task_count","text":"","title":"scheduled_task_count"},{"location":"reference/models/models/#harborapi.models.models.Metrics.stopped_task_count","text":"","title":"stopped_task_count"},{"location":"reference/models/models/#harborapi.models.models.Execution","text":"Source code in harborapi/models/models.py 383 384 385 386 387 388 389 390 391 392 393 394 395 class Execution ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of execution\" ) vendor_type : Optional [ str ] = Field ( None , description = \"The vendor type of execution\" ) vendor_id : Optional [ int ] = Field ( None , description = \"The vendor id of execution\" ) status : Optional [ str ] = Field ( None , description = \"The status of execution\" ) status_message : Optional [ str ] = Field ( None , description = \"The status message of execution\" ) metrics : Optional [ Metrics ] = None trigger : Optional [ str ] = Field ( None , description = \"The trigger of execution\" ) extra_attrs : Optional [ ExtraAttrs ] = None start_time : Optional [ str ] = Field ( None , description = \"The start time of execution\" ) end_time : Optional [ str ] = Field ( None , description = \"The end time of execution\" )","title":"Execution"},{"location":"reference/models/models/#harborapi.models.models.Execution.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Execution.vendor_type","text":"","title":"vendor_type"},{"location":"reference/models/models/#harborapi.models.models.Execution.vendor_id","text":"","title":"vendor_id"},{"location":"reference/models/models/#harborapi.models.models.Execution.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.Execution.status_message","text":"","title":"status_message"},{"location":"reference/models/models/#harborapi.models.models.Execution.metrics","text":"","title":"metrics"},{"location":"reference/models/models/#harborapi.models.models.Execution.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.Execution.extra_attrs","text":"","title":"extra_attrs"},{"location":"reference/models/models/#harborapi.models.models.Execution.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.Execution.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.Task","text":"Source code in harborapi/models/models.py 398 399 400 401 402 403 404 405 406 407 408 409 410 class Task ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of task\" ) execution_id : Optional [ int ] = Field ( None , description = \"The ID of task execution\" ) status : Optional [ str ] = Field ( None , description = \"The status of task\" ) status_message : Optional [ str ] = Field ( None , description = \"The status message of task\" ) run_count : Optional [ int ] = Field ( None , description = \"The count of task run\" ) extra_attrs : Optional [ ExtraAttrs ] = None creation_time : Optional [ str ] = Field ( None , description = \"The creation time of task\" ) update_time : Optional [ str ] = Field ( None , description = \"The update time of task\" ) start_time : Optional [ str ] = Field ( None , description = \"The start time of task\" ) end_time : Optional [ str ] = Field ( None , description = \"The end time of task\" )","title":"Task"},{"location":"reference/models/models/#harborapi.models.models.Task.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Task.execution_id","text":"","title":"execution_id"},{"location":"reference/models/models/#harborapi.models.models.Task.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.Task.status_message","text":"","title":"status_message"},{"location":"reference/models/models/#harborapi.models.models.Task.run_count","text":"","title":"run_count"},{"location":"reference/models/models/#harborapi.models.models.Task.extra_attrs","text":"","title":"extra_attrs"},{"location":"reference/models/models/#harborapi.models.models.Task.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Task.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Task.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.Task.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.ProviderUnderProject","text":"Source code in harborapi/models/models.py 413 414 415 416 417 class ProviderUnderProject ( BaseModel ): id : Optional [ int ] = None provider : Optional [ str ] = None enabled : Optional [ bool ] = None default : Optional [ bool ] = None","title":"ProviderUnderProject"},{"location":"reference/models/models/#harborapi.models.models.ProviderUnderProject.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ProviderUnderProject.provider","text":"","title":"provider"},{"location":"reference/models/models/#harborapi.models.models.ProviderUnderProject.enabled","text":"","title":"enabled"},{"location":"reference/models/models/#harborapi.models.models.ProviderUnderProject.default","text":"","title":"default"},{"location":"reference/models/models/#harborapi.models.models.Icon","text":"Source code in harborapi/models/models.py 420 421 422 423 424 425 426 class Icon ( BaseModel ): content_type : Optional [ str ] = Field ( None , alias = \"content-type\" , description = \"The content type of the icon\" ) content : Optional [ str ] = Field ( None , description = \"The base64 encoded content of the icon\" )","title":"Icon"},{"location":"reference/models/models/#harborapi.models.models.Icon.content_type","text":"","title":"content_type"},{"location":"reference/models/models/#harborapi.models.models.Icon.content","text":"","title":"content"},{"location":"reference/models/models/#harborapi.models.models.ProjectDeletable","text":"Source code in harborapi/models/models.py 429 430 431 432 433 434 435 class ProjectDeletable ( BaseModel ): deletable : Optional [ bool ] = Field ( None , description = \"Whether the project can be deleted.\" ) message : Optional [ str ] = Field ( None , description = \"The detail message when the project can not be deleted.\" )","title":"ProjectDeletable"},{"location":"reference/models/models/#harborapi.models.models.ProjectDeletable.deletable","text":"","title":"deletable"},{"location":"reference/models/models/#harborapi.models.models.ProjectDeletable.message","text":"","title":"message"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata","text":"Source code in harborapi/models/models.py 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 class ProjectMetadata ( BaseModel ): public : Optional [ str ] = Field ( None , description = 'The public status of the project. The valid values are \"true\", \"false\".' , ) enable_content_trust : Optional [ str ] = Field ( None , description = 'Whether content trust is enabled or not. If it is enabled, user can \\' t pull unsigned images from this project. The valid values are \"true\", \"false\".' , ) enable_content_trust_cosign : Optional [ str ] = Field ( None , description = 'Whether cosign content trust is enabled or not. If it is enabled, user can \\' t pull images without cosign signature from this project. The valid values are \"true\", \"false\".' , ) prevent_vul : Optional [ str ] = Field ( None , description = 'Whether prevent the vulnerable images from running. The valid values are \"true\", \"false\".' , ) severity : Optional [ str ] = Field ( None , description = 'If the vulnerability is high than severity defined here, the images can \\' t be pulled. The valid values are \"none\", \"low\", \"medium\", \"high\", \"critical\".' , ) auto_scan : Optional [ str ] = Field ( None , description = 'Whether scan images automatically when pushing. The valid values are \"true\", \"false\".' , ) reuse_sys_cve_allowlist : Optional [ str ] = Field ( None , description = 'Whether this project reuse the system level CVE allowlist as the allowlist of its own. The valid values are \"true\", \"false\". If it is set to \"true\" the actual allowlist associate with this project, if any, will be ignored.' , ) retention_id : Optional [ str ] = Field ( None , description = \"The ID of the tag retention policy for the project\" )","title":"ProjectMetadata"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.public","text":"","title":"public"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.enable_content_trust","text":"","title":"enable_content_trust"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.enable_content_trust_cosign","text":"","title":"enable_content_trust_cosign"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.prevent_vul","text":"","title":"prevent_vul"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.severity","text":"","title":"severity"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.auto_scan","text":"","title":"auto_scan"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.reuse_sys_cve_allowlist","text":"","title":"reuse_sys_cve_allowlist"},{"location":"reference/models/models/#harborapi.models.models.ProjectMetadata.retention_id","text":"","title":"retention_id"},{"location":"reference/models/models/#harborapi.models.models.ProjectScanner","text":"Source code in harborapi/models/models.py 472 473 class ProjectScanner ( BaseModel ): uuid : str = Field ( ... , description = \"The identifier of the scanner registration\" )","title":"ProjectScanner"},{"location":"reference/models/models/#harborapi.models.models.ProjectScanner.uuid","text":"","title":"uuid"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlistItem","text":"Source code in harborapi/models/models.py 476 477 478 479 class CVEAllowlistItem ( BaseModel ): cve_id : Optional [ str ] = Field ( None , description = 'The ID of the CVE, such as \"CVE-2019-10164\"' )","title":"CVEAllowlistItem"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlistItem.cve_id","text":"","title":"cve_id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTriggerSettings","text":"Source code in harborapi/models/models.py 482 483 484 485 class ReplicationTriggerSettings ( BaseModel ): cron : Optional [ str ] = Field ( None , description = \"The cron string for scheduled trigger\" )","title":"ReplicationTriggerSettings"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTriggerSettings.cron","text":"","title":"cron"},{"location":"reference/models/models/#harborapi.models.models.ReplicationFilter","text":"Source code in harborapi/models/models.py 488 489 490 491 492 493 494 495 class ReplicationFilter ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The replication policy filter type.\" ) value : Optional [ Dict [ str , Any ]] = Field ( None , description = \"The value of replication policy filter.\" ) decoration : Optional [ str ] = Field ( None , description = \"matches or excludes the result\" )","title":"ReplicationFilter"},{"location":"reference/models/models/#harborapi.models.models.ReplicationFilter.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.ReplicationFilter.value","text":"","title":"value"},{"location":"reference/models/models/#harborapi.models.models.ReplicationFilter.decoration","text":"","title":"decoration"},{"location":"reference/models/models/#harborapi.models.models.RegistryCredential","text":"Source code in harborapi/models/models.py 498 499 500 501 502 503 504 505 506 507 508 class RegistryCredential ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"Credential type, such as 'basic', 'oauth'.\" ) access_key : Optional [ str ] = Field ( None , description = \"Access key, e.g. user name when credential type is 'basic'.\" ) access_secret : Optional [ str ] = Field ( None , description = \"Access secret, e.g. password when credential type is 'basic'.\" , )","title":"RegistryCredential"},{"location":"reference/models/models/#harborapi.models.models.RegistryCredential.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.RegistryCredential.access_key","text":"","title":"access_key"},{"location":"reference/models/models/#harborapi.models.models.RegistryCredential.access_secret","text":"","title":"access_secret"},{"location":"reference/models/models/#harborapi.models.models.Registry","text":"Source code in harborapi/models/models.py 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 class Registry ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The registry ID.\" ) url : Optional [ str ] = Field ( None , description = \"The registry URL string.\" ) name : Optional [ str ] = Field ( None , description = \"The registry name.\" ) credential : Optional [ RegistryCredential ] = None type : Optional [ str ] = Field ( None , description = \"Type of the registry, e.g. 'harbor'.\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the server.\" , ) description : Optional [ str ] = Field ( None , description = \"Description of the registry.\" ) status : Optional [ str ] = Field ( None , description = \"Health status of the registry.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The create time of the policy.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the policy.\" )","title":"Registry"},{"location":"reference/models/models/#harborapi.models.models.Registry.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Registry.url","text":"","title":"url"},{"location":"reference/models/models/#harborapi.models.models.Registry.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Registry.credential","text":"","title":"credential"},{"location":"reference/models/models/#harborapi.models.models.Registry.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.Registry.insecure","text":"","title":"insecure"},{"location":"reference/models/models/#harborapi.models.models.Registry.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.Registry.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.Registry.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Registry.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate","text":"Source code in harborapi/models/models.py 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 class RegistryUpdate ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The registry name.\" ) description : Optional [ str ] = Field ( None , description = \"Description of the registry.\" ) url : Optional [ str ] = Field ( None , description = \"The registry URL.\" ) credential_type : Optional [ str ] = Field ( None , description = \"Credential type of the registry, e.g. 'basic'.\" ) access_key : Optional [ str ] = Field ( None , description = \"The registry access key.\" ) access_secret : Optional [ str ] = Field ( None , description = \"The registry access secret.\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the server.\" , )","title":"RegistryUpdate"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.url","text":"","title":"url"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.credential_type","text":"","title":"credential_type"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.access_key","text":"","title":"access_key"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.access_secret","text":"","title":"access_secret"},{"location":"reference/models/models/#harborapi.models.models.RegistryUpdate.insecure","text":"","title":"insecure"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing","text":"Source code in harborapi/models/models.py 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 class RegistryPing ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The registry ID.\" ) type : Optional [ str ] = Field ( None , description = \"Type of the registry, e.g. 'harbor'.\" ) url : Optional [ str ] = Field ( None , description = \"The registry URL.\" ) credential_type : Optional [ str ] = Field ( None , description = \"Credential type of the registry, e.g. 'basic'.\" ) access_key : Optional [ str ] = Field ( None , description = \"The registry access key.\" ) access_secret : Optional [ str ] = Field ( None , description = \"The registry access secret.\" ) insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the server.\" , )","title":"RegistryPing"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.url","text":"","title":"url"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.credential_type","text":"","title":"credential_type"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.access_key","text":"","title":"access_key"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.access_secret","text":"","title":"access_secret"},{"location":"reference/models/models/#harborapi.models.models.RegistryPing.insecure","text":"","title":"insecure"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern","text":"Source code in harborapi/models/models.py 569 570 571 572 573 574 575 576 577 class RegistryProviderCredentialPattern ( BaseModel ): access_key_type : Optional [ str ] = Field ( None , description = \"The access key type\" ) access_key_data : Optional [ str ] = Field ( None , description = \"The access key data\" ) access_secret_type : Optional [ str ] = Field ( None , description = \"The access secret type\" ) access_secret_data : Optional [ str ] = Field ( None , description = \"The access secret data\" )","title":"RegistryProviderCredentialPattern"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_key_type","text":"","title":"access_key_type"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_key_data","text":"","title":"access_key_data"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_secret_type","text":"","title":"access_secret_type"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderCredentialPattern.access_secret_data","text":"","title":"access_secret_data"},{"location":"reference/models/models/#harborapi.models.models.RegistryEndpoint","text":"Source code in harborapi/models/models.py 580 581 582 class RegistryEndpoint ( BaseModel ): key : Optional [ str ] = Field ( None , description = \"The endpoint key\" ) value : Optional [ str ] = Field ( None , description = \"The endpoint value\" )","title":"RegistryEndpoint"},{"location":"reference/models/models/#harborapi.models.models.RegistryEndpoint.key","text":"","title":"key"},{"location":"reference/models/models/#harborapi.models.models.RegistryEndpoint.value","text":"","title":"value"},{"location":"reference/models/models/#harborapi.models.models.FilterStyle","text":"Source code in harborapi/models/models.py 585 586 587 588 class FilterStyle ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The filter type\" ) style : Optional [ str ] = Field ( None , description = \"The filter style\" ) values : Optional [ List [ str ]] = Field ( None , description = \"The filter values\" )","title":"FilterStyle"},{"location":"reference/models/models/#harborapi.models.models.FilterStyle.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.FilterStyle.style","text":"","title":"style"},{"location":"reference/models/models/#harborapi.models.models.FilterStyle.values","text":"","title":"values"},{"location":"reference/models/models/#harborapi.models.models.ResourceList","text":"Source code in harborapi/models/models.py 591 592 593 594 595 class ResourceList ( BaseModel ): pass class Config : extra = Extra . allow","title":"ResourceList"},{"location":"reference/models/models/#harborapi.models.models.ResourceList.Config","text":"Source code in harborapi/models/models.py 594 595 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.ResourceList.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution","text":"Source code in harborapi/models/models.py 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 class ReplicationExecution ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the execution\" ) policy_id : Optional [ int ] = Field ( None , description = \"The ID if the policy that the execution belongs to\" ) status : Optional [ str ] = Field ( None , description = \"The status of the execution\" ) trigger : Optional [ str ] = Field ( None , description = \"The trigger mode\" ) start_time : Optional [ datetime ] = Field ( None , description = \"The start time\" ) end_time : Optional [ datetime ] = Field ( None , description = \"The end time\" ) status_text : Optional [ str ] = Field ( None , description = \"The status text\" ) total : Optional [ int ] = Field ( None , description = \"The total count of all executions\" ) failed : Optional [ int ] = Field ( None , description = \"The count of failed executions\" ) succeed : Optional [ int ] = Field ( None , description = \"The count of succeed executions\" ) in_progress : Optional [ int ] = Field ( None , description = \"The count of in_progress executions\" ) stopped : Optional [ int ] = Field ( None , description = \"The count of stopped executions\" )","title":"ReplicationExecution"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.policy_id","text":"","title":"policy_id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.status_text","text":"","title":"status_text"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.total","text":"","title":"total"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.failed","text":"","title":"failed"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.succeed","text":"","title":"succeed"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.in_progress","text":"","title":"in_progress"},{"location":"reference/models/models/#harborapi.models.models.ReplicationExecution.stopped","text":"","title":"stopped"},{"location":"reference/models/models/#harborapi.models.models.StartReplicationExecution","text":"Source code in harborapi/models/models.py 617 618 619 620 class StartReplicationExecution ( BaseModel ): policy_id : Optional [ int ] = Field ( None , description = \"The ID of policy that the execution belongs to.\" )","title":"StartReplicationExecution"},{"location":"reference/models/models/#harborapi.models.models.StartReplicationExecution.policy_id","text":"","title":"policy_id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask","text":"Source code in harborapi/models/models.py 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 class ReplicationTask ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the task\" ) execution_id : Optional [ int ] = Field ( None , description = \"The ID of the execution that the task belongs to\" ) status : Optional [ str ] = Field ( None , description = \"The status of the task\" ) job_id : Optional [ str ] = Field ( None , description = \"The ID of the underlying job that the task related to\" ) operation : Optional [ str ] = Field ( None , description = \"The operation of the task\" ) resource_type : Optional [ str ] = Field ( None , description = \"The type of the resource that the task operates\" ) src_resource : Optional [ str ] = Field ( None , description = \"The source resource that the task operates\" ) dst_resource : Optional [ str ] = Field ( None , description = \"The destination resource that the task operates\" ) start_time : Optional [ datetime ] = Field ( None , description = \"The start time of the task\" ) end_time : Optional [ datetime ] = Field ( None , description = \"The end time of the task\" )","title":"ReplicationTask"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.execution_id","text":"","title":"execution_id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.job_id","text":"","title":"job_id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.operation","text":"","title":"operation"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.resource_type","text":"","title":"resource_type"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.src_resource","text":"","title":"src_resource"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.dst_resource","text":"","title":"dst_resource"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTask.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.RobotCreated","text":"Source code in harborapi/models/models.py 648 649 650 651 652 653 654 655 656 657 class RobotCreated ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the robot\" ) name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the robot.\" ) expires_at : Optional [ int ] = Field ( None , description = \"The expiration data of the robot\" )","title":"RobotCreated"},{"location":"reference/models/models/#harborapi.models.models.RobotCreated.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.RobotCreated.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.RobotCreated.secret","text":"","title":"secret"},{"location":"reference/models/models/#harborapi.models.models.RobotCreated.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.RobotCreated.expires_at","text":"","title":"expires_at"},{"location":"reference/models/models/#harborapi.models.models.RobotSec","text":"Source code in harborapi/models/models.py 660 661 class RobotSec ( BaseModel ): secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" )","title":"RobotSec"},{"location":"reference/models/models/#harborapi.models.models.RobotSec.secret","text":"","title":"secret"},{"location":"reference/models/models/#harborapi.models.models.Access","text":"Source code in harborapi/models/models.py 664 665 666 667 class Access ( BaseModel ): resource : Optional [ str ] = Field ( None , description = \"The resource of the access\" ) action : Optional [ str ] = Field ( None , description = \"The action of the access\" ) effect : Optional [ str ] = Field ( None , description = \"The effect of the access\" )","title":"Access"},{"location":"reference/models/models/#harborapi.models.models.Access.resource","text":"","title":"resource"},{"location":"reference/models/models/#harborapi.models.models.Access.action","text":"","title":"action"},{"location":"reference/models/models/#harborapi.models.models.Access.effect","text":"","title":"effect"},{"location":"reference/models/models/#harborapi.models.models.RobotCreateV1","text":"Source code in harborapi/models/models.py 670 671 672 673 674 675 676 677 678 679 680 681 class RobotCreateV1 ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The name of robot account\" ) description : Optional [ str ] = Field ( None , description = \"The description of robot account\" ) expires_at : Optional [ int ] = Field ( None , description = \"The expiration time on or after which the JWT MUST NOT be accepted for processing.\" , ) access : Optional [ List [ Access ]] = Field ( None , description = \"The permission of robot account\" )","title":"RobotCreateV1"},{"location":"reference/models/models/#harborapi.models.models.RobotCreateV1.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.RobotCreateV1.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.RobotCreateV1.expires_at","text":"","title":"expires_at"},{"location":"reference/models/models/#harborapi.models.models.RobotCreateV1.access","text":"","title":"access"},{"location":"reference/models/models/#harborapi.models.models.Storage","text":"Source code in harborapi/models/models.py 684 685 686 class Storage ( BaseModel ): total : Optional [ int ] = Field ( None , description = \"Total volume size.\" ) free : Optional [ int ] = Field ( None , description = \"Free volume size.\" )","title":"Storage"},{"location":"reference/models/models/#harborapi.models.models.Storage.total","text":"","title":"total"},{"location":"reference/models/models/#harborapi.models.models.Storage.free","text":"","title":"free"},{"location":"reference/models/models/#harborapi.models.models.AuthproxySetting","text":"Source code in harborapi/models/models.py 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 class AuthproxySetting ( BaseModel ): endpoint : Optional [ str ] = Field ( None , description = \"The fully qualified URI of login endpoint of authproxy, such as 'https://192.168.1.2:8443/login'\" , ) tokenreivew_endpoint : Optional [ str ] = Field ( None , description = \"The fully qualified URI of token review endpoint of authproxy, such as 'https://192.168.1.2:8443/tokenreview'\" , ) skip_search : Optional [ bool ] = Field ( None , description = \"The flag to determine whether Harbor can skip search the user/group when adding him as a member.\" , ) verify_cert : Optional [ bool ] = Field ( None , description = \"The flag to determine whether Harbor should verify the certificate when connecting to the auth proxy.\" , ) server_certificate : Optional [ str ] = Field ( None , description = \"The certificate to be pinned when connecting auth proxy.\" )","title":"AuthproxySetting"},{"location":"reference/models/models/#harborapi.models.models.AuthproxySetting.endpoint","text":"","title":"endpoint"},{"location":"reference/models/models/#harborapi.models.models.AuthproxySetting.tokenreivew_endpoint","text":"","title":"tokenreivew_endpoint"},{"location":"reference/models/models/#harborapi.models.models.AuthproxySetting.skip_search","text":"","title":"skip_search"},{"location":"reference/models/models/#harborapi.models.models.AuthproxySetting.verify_cert","text":"","title":"verify_cert"},{"location":"reference/models/models/#harborapi.models.models.AuthproxySetting.server_certificate","text":"","title":"server_certificate"},{"location":"reference/models/models/#harborapi.models.models.SystemInfo","text":"Source code in harborapi/models/models.py 711 712 class SystemInfo ( BaseModel ): storage : Optional [ List [ Storage ]] = Field ( None , description = \"The storage of system.\" )","title":"SystemInfo"},{"location":"reference/models/models/#harborapi.models.models.SystemInfo.storage","text":"","title":"storage"},{"location":"reference/models/models/#harborapi.models.models.Type","text":"Source code in harborapi/models/models.py 715 716 717 718 719 720 721 class Type ( Enum ): hourly = \"Hourly\" daily = \"Daily\" weekly = \"Weekly\" custom = \"Custom\" manual = \"Manual\" none = \"None\"","title":"Type"},{"location":"reference/models/models/#harborapi.models.models.Type.hourly","text":"","title":"hourly"},{"location":"reference/models/models/#harborapi.models.models.Type.daily","text":"","title":"daily"},{"location":"reference/models/models/#harborapi.models.models.Type.weekly","text":"","title":"weekly"},{"location":"reference/models/models/#harborapi.models.models.Type.custom","text":"","title":"custom"},{"location":"reference/models/models/#harborapi.models.models.Type.manual","text":"","title":"manual"},{"location":"reference/models/models/#harborapi.models.models.Type.none","text":"","title":"none"},{"location":"reference/models/models/#harborapi.models.models.ScheduleObj","text":"Source code in harborapi/models/models.py 724 725 726 727 728 729 730 731 732 733 734 class ScheduleObj ( BaseModel ): type : Optional [ Type ] = Field ( None , description = \"The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'. \\n 'Manual' means to trigger it right away and 'None' means to cancel the schedule. \\n \" , ) cron : Optional [ str ] = Field ( None , description = \"A cron expression, a time-based job scheduler.\" ) next_scheduled_time : Optional [ datetime ] = Field ( None , description = \"The next time to schedule to run the job.\" )","title":"ScheduleObj"},{"location":"reference/models/models/#harborapi.models.models.ScheduleObj.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.ScheduleObj.cron","text":"","title":"cron"},{"location":"reference/models/models/#harborapi.models.models.ScheduleObj.next_scheduled_time","text":"","title":"next_scheduled_time"},{"location":"reference/models/models/#harborapi.models.models.Trigger","text":"Source code in harborapi/models/models.py 737 738 739 740 class Trigger ( Enum ): manual = \"Manual\" schedule = \"Schedule\" event = \"Event\"","title":"Trigger"},{"location":"reference/models/models/#harborapi.models.models.Trigger.manual","text":"","title":"manual"},{"location":"reference/models/models/#harborapi.models.models.Trigger.schedule","text":"","title":"schedule"},{"location":"reference/models/models/#harborapi.models.models.Trigger.event","text":"","title":"event"},{"location":"reference/models/models/#harborapi.models.models.Stats","text":"Source code in harborapi/models/models.py 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 class Stats ( BaseModel ): total : Optional [ int ] = Field ( None , description = \"The total number of scan processes triggered by the scan all action\" , example = 100 , ) completed : Optional [ int ] = Field ( None , description = \"The number of the finished scan processes triggered by the scan all action\" , example = 90 , ) metrics : Optional [ Dict [ str , int ]] = Field ( None , description = \"The metrics data for the each status\" , example = { \"Success\" : 5 , \"Error\" : 2 , \"Running\" : 3 }, ) ongoing : Optional [ bool ] = Field ( None , description = \"A flag indicating job status of scan all.\" ) trigger : Optional [ Trigger ] = Field ( None , description = \"The trigger of the scan all job.\" )","title":"Stats"},{"location":"reference/models/models/#harborapi.models.models.Stats.total","text":"","title":"total"},{"location":"reference/models/models/#harborapi.models.models.Stats.completed","text":"","title":"completed"},{"location":"reference/models/models/#harborapi.models.models.Stats.metrics","text":"","title":"metrics"},{"location":"reference/models/models/#harborapi.models.models.Stats.ongoing","text":"","title":"ongoing"},{"location":"reference/models/models/#harborapi.models.models.Stats.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata","text":"Source code in harborapi/models/models.py 767 768 769 770 class RetentionRuleParamMetadata ( BaseModel ): type : Optional [ str ] = None unit : Optional [ str ] = None required : Optional [ bool ] = None","title":"RetentionRuleParamMetadata"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata.unit","text":"","title":"unit"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleParamMetadata.required","text":"","title":"required"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelectorMetadata","text":"Source code in harborapi/models/models.py 773 774 775 776 class RetentionSelectorMetadata ( BaseModel ): display_text : Optional [ str ] = None kind : Optional [ str ] = None decorations : Optional [ List [ str ]] = None","title":"RetentionSelectorMetadata"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelectorMetadata.display_text","text":"","title":"display_text"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelectorMetadata.kind","text":"","title":"kind"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelectorMetadata.decorations","text":"","title":"decorations"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleTrigger","text":"Source code in harborapi/models/models.py 779 780 781 782 class RetentionRuleTrigger ( BaseModel ): kind : Optional [ str ] = None settings : Optional [ Dict [ str , Any ]] = None references : Optional [ Dict [ str , Any ]] = None","title":"RetentionRuleTrigger"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleTrigger.kind","text":"","title":"kind"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleTrigger.settings","text":"","title":"settings"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleTrigger.references","text":"","title":"references"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicyScope","text":"Source code in harborapi/models/models.py 785 786 787 class RetentionPolicyScope ( BaseModel ): level : Optional [ str ] = None ref : Optional [ int ] = None","title":"RetentionPolicyScope"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicyScope.level","text":"","title":"level"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicyScope.ref","text":"","title":"ref"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelector","text":"Source code in harborapi/models/models.py 790 791 792 793 794 class RetentionSelector ( BaseModel ): kind : Optional [ str ] = None decoration : Optional [ str ] = None pattern : Optional [ str ] = None extras : Optional [ str ] = None","title":"RetentionSelector"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelector.kind","text":"","title":"kind"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelector.decoration","text":"","title":"decoration"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelector.pattern","text":"","title":"pattern"},{"location":"reference/models/models/#harborapi.models.models.RetentionSelector.extras","text":"","title":"extras"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution","text":"Source code in harborapi/models/models.py 797 798 799 800 801 802 803 804 class RetentionExecution ( BaseModel ): id : Optional [ int ] = None policy_id : Optional [ int ] = None start_time : Optional [ str ] = None end_time : Optional [ str ] = None status : Optional [ str ] = None trigger : Optional [ str ] = None dry_run : Optional [ bool ] = None","title":"RetentionExecution"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.policy_id","text":"","title":"policy_id"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecution.dry_run","text":"","title":"dry_run"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask","text":"Source code in harborapi/models/models.py 807 808 809 810 811 812 813 814 815 816 817 818 class RetentionExecutionTask ( BaseModel ): id : Optional [ int ] = None execution_id : Optional [ int ] = None repository : Optional [ str ] = None job_id : Optional [ str ] = None status : Optional [ str ] = None status_code : Optional [ int ] = None status_revision : Optional [ int ] = None start_time : Optional [ str ] = None end_time : Optional [ str ] = None total : Optional [ int ] = None retained : Optional [ int ] = None","title":"RetentionExecutionTask"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.execution_id","text":"","title":"execution_id"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.repository","text":"","title":"repository"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.job_id","text":"","title":"job_id"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.status_code","text":"","title":"status_code"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.status_revision","text":"","title":"status_revision"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.total","text":"","title":"total"},{"location":"reference/models/models/#harborapi.models.models.RetentionExecutionTask.retained","text":"","title":"retained"},{"location":"reference/models/models/#harborapi.models.models.QuotaUpdateReq","text":"Source code in harborapi/models/models.py 821 822 823 824 class QuotaUpdateReq ( BaseModel ): hard : Optional [ ResourceList ] = Field ( None , description = \"The new hard limits for the quota\" )","title":"QuotaUpdateReq"},{"location":"reference/models/models/#harborapi.models.models.QuotaUpdateReq.hard","text":"","title":"hard"},{"location":"reference/models/models/#harborapi.models.models.QuotaRefObject","text":"Source code in harborapi/models/models.py 827 828 829 830 831 class QuotaRefObject ( BaseModel ): pass class Config : extra = Extra . allow","title":"QuotaRefObject"},{"location":"reference/models/models/#harborapi.models.models.QuotaRefObject.Config","text":"Source code in harborapi/models/models.py 830 831 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.QuotaRefObject.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.Quota","text":"Source code in harborapi/models/models.py 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 class Quota ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"ID of the quota\" ) ref : Optional [ QuotaRefObject ] = Field ( None , description = \"The reference object of the quota\" ) hard : Optional [ ResourceList ] = Field ( None , description = \"The hard limits of the quota\" ) used : Optional [ ResourceList ] = Field ( None , description = \"The used status of the quota\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of the quota\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of the quota\" )","title":"Quota"},{"location":"reference/models/models/#harborapi.models.models.Quota.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Quota.ref","text":"","title":"ref"},{"location":"reference/models/models/#harborapi.models.models.Quota.hard","text":"","title":"hard"},{"location":"reference/models/models/#harborapi.models.models.Quota.used","text":"","title":"used"},{"location":"reference/models/models/#harborapi.models.models.Quota.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Quota.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration","text":"Source code in harborapi/models/models.py 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 class ScannerRegistration ( BaseModel ): uuid : Optional [ str ] = Field ( None , description = \"The unique identifier of this registration.\" ) name : Optional [ str ] = Field ( None , description = \"The name of this registration.\" , example = \"Trivy\" ) description : Optional [ str ] = Field ( None , description = \"An optional description of this registration.\" , example = \"A free-to-use tool that scans container images for package vulnerabilities. \\n \" , ) url : Optional [ str ] = Field ( None , description = \"A base URL of the scanner adapter\" , example = \"http://harbor-scanner-trivy:8080\" , ) disabled : Optional [ bool ] = Field ( False , description = \"Indicate whether the registration is enabled or not\" ) is_default : Optional [ bool ] = Field ( False , description = \"Indicate if the registration is set as the system default one\" , ) auth : Optional [ str ] = Field ( \"\" , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , example = \"Bearer\" , ) access_credential : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n \" , example = \"Bearer: JWTTOKENGOESHERE\" , ) skip_cert_verify : Optional [ bool ] = Field ( False , alias = \"skip_certVerify\" , description = \"Indicate if skip the certificate verification when sending HTTP requests\" , ) use_internal_addr : Optional [ bool ] = Field ( False , description = \"Indicate whether use internal registry addr for the scanner to pull content or not\" , ) create_time : Optional [ datetime ] = Field ( None , description = \"The creation time of this registration\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of this registration\" ) adapter : Optional [ str ] = Field ( None , description = \"Optional property to describe the name of the scanner registration\" , example = \"Trivy\" , ) vendor : Optional [ str ] = Field ( None , description = \"Optional property to describe the vendor of the scanner registration\" , example = \"CentOS\" , ) version : Optional [ str ] = Field ( None , description = \"Optional property to describe the version of the scanner registration\" , example = \"1.0.1\" , ) health : Optional [ str ] = Field ( \"\" , description = \"Indicate the healthy of the registration\" , example = \"healthy\" )","title":"ScannerRegistration"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.uuid","text":"","title":"uuid"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.url","text":"","title":"url"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.disabled","text":"","title":"disabled"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.is_default","text":"","title":"is_default"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.auth","text":"","title":"auth"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.access_credential","text":"","title":"access_credential"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.skip_cert_verify","text":"","title":"skip_cert_verify"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.use_internal_addr","text":"","title":"use_internal_addr"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.create_time","text":"","title":"create_time"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.adapter","text":"","title":"adapter"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.vendor","text":"","title":"vendor"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.version","text":"","title":"version"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistration.health","text":"","title":"health"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq","text":"Source code in harborapi/models/models.py 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 class ScannerRegistrationReq ( BaseModel ): name : str = Field ( ... , description = \"The name of this registration\" , example = \"Trivy\" ) description : Optional [ str ] = Field ( None , description = \"An optional description of this registration.\" , example = \"A free-to-use tool that scans container images for package vulnerabilities. \\n \" , ) url : AnyUrl = Field ( ... , description = \"A base URL of the scanner adapter.\" , example = \"http://harbor-scanner-trivy:8080\" , ) auth : Optional [ str ] = Field ( None , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , example = \"Bearer\" , ) access_credential : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n \" , example = \"Bearer: JWTTOKENGOESHERE\" , ) skip_cert_verify : Optional [ bool ] = Field ( False , alias = \"skip_certVerify\" , description = \"Indicate if skip the certificate verification when sending HTTP requests\" , ) use_internal_addr : Optional [ bool ] = Field ( False , description = \"Indicate whether use internal registry addr for the scanner to pull content or not\" , ) disabled : Optional [ bool ] = Field ( False , description = \"Indicate whether the registration is enabled or not\" )","title":"ScannerRegistrationReq"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.url","text":"","title":"url"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.auth","text":"","title":"auth"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.access_credential","text":"","title":"access_credential"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.skip_cert_verify","text":"","title":"skip_cert_verify"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.use_internal_addr","text":"","title":"use_internal_addr"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationReq.disabled","text":"","title":"disabled"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationSettings","text":"Source code in harborapi/models/models.py 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 class ScannerRegistrationSettings ( BaseModel ): name : str = Field ( ... , description = \"The name of this registration\" , example = \"Trivy\" ) url : AnyUrl = Field ( ... , description = \"A base URL of the scanner adapter.\" , example = \"http://harbor-scanner-trivy:8080\" , ) auth : Optional [ str ] = Field ( \"\" , description = 'Specify what authentication approach is adopted for the HTTP communications. \\n Supported types Basic\", \"Bearer\" and api key header \"X-ScannerAdapter-API-Key\" \\n ' , ) access_credential : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Scanner Adapter API. \\n \" , example = \"Bearer: JWTTOKENGOESHERE\" , )","title":"ScannerRegistrationSettings"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.url","text":"","title":"url"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.auth","text":"","title":"auth"},{"location":"reference/models/models/#harborapi.models.models.ScannerRegistrationSettings.access_credential","text":"","title":"access_credential"},{"location":"reference/models/models/#harborapi.models.models.IsDefault","text":"Source code in harborapi/models/models.py 976 977 978 979 class IsDefault ( BaseModel ): is_default : Optional [ bool ] = Field ( None , description = \"A flag indicating whether a scanner registration is default.\" )","title":"IsDefault"},{"location":"reference/models/models/#harborapi.models.models.IsDefault.is_default","text":"","title":"is_default"},{"location":"reference/models/models/#harborapi.models.models.ScannerCapability","text":"Source code in harborapi/models/models.py 982 983 984 class ScannerCapability ( BaseModel ): consumes_mime_types : Optional [ List [ str ]] = None produces_mime_types : Optional [ List [ str ]] = None","title":"ScannerCapability"},{"location":"reference/models/models/#harborapi.models.models.ScannerCapability.consumes_mime_types","text":"","title":"consumes_mime_types"},{"location":"reference/models/models/#harborapi.models.models.ScannerCapability.produces_mime_types","text":"","title":"produces_mime_types"},{"location":"reference/models/models/#harborapi.models.models.ScannerAdapterMetadata","text":"Source code in harborapi/models/models.py 987 988 989 990 991 992 class ScannerAdapterMetadata ( BaseModel ): scanner : Optional [ Scanner ] = None capabilities : Optional [ List [ ScannerCapability ]] = None properties : Optional [ Dict [ str , str ]] = Field ( None , example = { \"harbor.scanner-adapter/registry-authorization-type\" : \"Bearer\" } )","title":"ScannerAdapterMetadata"},{"location":"reference/models/models/#harborapi.models.models.ScannerAdapterMetadata.scanner","text":"","title":"scanner"},{"location":"reference/models/models/#harborapi.models.models.ScannerAdapterMetadata.capabilities","text":"","title":"capabilities"},{"location":"reference/models/models/#harborapi.models.models.ScannerAdapterMetadata.properties","text":"","title":"properties"},{"location":"reference/models/models/#harborapi.models.models.ImmutableSelector","text":"Source code in harborapi/models/models.py 995 996 997 998 999 class ImmutableSelector ( BaseModel ): kind : Optional [ str ] = None decoration : Optional [ str ] = None pattern : Optional [ str ] = None extras : Optional [ str ] = None","title":"ImmutableSelector"},{"location":"reference/models/models/#harborapi.models.models.ImmutableSelector.kind","text":"","title":"kind"},{"location":"reference/models/models/#harborapi.models.models.ImmutableSelector.decoration","text":"","title":"decoration"},{"location":"reference/models/models/#harborapi.models.models.ImmutableSelector.pattern","text":"","title":"pattern"},{"location":"reference/models/models/#harborapi.models.models.ImmutableSelector.extras","text":"","title":"extras"},{"location":"reference/models/models/#harborapi.models.models.LdapConf","text":"Source code in harborapi/models/models.py 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 class LdapConf ( BaseModel ): ldap_url : Optional [ str ] = Field ( None , description = \"The url of ldap service.\" ) ldap_search_dn : Optional [ str ] = Field ( None , description = \"The search dn of ldap service.\" ) ldap_search_password : Optional [ str ] = Field ( None , description = \"The search password of ldap service.\" ) ldap_base_dn : Optional [ str ] = Field ( None , description = \"The base dn of ldap service.\" ) ldap_filter : Optional [ str ] = Field ( None , description = \"The serach filter of ldap service.\" ) ldap_uid : Optional [ str ] = Field ( None , description = \"The serach uid from ldap service attributes.\" ) ldap_scope : Optional [ int ] = Field ( None , description = \"The serach scope of ldap service.\" ) ldap_connection_timeout : Optional [ int ] = Field ( None , description = \"The connect timeout of ldap service(second).\" ) ldap_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify Ldap server certificate.\" )","title":"LdapConf"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_url","text":"","title":"ldap_url"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_search_dn","text":"","title":"ldap_search_dn"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_search_password","text":"","title":"ldap_search_password"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_base_dn","text":"","title":"ldap_base_dn"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_filter","text":"","title":"ldap_filter"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_uid","text":"","title":"ldap_uid"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_scope","text":"","title":"ldap_scope"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_connection_timeout","text":"","title":"ldap_connection_timeout"},{"location":"reference/models/models/#harborapi.models.models.LdapConf.ldap_verify_cert","text":"","title":"ldap_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.LdapPingResult","text":"Source code in harborapi/models/models.py 1030 1031 1032 1033 1034 class LdapPingResult ( BaseModel ): success : Optional [ bool ] = Field ( None , description = \"Test success\" ) message : Optional [ str ] = Field ( None , description = \"The ping operation output message.\" )","title":"LdapPingResult"},{"location":"reference/models/models/#harborapi.models.models.LdapPingResult.success","text":"","title":"success"},{"location":"reference/models/models/#harborapi.models.models.LdapPingResult.message","text":"","title":"message"},{"location":"reference/models/models/#harborapi.models.models.LdapImportUsers","text":"Source code in harborapi/models/models.py 1037 1038 class LdapImportUsers ( BaseModel ): ldap_uid_list : Optional [ List [ str ]] = Field ( None , description = \"selected uid list\" )","title":"LdapImportUsers"},{"location":"reference/models/models/#harborapi.models.models.LdapImportUsers.ldap_uid_list","text":"","title":"ldap_uid_list"},{"location":"reference/models/models/#harborapi.models.models.LdapFailedImportUser","text":"Source code in harborapi/models/models.py 1041 1042 1043 class LdapFailedImportUser ( BaseModel ): uid : Optional [ str ] = Field ( None , description = \"the uid can't add to system.\" ) error : Optional [ str ] = Field ( None , description = \"fail reason.\" )","title":"LdapFailedImportUser"},{"location":"reference/models/models/#harborapi.models.models.LdapFailedImportUser.uid","text":"","title":"uid"},{"location":"reference/models/models/#harborapi.models.models.LdapFailedImportUser.error","text":"","title":"error"},{"location":"reference/models/models/#harborapi.models.models.LdapUser","text":"Source code in harborapi/models/models.py 1046 1047 1048 1049 1050 1051 1052 1053 class LdapUser ( BaseModel ): username : Optional [ str ] = Field ( None , description = \"ldap username.\" ) realname : Optional [ str ] = Field ( None , description = 'The user realname from \"uid\" or \"cn\" attribute.' ) email : Optional [ str ] = Field ( None , description = 'The user email address from \"mail\" or \"email\" attribute.' )","title":"LdapUser"},{"location":"reference/models/models/#harborapi.models.models.LdapUser.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.LdapUser.realname","text":"","title":"realname"},{"location":"reference/models/models/#harborapi.models.models.LdapUser.email","text":"","title":"email"},{"location":"reference/models/models/#harborapi.models.models.UserGroup","text":"Source code in harborapi/models/models.py 1056 1057 1058 1059 1060 1061 1062 1063 1064 class UserGroup ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the user group\" ) group_name : Optional [ str ] = Field ( None , description = \"The name of the user group\" ) group_type : Optional [ int ] = Field ( None , description = \"The group type, 1 for LDAP group, 2 for HTTP group.\" ) ldap_group_dn : Optional [ str ] = Field ( None , description = \"The DN of the LDAP group if group type is 1 (LDAP group).\" )","title":"UserGroup"},{"location":"reference/models/models/#harborapi.models.models.UserGroup.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.UserGroup.group_name","text":"","title":"group_name"},{"location":"reference/models/models/#harborapi.models.models.UserGroup.group_type","text":"","title":"group_type"},{"location":"reference/models/models/#harborapi.models.models.UserGroup.ldap_group_dn","text":"","title":"ldap_group_dn"},{"location":"reference/models/models/#harborapi.models.models.UserGroupSearchItem","text":"Source code in harborapi/models/models.py 1067 1068 1069 1070 1071 1072 class UserGroupSearchItem ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the user group\" ) group_name : Optional [ str ] = Field ( None , description = \"The name of the user group\" ) group_type : Optional [ int ] = Field ( None , description = \"The group type, 1 for LDAP group, 2 for HTTP group.\" )","title":"UserGroupSearchItem"},{"location":"reference/models/models/#harborapi.models.models.UserGroupSearchItem.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.UserGroupSearchItem.group_name","text":"","title":"group_name"},{"location":"reference/models/models/#harborapi.models.models.UserGroupSearchItem.group_type","text":"","title":"group_type"},{"location":"reference/models/models/#harborapi.models.models.EventType","text":"Source code in harborapi/models/models.py 1075 1076 1077 1078 class EventType ( BaseModel ): __root__ : str = Field ( ... , description = \"Webhook supportted event type.\" , example = \"pullImage\" )","title":"EventType"},{"location":"reference/models/models/#harborapi.models.models.EventType.__root__","text":"","title":"__root__"},{"location":"reference/models/models/#harborapi.models.models.NotifyType","text":"Source code in harborapi/models/models.py 1081 1082 1083 1084 class NotifyType ( BaseModel ): __root__ : str = Field ( ... , description = \"Webhook supportted notify type.\" , example = \"http\" )","title":"NotifyType"},{"location":"reference/models/models/#harborapi.models.models.NotifyType.__root__","text":"","title":"__root__"},{"location":"reference/models/models/#harborapi.models.models.WebhookTargetObject","text":"Source code in harborapi/models/models.py 1087 1088 1089 1090 1091 1092 1093 class WebhookTargetObject ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The webhook target notify type.\" ) address : Optional [ str ] = Field ( None , description = \"The webhook target address.\" ) auth_header : Optional [ str ] = Field ( None , description = \"The webhook auth header.\" ) skip_cert_verify : Optional [ bool ] = Field ( None , description = \"Whether or not to skip cert verify.\" )","title":"WebhookTargetObject"},{"location":"reference/models/models/#harborapi.models.models.WebhookTargetObject.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.WebhookTargetObject.address","text":"","title":"address"},{"location":"reference/models/models/#harborapi.models.models.WebhookTargetObject.auth_header","text":"","title":"auth_header"},{"location":"reference/models/models/#harborapi.models.models.WebhookTargetObject.skip_cert_verify","text":"","title":"skip_cert_verify"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy","text":"Source code in harborapi/models/models.py 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 class WebhookPolicy ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The webhook policy ID.\" ) name : Optional [ str ] = Field ( None , description = \"The name of webhook policy.\" ) description : Optional [ str ] = Field ( None , description = \"The description of webhook policy.\" ) project_id : Optional [ int ] = Field ( None , description = \"The project ID of webhook policy.\" ) targets : Optional [ List [ WebhookTargetObject ]] = None event_types : Optional [ List [ str ]] = None creator : Optional [ str ] = Field ( None , description = \"The creator of the webhook policy.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The create time of the webhook policy.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the webhook policy.\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the webhook policy is enabled or not.\" )","title":"WebhookPolicy"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.targets","text":"","title":"targets"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.event_types","text":"","title":"event_types"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.creator","text":"","title":"creator"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.WebhookPolicy.enabled","text":"","title":"enabled"},{"location":"reference/models/models/#harborapi.models.models.WebhookLastTrigger","text":"Source code in harborapi/models/models.py 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 class WebhookLastTrigger ( BaseModel ): policy_name : Optional [ str ] = Field ( None , description = \"The webhook policy name.\" ) event_type : Optional [ str ] = Field ( None , description = \"The webhook event type.\" ) enabled : Optional [ bool ] = Field ( None , description = \"Whether or not the webhook policy enabled.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of webhook policy.\" ) last_trigger_time : Optional [ datetime ] = Field ( None , description = \"The last trigger time of webhook policy.\" )","title":"WebhookLastTrigger"},{"location":"reference/models/models/#harborapi.models.models.WebhookLastTrigger.policy_name","text":"","title":"policy_name"},{"location":"reference/models/models/#harborapi.models.models.WebhookLastTrigger.event_type","text":"","title":"event_type"},{"location":"reference/models/models/#harborapi.models.models.WebhookLastTrigger.enabled","text":"","title":"enabled"},{"location":"reference/models/models/#harborapi.models.models.WebhookLastTrigger.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.WebhookLastTrigger.last_trigger_time","text":"","title":"last_trigger_time"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob","text":"Source code in harborapi/models/models.py 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 class WebhookJob ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The webhook job ID.\" ) policy_id : Optional [ int ] = Field ( None , description = \"The webhook policy ID.\" ) event_type : Optional [ str ] = Field ( None , description = \"The webhook job event type.\" ) notify_type : Optional [ str ] = Field ( None , description = \"The webhook job notify type.\" ) status : Optional [ str ] = Field ( None , description = \"The webhook job status.\" ) job_detail : Optional [ str ] = Field ( None , description = \"The webhook job notify detailed data.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The webhook job creation time.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The webhook job update time.\" )","title":"WebhookJob"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.policy_id","text":"","title":"policy_id"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.event_type","text":"","title":"event_type"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.notify_type","text":"","title":"notify_type"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.job_detail","text":"","title":"job_detail"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.WebhookJob.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.InternalConfigurationsResponse","text":"Source code in harborapi/models/models.py 1152 1153 1154 1155 1156 class InternalConfigurationsResponse ( BaseModel ): pass class Config : extra = Extra . allow","title":"InternalConfigurationsResponse"},{"location":"reference/models/models/#harborapi.models.models.InternalConfigurationsResponse.Config","text":"Source code in harborapi/models/models.py 1155 1156 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/models/#harborapi.models.models.InternalConfigurationsResponse.Config.extra","text":"","title":"extra"},{"location":"reference/models/models/#harborapi.models.models.InternalConfigurationValue","text":"Source code in harborapi/models/models.py 1159 1160 1161 1162 1163 1164 1165 class InternalConfigurationValue ( BaseModel ): value : Optional [ Dict [ str , Any ]] = Field ( None , description = \"The value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" )","title":"InternalConfigurationValue"},{"location":"reference/models/models/#harborapi.models.models.InternalConfigurationValue.value","text":"","title":"value"},{"location":"reference/models/models/#harborapi.models.models.InternalConfigurationValue.editable","text":"","title":"editable"},{"location":"reference/models/models/#harborapi.models.models.Parameter","text":"Source code in harborapi/models/models.py 1168 1169 1170 1171 1172 class Parameter ( BaseModel ): daily_time : Optional [ int ] = Field ( None , description = 'The offset in seconds of UTC 0 o \\' clock, only valid when the policy type is \"daily\"' , )","title":"Parameter"},{"location":"reference/models/models/#harborapi.models.models.Parameter.daily_time","text":"","title":"daily_time"},{"location":"reference/models/models/#harborapi.models.models.ScanAllPolicy","text":"Source code in harborapi/models/models.py 1175 1176 1177 1178 1179 1180 1181 1182 1183 class ScanAllPolicy ( BaseModel ): type : Optional [ str ] = Field ( None , description = 'The type of scan all policy, currently the valid values are \"none\" and \"daily\"' , ) parameter : Optional [ Parameter ] = Field ( None , description = \"The parameters of the policy, the values are dependent on the type of the policy.\" , )","title":"ScanAllPolicy"},{"location":"reference/models/models/#harborapi.models.models.ScanAllPolicy.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.ScanAllPolicy.parameter","text":"","title":"parameter"},{"location":"reference/models/models/#harborapi.models.models.Configurations","text":"Source code in harborapi/models/models.py 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 class Configurations ( BaseModel ): auth_mode : Optional [ str ] = Field ( None , description = 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"' , ) email_from : Optional [ str ] = Field ( None , description = \"The sender name for Email notification.\" ) email_host : Optional [ str ] = Field ( None , description = \"The hostname of SMTP server that sends Email notification.\" ) email_identity : Optional [ str ] = Field ( None , description = \"By default it's empty so the email_username is picked\" ) email_insecure : Optional [ bool ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the email server.\" , ) email_password : Optional [ str ] = Field ( None , description = \"Email password\" ) email_port : Optional [ int ] = Field ( None , description = \"The port of SMTP server\" ) email_ssl : Optional [ bool ] = Field ( None , description = \"When it''s set to true the system will access Email server via TLS by default. If it''s set to false, it still will handle \\\" STARTTLS \\\" from server side.\" , ) email_username : Optional [ str ] = Field ( None , description = \"The username for authenticate against SMTP server\" ) ldap_base_dn : Optional [ str ] = Field ( None , description = \"The Base DN for LDAP binding.\" ) ldap_filter : Optional [ str ] = Field ( None , description = \"The filter for LDAP search\" ) ldap_group_base_dn : Optional [ str ] = Field ( None , description = \"The base DN to search LDAP group.\" ) ldap_group_admin_dn : Optional [ str ] = Field ( None , description = \"Specify the ldap group which have the same privilege with Harbor admin\" , ) ldap_group_attribute_name : Optional [ str ] = Field ( None , description = \"The attribute which is used as identity of the LDAP group, default is cn.'\" , ) ldap_group_search_filter : Optional [ str ] = Field ( None , description = \"The filter to search the ldap group\" ) ldap_group_search_scope : Optional [ int ] = Field ( None , description = \"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\" , ) ldap_scope : Optional [ int ] = Field ( None , description = \"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\" , ) ldap_search_dn : Optional [ str ] = Field ( None , description = \"The DN of the user to do the search.\" ) ldap_search_password : Optional [ str ] = Field ( None , description = \"The password of the ldap search dn\" ) ldap_timeout : Optional [ int ] = Field ( None , description = \"Timeout in seconds for connection to LDAP server\" ) ldap_uid : Optional [ str ] = Field ( None , description = 'The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"' , ) ldap_url : Optional [ str ] = Field ( None , description = \"The URL of LDAP server\" ) ldap_verify_cert : Optional [ bool ] = Field ( None , description = \"Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.\" , ) ldap_group_membership_attribute : Optional [ str ] = Field ( None , description = \"The user attribute to identify the group membership\" ) project_creation_restriction : Optional [ str ] = Field ( None , description = \"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\" , ) read_only : Optional [ bool ] = Field ( None , description = \"The flag to indicate whether Harbor is in readonly mode.\" ) self_registration : Optional [ bool ] = Field ( None , description = \"Whether the Harbor instance supports self-registration. If it''s set to false, admin need to add user to the instance.\" , ) token_expiration : Optional [ int ] = Field ( None , description = \"The expiration time of the token for internal Registry, in minutes.\" , ) uaa_client_id : Optional [ str ] = Field ( None , description = \"The client id of UAA\" ) uaa_client_secret : Optional [ str ] = Field ( None , description = \"The client secret of the UAA\" ) uaa_endpoint : Optional [ str ] = Field ( None , description = \"The endpoint of the UAA\" ) uaa_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the certificate in UAA server\" ) http_authproxy_endpoint : Optional [ str ] = Field ( None , description = \"The endpoint of the HTTP auth\" ) http_authproxy_tokenreview_endpoint : Optional [ str ] = Field ( None , description = \"The token review endpoint\" ) http_authproxy_admin_groups : Optional [ str ] = Field ( None , description = \"The group which has the harbor admin privileges\" ) http_authproxy_admin_usernames : Optional [ str ] = Field ( None , description = \"The username which has the harbor admin privileges\" ) http_authproxy_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the HTTP auth provider's certificate\" ) http_authproxy_skip_search : Optional [ bool ] = Field ( None , description = \"Search user before onboard\" ) http_authproxy_server_certificate : Optional [ str ] = Field ( None , description = \"The certificate of the HTTP auth provider\" ) oidc_name : Optional [ str ] = Field ( None , description = \"The OIDC provider name\" ) oidc_endpoint : Optional [ str ] = Field ( None , description = \"The endpoint of the OIDC provider\" ) oidc_client_id : Optional [ str ] = Field ( None , description = \"The client ID of the OIDC provider\" ) oidc_client_secret : Optional [ str ] = Field ( None , description = \"The OIDC provider secret\" ) oidc_groups_claim : Optional [ str ] = Field ( None , description = \"The attribute claims the group name\" ) oidc_admin_group : Optional [ str ] = Field ( None , description = \"The OIDC group which has the harbor admin privileges\" ) oidc_scope : Optional [ str ] = Field ( None , description = \"The scope of the OIDC provider\" ) oidc_user_claim : Optional [ str ] = Field ( None , description = \"The attribute claims the username\" ) oidc_verify_cert : Optional [ bool ] = Field ( None , description = \"Verify the OIDC provider's certificate'\" ) oidc_auto_onboard : Optional [ bool ] = Field ( None , description = \"Auto onboard the OIDC user\" ) oidc_extra_redirect_parms : Optional [ str ] = Field ( None , description = \"Extra parameters to add when redirect request to OIDC provider\" , ) robot_token_duration : Optional [ int ] = Field ( None , description = \"The robot account token duration in days\" ) robot_name_prefix : Optional [ str ] = Field ( None , description = \"The rebot account name prefix\" ) notification_enable : Optional [ bool ] = Field ( None , description = \"Enable notification\" ) quota_per_project_enable : Optional [ bool ] = Field ( None , description = \"Enable quota per project\" ) storage_per_project : Optional [ int ] = Field ( None , description = \"The storage quota per project\" ) audit_log_forward_endpoint : Optional [ str ] = Field ( None , description = \"The audit log forward endpoint\" ) skip_audit_log_database : Optional [ bool ] = Field ( None , description = \"Skip audit log database\" )","title":"Configurations"},{"location":"reference/models/models/#harborapi.models.models.Configurations.auth_mode","text":"","title":"auth_mode"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_from","text":"","title":"email_from"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_host","text":"","title":"email_host"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_identity","text":"","title":"email_identity"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_insecure","text":"","title":"email_insecure"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_password","text":"","title":"email_password"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_port","text":"","title":"email_port"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_ssl","text":"","title":"email_ssl"},{"location":"reference/models/models/#harborapi.models.models.Configurations.email_username","text":"","title":"email_username"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_base_dn","text":"","title":"ldap_base_dn"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_filter","text":"","title":"ldap_filter"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_group_base_dn","text":"","title":"ldap_group_base_dn"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_group_admin_dn","text":"","title":"ldap_group_admin_dn"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_group_attribute_name","text":"","title":"ldap_group_attribute_name"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_group_search_filter","text":"","title":"ldap_group_search_filter"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_group_search_scope","text":"","title":"ldap_group_search_scope"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_scope","text":"","title":"ldap_scope"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_search_dn","text":"","title":"ldap_search_dn"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_search_password","text":"","title":"ldap_search_password"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_timeout","text":"","title":"ldap_timeout"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_uid","text":"","title":"ldap_uid"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_url","text":"","title":"ldap_url"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_verify_cert","text":"","title":"ldap_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.Configurations.ldap_group_membership_attribute","text":"","title":"ldap_group_membership_attribute"},{"location":"reference/models/models/#harborapi.models.models.Configurations.project_creation_restriction","text":"","title":"project_creation_restriction"},{"location":"reference/models/models/#harborapi.models.models.Configurations.read_only","text":"","title":"read_only"},{"location":"reference/models/models/#harborapi.models.models.Configurations.self_registration","text":"","title":"self_registration"},{"location":"reference/models/models/#harborapi.models.models.Configurations.token_expiration","text":"","title":"token_expiration"},{"location":"reference/models/models/#harborapi.models.models.Configurations.uaa_client_id","text":"","title":"uaa_client_id"},{"location":"reference/models/models/#harborapi.models.models.Configurations.uaa_client_secret","text":"","title":"uaa_client_secret"},{"location":"reference/models/models/#harborapi.models.models.Configurations.uaa_endpoint","text":"","title":"uaa_endpoint"},{"location":"reference/models/models/#harborapi.models.models.Configurations.uaa_verify_cert","text":"","title":"uaa_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_endpoint","text":"","title":"http_authproxy_endpoint"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_tokenreview_endpoint","text":"","title":"http_authproxy_tokenreview_endpoint"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_admin_groups","text":"","title":"http_authproxy_admin_groups"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_admin_usernames","text":"","title":"http_authproxy_admin_usernames"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_verify_cert","text":"","title":"http_authproxy_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_skip_search","text":"","title":"http_authproxy_skip_search"},{"location":"reference/models/models/#harborapi.models.models.Configurations.http_authproxy_server_certificate","text":"","title":"http_authproxy_server_certificate"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_name","text":"","title":"oidc_name"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_endpoint","text":"","title":"oidc_endpoint"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_client_id","text":"","title":"oidc_client_id"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_client_secret","text":"","title":"oidc_client_secret"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_groups_claim","text":"","title":"oidc_groups_claim"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_admin_group","text":"","title":"oidc_admin_group"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_scope","text":"","title":"oidc_scope"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_user_claim","text":"","title":"oidc_user_claim"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_verify_cert","text":"","title":"oidc_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_auto_onboard","text":"","title":"oidc_auto_onboard"},{"location":"reference/models/models/#harborapi.models.models.Configurations.oidc_extra_redirect_parms","text":"","title":"oidc_extra_redirect_parms"},{"location":"reference/models/models/#harborapi.models.models.Configurations.robot_token_duration","text":"","title":"robot_token_duration"},{"location":"reference/models/models/#harborapi.models.models.Configurations.robot_name_prefix","text":"","title":"robot_name_prefix"},{"location":"reference/models/models/#harborapi.models.models.Configurations.notification_enable","text":"","title":"notification_enable"},{"location":"reference/models/models/#harborapi.models.models.Configurations.quota_per_project_enable","text":"","title":"quota_per_project_enable"},{"location":"reference/models/models/#harborapi.models.models.Configurations.storage_per_project","text":"","title":"storage_per_project"},{"location":"reference/models/models/#harborapi.models.models.Configurations.audit_log_forward_endpoint","text":"","title":"audit_log_forward_endpoint"},{"location":"reference/models/models/#harborapi.models.models.Configurations.skip_audit_log_database","text":"","title":"skip_audit_log_database"},{"location":"reference/models/models/#harborapi.models.models.StringConfigItem","text":"Source code in harborapi/models/models.py 1357 1358 1359 1360 1361 1362 1363 class StringConfigItem ( BaseModel ): value : Optional [ str ] = Field ( None , description = \"The string value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" )","title":"StringConfigItem"},{"location":"reference/models/models/#harborapi.models.models.StringConfigItem.value","text":"","title":"value"},{"location":"reference/models/models/#harborapi.models.models.StringConfigItem.editable","text":"","title":"editable"},{"location":"reference/models/models/#harborapi.models.models.BoolConfigItem","text":"Source code in harborapi/models/models.py 1366 1367 1368 1369 1370 1371 1372 class BoolConfigItem ( BaseModel ): value : Optional [ bool ] = Field ( None , description = \"The boolean value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" )","title":"BoolConfigItem"},{"location":"reference/models/models/#harborapi.models.models.BoolConfigItem.value","text":"","title":"value"},{"location":"reference/models/models/#harborapi.models.models.BoolConfigItem.editable","text":"","title":"editable"},{"location":"reference/models/models/#harborapi.models.models.IntegerConfigItem","text":"Source code in harborapi/models/models.py 1375 1376 1377 1378 1379 1380 1381 class IntegerConfigItem ( BaseModel ): value : Optional [ int ] = Field ( None , description = \"The integer value of current config item\" ) editable : Optional [ bool ] = Field ( None , description = \"The configure item can be updated or not\" )","title":"IntegerConfigItem"},{"location":"reference/models/models/#harborapi.models.models.IntegerConfigItem.value","text":"","title":"value"},{"location":"reference/models/models/#harborapi.models.models.IntegerConfigItem.editable","text":"","title":"editable"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity","text":"Source code in harborapi/models/models.py 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 class ProjectMemberEntity ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the project member id\" ) project_id : Optional [ int ] = Field ( None , description = \"the project id\" ) entity_name : Optional [ str ] = Field ( None , description = \"the name of the group member.\" ) role_name : Optional [ str ] = Field ( None , description = \"the name of the role\" ) role_id : Optional [ int ] = Field ( None , description = \"the role id\" ) entity_id : Optional [ int ] = Field ( None , description = \"the id of entity, if the member is a user, it is user_id in user table. if the member is a user group, it is the user group's ID in user_group table.\" , ) entity_type : Optional [ str ] = Field ( None , description = \"the entity's type, u for user entity, g for group entity.\" )","title":"ProjectMemberEntity"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.entity_name","text":"","title":"entity_name"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.role_name","text":"","title":"role_name"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.role_id","text":"","title":"role_id"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.entity_id","text":"","title":"entity_id"},{"location":"reference/models/models/#harborapi.models.models.ProjectMemberEntity.entity_type","text":"","title":"entity_type"},{"location":"reference/models/models/#harborapi.models.models.RoleRequest","text":"Source code in harborapi/models/models.py 1401 1402 1403 1404 1405 class RoleRequest ( BaseModel ): role_id : Optional [ int ] = Field ( None , description = \"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\" , )","title":"RoleRequest"},{"location":"reference/models/models/#harborapi.models.models.RoleRequest.role_id","text":"","title":"role_id"},{"location":"reference/models/models/#harborapi.models.models.UserEntity","text":"Source code in harborapi/models/models.py 1408 1409 1410 class UserEntity ( BaseModel ): user_id : Optional [ int ] = Field ( None , description = \"The ID of the user.\" ) username : Optional [ str ] = Field ( None , description = \"The name of the user.\" )","title":"UserEntity"},{"location":"reference/models/models/#harborapi.models.models.UserEntity.user_id","text":"","title":"user_id"},{"location":"reference/models/models/#harborapi.models.models.UserEntity.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.UserProfile","text":"Source code in harborapi/models/models.py 1413 1414 1415 1416 class UserProfile ( BaseModel ): email : Optional [ str ] = None realname : Optional [ str ] = None comment : Optional [ str ] = None","title":"UserProfile"},{"location":"reference/models/models/#harborapi.models.models.UserProfile.email","text":"","title":"email"},{"location":"reference/models/models/#harborapi.models.models.UserProfile.realname","text":"","title":"realname"},{"location":"reference/models/models/#harborapi.models.models.UserProfile.comment","text":"","title":"comment"},{"location":"reference/models/models/#harborapi.models.models.UserCreationReq","text":"Source code in harborapi/models/models.py 1419 1420 1421 1422 1423 1424 class UserCreationReq ( BaseModel ): email : Optional [ str ] = Field ( None , max_length = 255 ) realname : Optional [ str ] = None comment : Optional [ str ] = None password : Optional [ str ] = None username : Optional [ str ] = Field ( None , max_length = 255 )","title":"UserCreationReq"},{"location":"reference/models/models/#harborapi.models.models.UserCreationReq.email","text":"","title":"email"},{"location":"reference/models/models/#harborapi.models.models.UserCreationReq.realname","text":"","title":"realname"},{"location":"reference/models/models/#harborapi.models.models.UserCreationReq.comment","text":"","title":"comment"},{"location":"reference/models/models/#harborapi.models.models.UserCreationReq.password","text":"","title":"password"},{"location":"reference/models/models/#harborapi.models.models.UserCreationReq.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo","text":"Source code in harborapi/models/models.py 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 class OIDCUserInfo ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the ID of the OIDC info record\" ) user_id : Optional [ int ] = Field ( None , description = \"the ID of the user\" ) subiss : Optional [ str ] = Field ( None , description = \"the concatenation of sub and issuer in the ID token\" ) secret : Optional [ str ] = Field ( None , description = \"the secret of the OIDC user that can be used for CLI to push/pull artifacts\" , ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the OIDC user info record.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the OIDC user info record.\" )","title":"OIDCUserInfo"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo.user_id","text":"","title":"user_id"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo.subiss","text":"","title":"subiss"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo.secret","text":"","title":"secret"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.OIDCUserInfo.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.UserResp","text":"Source code in harborapi/models/models.py 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 class UserResp ( BaseModel ): email : Optional [ str ] = None realname : Optional [ str ] = None comment : Optional [ str ] = None user_id : Optional [ int ] = None username : Optional [ str ] = None sysadmin_flag : Optional [ bool ] = None admin_role_in_auth : Optional [ bool ] = Field ( None , description = \"indicate the admin privilege is grant by authenticator (LDAP), is always false unless it is the current login user\" , ) oidc_user_meta : Optional [ OIDCUserInfo ] = None creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the user.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the user.\" )","title":"UserResp"},{"location":"reference/models/models/#harborapi.models.models.UserResp.email","text":"","title":"email"},{"location":"reference/models/models/#harborapi.models.models.UserResp.realname","text":"","title":"realname"},{"location":"reference/models/models/#harborapi.models.models.UserResp.comment","text":"","title":"comment"},{"location":"reference/models/models/#harborapi.models.models.UserResp.user_id","text":"","title":"user_id"},{"location":"reference/models/models/#harborapi.models.models.UserResp.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.UserResp.sysadmin_flag","text":"","title":"sysadmin_flag"},{"location":"reference/models/models/#harborapi.models.models.UserResp.admin_role_in_auth","text":"","title":"admin_role_in_auth"},{"location":"reference/models/models/#harborapi.models.models.UserResp.oidc_user_meta","text":"","title":"oidc_user_meta"},{"location":"reference/models/models/#harborapi.models.models.UserResp.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.UserResp.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.UserSysAdminFlag","text":"Source code in harborapi/models/models.py 1465 1466 1467 1468 class UserSysAdminFlag ( BaseModel ): sysadmin_flag : Optional [ bool ] = Field ( None , description = \"true-admin, false-not admin.\" )","title":"UserSysAdminFlag"},{"location":"reference/models/models/#harborapi.models.models.UserSysAdminFlag.sysadmin_flag","text":"","title":"sysadmin_flag"},{"location":"reference/models/models/#harborapi.models.models.UserSearch","text":"Source code in harborapi/models/models.py 1471 1472 1473 class UserSearch ( BaseModel ): user_id : Optional [ int ] = Field ( None , description = \"The ID of the user.\" ) username : Optional [ str ] = None","title":"UserSearch"},{"location":"reference/models/models/#harborapi.models.models.UserSearch.user_id","text":"","title":"user_id"},{"location":"reference/models/models/#harborapi.models.models.UserSearch.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.PasswordReq","text":"Source code in harborapi/models/models.py 1476 1477 1478 1479 1480 1481 1482 class PasswordReq ( BaseModel ): old_password : Optional [ str ] = Field ( None , description = \"The user's existing password.\" ) new_password : Optional [ str ] = Field ( None , description = \"New password for marking as to be updated.\" )","title":"PasswordReq"},{"location":"reference/models/models/#harborapi.models.models.PasswordReq.old_password","text":"","title":"old_password"},{"location":"reference/models/models/#harborapi.models.models.PasswordReq.new_password","text":"","title":"new_password"},{"location":"reference/models/models/#harborapi.models.models.UserSearchRespItem","text":"Source code in harborapi/models/models.py 1485 1486 1487 class UserSearchRespItem ( BaseModel ): user_id : Optional [ int ] = Field ( None , description = \"The ID of the user.\" ) username : Optional [ str ] = None","title":"UserSearchRespItem"},{"location":"reference/models/models/#harborapi.models.models.UserSearchRespItem.user_id","text":"","title":"user_id"},{"location":"reference/models/models/#harborapi.models.models.UserSearchRespItem.username","text":"","title":"username"},{"location":"reference/models/models/#harborapi.models.models.Permission","text":"Source code in harborapi/models/models.py 1490 1491 1492 class Permission ( BaseModel ): resource : Optional [ str ] = Field ( None , description = \"The permission resoruce\" ) action : Optional [ str ] = Field ( None , description = \"The permission action\" )","title":"Permission"},{"location":"reference/models/models/#harborapi.models.models.Permission.resource","text":"","title":"resource"},{"location":"reference/models/models/#harborapi.models.models.Permission.action","text":"","title":"action"},{"location":"reference/models/models/#harborapi.models.models.OIDCCliSecretReq","text":"Source code in harborapi/models/models.py 1495 1496 class OIDCCliSecretReq ( BaseModel ): secret : Optional [ str ] = Field ( None , description = \"The new secret\" )","title":"OIDCCliSecretReq"},{"location":"reference/models/models/#harborapi.models.models.OIDCCliSecretReq.secret","text":"","title":"secret"},{"location":"reference/models/models/#harborapi.models.models.ComponentHealthStatus","text":"Source code in harborapi/models/models.py 1499 1500 1501 1502 1503 1504 class ComponentHealthStatus ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The component name\" ) status : Optional [ str ] = Field ( None , description = \"The health status of component\" ) error : Optional [ str ] = Field ( None , description = '(optional) The error message when the status is \"unhealthy\"' )","title":"ComponentHealthStatus"},{"location":"reference/models/models/#harborapi.models.models.ComponentHealthStatus.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.ComponentHealthStatus.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.ComponentHealthStatus.error","text":"","title":"error"},{"location":"reference/models/models/#harborapi.models.models.Statistic","text":"Source code in harborapi/models/models.py 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 class Statistic ( BaseModel ): private_project_count : Optional [ int ] = Field ( None , description = \"The count of the private projects\" ) private_repo_count : Optional [ int ] = Field ( None , description = \"The count of the private repositories\" ) public_project_count : Optional [ int ] = Field ( None , description = \"The count of the public projects\" ) public_repo_count : Optional [ int ] = Field ( None , description = \"The count of the public repositories\" ) total_project_count : Optional [ int ] = Field ( None , description = \"The count of the total projects, only be seen by the system admin\" , ) total_repo_count : Optional [ int ] = Field ( None , description = \"The count of the total repositories, only be seen by the system admin\" , ) total_storage_consumption : Optional [ int ] = Field ( None , description = \"The total storage consumption of blobs, only be seen by the system admin\" , )","title":"Statistic"},{"location":"reference/models/models/#harborapi.models.models.Statistic.private_project_count","text":"","title":"private_project_count"},{"location":"reference/models/models/#harborapi.models.models.Statistic.private_repo_count","text":"","title":"private_repo_count"},{"location":"reference/models/models/#harborapi.models.models.Statistic.public_project_count","text":"","title":"public_project_count"},{"location":"reference/models/models/#harborapi.models.models.Statistic.public_repo_count","text":"","title":"public_repo_count"},{"location":"reference/models/models/#harborapi.models.models.Statistic.total_project_count","text":"","title":"total_project_count"},{"location":"reference/models/models/#harborapi.models.models.Statistic.total_repo_count","text":"","title":"total_repo_count"},{"location":"reference/models/models/#harborapi.models.models.Statistic.total_storage_consumption","text":"","title":"total_storage_consumption"},{"location":"reference/models/models/#harborapi.models.models.Accessory","text":"Source code in harborapi/models/models.py 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 class Accessory ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the accessory\" ) artifact_id : Optional [ int ] = Field ( None , description = \"The artifact id of the accessory\" ) subject_artifact_id : Optional [ int ] = Field ( None , description = \"The subject artifact id of the accessory\" ) size : Optional [ int ] = Field ( None , description = \"The artifact size of the accessory\" ) digest : Optional [ str ] = Field ( None , description = \"The artifact digest of the accessory\" ) type : Optional [ str ] = Field ( None , description = \"The artifact size of the accessory\" ) icon : Optional [ str ] = Field ( None , description = \"The icon of the accessory\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the accessory\" )","title":"Accessory"},{"location":"reference/models/models/#harborapi.models.models.Accessory.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Accessory.artifact_id","text":"","title":"artifact_id"},{"location":"reference/models/models/#harborapi.models.models.Accessory.subject_artifact_id","text":"","title":"subject_artifact_id"},{"location":"reference/models/models/#harborapi.models.models.Accessory.size","text":"","title":"size"},{"location":"reference/models/models/#harborapi.models.models.Accessory.digest","text":"","title":"digest"},{"location":"reference/models/models/#harborapi.models.models.Accessory.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.Accessory.icon","text":"","title":"icon"},{"location":"reference/models/models/#harborapi.models.models.Accessory.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Errors","text":"Source code in harborapi/models/models.py 1553 1554 class Errors ( BaseModel ): errors : Optional [ List [ Error ]] = None","title":"Errors"},{"location":"reference/models/models/#harborapi.models.models.Errors.errors","text":"","title":"errors"},{"location":"reference/models/models/#harborapi.models.models.ChartVersion","text":"Source code in harborapi/models/models.py 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 class ChartVersion ( ChartMetadata ): created : Optional [ str ] = Field ( None , description = \"The created time of the chart entry\" ) removed : Optional [ bool ] = Field ( None , description = \"A flag to indicate if the chart entry is removed\" ) digest : Optional [ str ] = Field ( None , description = \"The digest value of the chart entry\" ) urls : Optional [ List [ str ]] = Field ( None , description = \"The urls of the chart entry\" ) labels : Optional [ List [ Label ]] = Field ( None , description = \"A list of label\" )","title":"ChartVersion"},{"location":"reference/models/models/#harborapi.models.models.ChartVersion.created","text":"","title":"created"},{"location":"reference/models/models/#harborapi.models.models.ChartVersion.removed","text":"","title":"removed"},{"location":"reference/models/models/#harborapi.models.models.ChartVersion.digest","text":"","title":"digest"},{"location":"reference/models/models/#harborapi.models.models.ChartVersion.urls","text":"","title":"urls"},{"location":"reference/models/models/#harborapi.models.models.ChartVersion.labels","text":"","title":"labels"},{"location":"reference/models/models/#harborapi.models.models.Reference","text":"Source code in harborapi/models/models.py 1571 1572 1573 1574 1575 1576 1577 1578 1579 class Reference ( BaseModel ): parent_id : Optional [ int ] = Field ( None , description = \"The parent ID of the reference\" ) child_id : Optional [ int ] = Field ( None , description = \"The child ID of the reference\" ) child_digest : Optional [ str ] = Field ( None , description = \"The digest of the child artifact\" ) platform : Optional [ Platform ] = None annotations : Optional [ Annotations ] = None urls : Optional [ List [ str ]] = Field ( None , description = \"The download URLs\" )","title":"Reference"},{"location":"reference/models/models/#harborapi.models.models.Reference.parent_id","text":"","title":"parent_id"},{"location":"reference/models/models/#harborapi.models.models.Reference.child_id","text":"","title":"child_id"},{"location":"reference/models/models/#harborapi.models.models.Reference.child_digest","text":"","title":"child_digest"},{"location":"reference/models/models/#harborapi.models.models.Reference.platform","text":"","title":"platform"},{"location":"reference/models/models/#harborapi.models.models.Reference.annotations","text":"","title":"annotations"},{"location":"reference/models/models/#harborapi.models.models.Reference.urls","text":"","title":"urls"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary","text":"Source code in harborapi/models/models.py 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 class NativeReportSummary ( BaseModel ): report_id : Optional [ str ] = Field ( None , description = \"id of the native scan report\" , example = \"5f62c830-f996-11e9-957f-0242c0a89008\" , ) scan_status : Optional [ str ] = Field ( None , description = \"The status of the report generating process\" , example = \"Success\" , ) severity : Optional [ str ] = Field ( None , description = \"The overall severity\" , example = \"High\" ) duration : Optional [ int ] = Field ( None , description = \"The seconds spent for generating the report\" , example = 300 ) summary : Optional [ VulnerabilitySummary ] = None start_time : Optional [ datetime ] = Field ( None , description = \"The start time of the scan process that generating report\" , example = \"2006-01-02T14:04:05Z\" , ) end_time : Optional [ datetime ] = Field ( None , description = \"The end time of the scan process that generating report\" , example = \"2006-01-02T15:04:05Z\" , ) complete_percent : Optional [ int ] = Field ( None , description = \"The complete percent of the scanning which value is between 0 and 100\" , example = 100 , ) scanner : Optional [ Scanner ] = None","title":"NativeReportSummary"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.report_id","text":"","title":"report_id"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.scan_status","text":"","title":"scan_status"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.severity","text":"","title":"severity"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.duration","text":"","title":"duration"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.summary","text":"","title":"summary"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.start_time","text":"","title":"start_time"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.end_time","text":"","title":"end_time"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.complete_percent","text":"","title":"complete_percent"},{"location":"reference/models/models/#harborapi.models.models.NativeReportSummary.scanner","text":"","title":"scanner"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummaryQuota","text":"Source code in harborapi/models/models.py 1618 1619 1620 1621 1622 1623 1624 class ProjectSummaryQuota ( BaseModel ): hard : Optional [ ResourceList ] = Field ( None , description = \"The hard limits of the quota\" ) used : Optional [ ResourceList ] = Field ( None , description = \"The used status of the quota\" )","title":"ProjectSummaryQuota"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummaryQuota.hard","text":"","title":"hard"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummaryQuota.used","text":"","title":"used"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist","text":"Source code in harborapi/models/models.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 class CVEAllowlist ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"ID of the allowlist\" ) project_id : Optional [ int ] = Field ( None , description = \"ID of the project which the allowlist belongs to. For system level allowlist this attribute is zero.\" , ) expires_at : Optional [ int ] = Field ( None , description = \"the time for expiration of the allowlist, in the form of seconds since epoch. This is an optional attribute, if it's not set the CVE allowlist does not expire.\" , ) items : Optional [ List [ CVEAllowlistItem ]] = None creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the allowlist.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the allowlist.\" )","title":"CVEAllowlist"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist.expires_at","text":"","title":"expires_at"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist.items","text":"","title":"items"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.CVEAllowlist.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTrigger","text":"Source code in harborapi/models/models.py 1646 1647 1648 1649 1650 1651 class ReplicationTrigger ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The replication policy trigger type. The valid values are manual, event_based and scheduled.\" , ) trigger_settings : Optional [ ReplicationTriggerSettings ] = None","title":"ReplicationTrigger"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTrigger.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.ReplicationTrigger.trigger_settings","text":"","title":"trigger_settings"},{"location":"reference/models/models/#harborapi.models.models.RegistryInfo","text":"Source code in harborapi/models/models.py 1654 1655 1656 1657 1658 1659 1660 1661 1662 class RegistryInfo ( BaseModel ): type : Optional [ str ] = Field ( None , description = \"The registry type\" ) description : Optional [ str ] = Field ( None , description = \"The description\" ) supported_resource_filters : Optional [ List [ FilterStyle ]] = Field ( None , description = \"The filters that the registry supports\" ) supported_triggers : Optional [ List [ str ]] = Field ( None , description = \"The triggers that the registry supports\" )","title":"RegistryInfo"},{"location":"reference/models/models/#harborapi.models.models.RegistryInfo.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.RegistryInfo.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.RegistryInfo.supported_resource_filters","text":"","title":"supported_resource_filters"},{"location":"reference/models/models/#harborapi.models.models.RegistryInfo.supported_triggers","text":"","title":"supported_triggers"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderEndpointPattern","text":"Source code in harborapi/models/models.py 1665 1666 1667 1668 1669 class RegistryProviderEndpointPattern ( BaseModel ): endpoint_type : Optional [ str ] = Field ( None , description = \"The endpoint type\" ) endpoints : Optional [ List [ RegistryEndpoint ]] = Field ( None , description = \"The endpoint list\" )","title":"RegistryProviderEndpointPattern"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderEndpointPattern.endpoint_type","text":"","title":"endpoint_type"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderEndpointPattern.endpoints","text":"","title":"endpoints"},{"location":"reference/models/models/#harborapi.models.models.RobotPermission","text":"Source code in harborapi/models/models.py 1672 1673 1674 1675 1676 1677 class RobotPermission ( BaseModel ): kind : Optional [ str ] = Field ( None , description = \"The kind of the permission\" ) namespace : Optional [ str ] = Field ( None , description = \"The namespace of the permission\" ) access : Optional [ List [ Access ]] = None","title":"RobotPermission"},{"location":"reference/models/models/#harborapi.models.models.RobotPermission.kind","text":"","title":"kind"},{"location":"reference/models/models/#harborapi.models.models.RobotPermission.namespace","text":"","title":"namespace"},{"location":"reference/models/models/#harborapi.models.models.RobotPermission.access","text":"","title":"access"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo","text":"Source code in harborapi/models/models.py 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 class GeneralInfo ( BaseModel ): current_time : Optional [ datetime ] = Field ( None , description = \"The current time of the server.\" ) with_notary : Optional [ bool ] = Field ( None , description = \"If the Harbor instance is deployed with nested notary.\" ) with_chartmuseum : Optional [ bool ] = Field ( None , description = \"If the Harbor instance is deployed with nested chartmuseum.\" ) registry_url : Optional [ str ] = Field ( None , description = \"The url of registry against which the docker command should be issued.\" , ) external_url : Optional [ str ] = Field ( None , description = \"The external URL of Harbor, with protocol.\" ) auth_mode : Optional [ str ] = Field ( None , description = \"The auth mode of current Harbor instance.\" ) project_creation_restriction : Optional [ str ] = Field ( None , description = \"Indicate who can create projects, it could be 'adminonly' or 'everyone'.\" , ) self_registration : Optional [ bool ] = Field ( None , description = \"Indicate whether the Harbor instance enable user to register himself.\" , ) has_ca_root : Optional [ bool ] = Field ( None , description = \"Indicate whether there is a ca root cert file ready for download in the file system.\" , ) harbor_version : Optional [ str ] = Field ( None , description = \"The build version of Harbor.\" ) registry_storage_provider_name : Optional [ str ] = Field ( None , description = \"The storage provider's name of Harbor registry\" ) read_only : Optional [ bool ] = Field ( None , description = \"The flag to indicate whether Harbor is in readonly mode.\" ) notification_enable : Optional [ bool ] = Field ( None , description = \"The flag to indicate whether notification mechanism is enabled on Harbor instance.\" , ) authproxy_settings : Optional [ AuthproxySetting ] = Field ( None , description = \"The setting of auth proxy this is only available when Harbor relies on authproxy for authentication.\" , )","title":"GeneralInfo"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.current_time","text":"","title":"current_time"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.with_notary","text":"","title":"with_notary"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.with_chartmuseum","text":"","title":"with_chartmuseum"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.registry_url","text":"","title":"registry_url"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.external_url","text":"","title":"external_url"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.auth_mode","text":"","title":"auth_mode"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.project_creation_restriction","text":"","title":"project_creation_restriction"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.self_registration","text":"","title":"self_registration"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.has_ca_root","text":"","title":"has_ca_root"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.harbor_version","text":"","title":"harbor_version"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.registry_storage_provider_name","text":"","title":"registry_storage_provider_name"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.read_only","text":"","title":"read_only"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.notification_enable","text":"","title":"notification_enable"},{"location":"reference/models/models/#harborapi.models.models.GeneralInfo.authproxy_settings","text":"","title":"authproxy_settings"},{"location":"reference/models/models/#harborapi.models.models.GCHistory","text":"Source code in harborapi/models/models.py 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 class GCHistory ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the id of gc job.\" ) job_name : Optional [ str ] = Field ( None , description = \"the job name of gc job.\" ) job_kind : Optional [ str ] = Field ( None , description = \"the job kind of gc job.\" ) job_parameters : Optional [ str ] = Field ( None , description = \"the job parameters of gc job.\" ) schedule : Optional [ ScheduleObj ] = None job_status : Optional [ str ] = Field ( None , description = \"the status of gc job.\" ) deleted : Optional [ bool ] = Field ( None , description = \"if gc job was deleted.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of gc job.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of gc job.\" )","title":"GCHistory"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.job_name","text":"","title":"job_name"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.job_kind","text":"","title":"job_kind"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.job_parameters","text":"","title":"job_parameters"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.schedule","text":"","title":"schedule"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.job_status","text":"","title":"job_status"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.deleted","text":"","title":"deleted"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.GCHistory.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory","text":"Source code in harborapi/models/models.py 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 class ExecHistory ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"the id of purge job.\" ) job_name : Optional [ str ] = Field ( None , description = \"the job name of purge job.\" ) job_kind : Optional [ str ] = Field ( None , description = \"the job kind of purge job.\" ) job_parameters : Optional [ str ] = Field ( None , description = \"the job parameters of purge job.\" ) schedule : Optional [ ScheduleObj ] = None job_status : Optional [ str ] = Field ( None , description = \"the status of purge job.\" ) deleted : Optional [ bool ] = Field ( None , description = \"if purge job was deleted.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of purge job.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of purge job.\" )","title":"ExecHistory"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.job_name","text":"","title":"job_name"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.job_kind","text":"","title":"job_kind"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.job_parameters","text":"","title":"job_parameters"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.schedule","text":"","title":"schedule"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.job_status","text":"","title":"job_status"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.deleted","text":"","title":"deleted"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.ExecHistory.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Schedule","text":"Source code in harborapi/models/models.py 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 class Schedule ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The id of the schedule.\" ) status : Optional [ str ] = Field ( None , description = \"The status of the schedule.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"the creation time of the schedule.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"the update time of the schedule.\" ) schedule : Optional [ ScheduleObj ] = None parameters : Optional [ Dict [ str , Dict [ str , Any ]]] = Field ( None , description = \"The parameters of schedule job\" )","title":"Schedule"},{"location":"reference/models/models/#harborapi.models.models.Schedule.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Schedule.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.Schedule.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Schedule.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Schedule.schedule","text":"","title":"schedule"},{"location":"reference/models/models/#harborapi.models.models.Schedule.parameters","text":"","title":"parameters"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleMetadata","text":"Source code in harborapi/models/models.py 1782 1783 1784 1785 1786 1787 1788 class RetentionRuleMetadata ( BaseModel ): rule_template : Optional [ str ] = Field ( None , description = \"rule id\" ) display_text : Optional [ str ] = Field ( None , description = \"rule display text\" ) action : Optional [ str ] = Field ( None , description = \"rule action\" ) params : Optional [ List [ RetentionRuleParamMetadata ]] = Field ( None , description = \"rule params\" )","title":"RetentionRuleMetadata"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleMetadata.rule_template","text":"","title":"rule_template"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleMetadata.display_text","text":"","title":"display_text"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleMetadata.action","text":"","title":"action"},{"location":"reference/models/models/#harborapi.models.models.RetentionRuleMetadata.params","text":"","title":"params"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule","text":"Source code in harborapi/models/models.py 1791 1792 1793 1794 1795 1796 1797 1798 1799 class RetentionRule ( BaseModel ): id : Optional [ int ] = None priority : Optional [ int ] = None disabled : Optional [ bool ] = None action : Optional [ str ] = None template : Optional [ str ] = None params : Optional [ Dict [ str , Dict [ str , Any ]]] = None tag_selectors : Optional [ List [ RetentionSelector ]] = None scope_selectors : Optional [ Dict [ str , List [ RetentionSelector ]]] = None","title":"RetentionRule"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.priority","text":"","title":"priority"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.disabled","text":"","title":"disabled"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.action","text":"","title":"action"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.template","text":"","title":"template"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.params","text":"","title":"params"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.tag_selectors","text":"","title":"tag_selectors"},{"location":"reference/models/models/#harborapi.models.models.RetentionRule.scope_selectors","text":"","title":"scope_selectors"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule","text":"Source code in harborapi/models/models.py 1802 1803 1804 1805 1806 1807 1808 1809 1810 class ImmutableRule ( BaseModel ): id : Optional [ int ] = None priority : Optional [ int ] = None disabled : Optional [ bool ] = None action : Optional [ str ] = None template : Optional [ str ] = None params : Optional [ Dict [ str , Dict [ str , Any ]]] = None tag_selectors : Optional [ List [ ImmutableSelector ]] = None scope_selectors : Optional [ Dict [ str , List [ ImmutableSelector ]]] = None","title":"ImmutableRule"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.priority","text":"","title":"priority"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.disabled","text":"","title":"disabled"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.action","text":"","title":"action"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.template","text":"","title":"template"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.params","text":"","title":"params"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.tag_selectors","text":"","title":"tag_selectors"},{"location":"reference/models/models/#harborapi.models.models.ImmutableRule.scope_selectors","text":"","title":"scope_selectors"},{"location":"reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes","text":"Source code in harborapi/models/models.py 1813 1814 1815 class SupportedWebhookEventTypes ( BaseModel ): event_type : Optional [ List [ EventType ]] = None notify_type : Optional [ List [ NotifyType ]] = None","title":"SupportedWebhookEventTypes"},{"location":"reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes.event_type","text":"","title":"event_type"},{"location":"reference/models/models/#harborapi.models.models.SupportedWebhookEventTypes.notify_type","text":"","title":"notify_type"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse","text":"Source code in harborapi/models/models.py 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 class ConfigurationsResponse ( BaseModel ): auth_mode : Optional [ StringConfigItem ] = Field ( None , description = 'The auth mode of current system, such as \"db_auth\", \"ldap_auth\", \"oidc_auth\"' , ) email_from : Optional [ StringConfigItem ] = Field ( None , description = \"The sender name for Email notification.\" ) email_host : Optional [ StringConfigItem ] = Field ( None , description = \"The hostname of SMTP server that sends Email notification.\" ) email_identity : Optional [ StringConfigItem ] = Field ( None , description = \"By default it's empty so the email_username is picked\" ) email_insecure : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether or not the certificate will be verified when Harbor tries to access the email server.\" , ) email_port : Optional [ IntegerConfigItem ] = Field ( None , description = \"The port of SMTP server\" ) email_ssl : Optional [ BoolConfigItem ] = Field ( None , description = \"When it''s set to true the system will access Email server via TLS by default. If it''s set to false, it still will handle \\\" STARTTLS \\\" from server side.\" , ) email_username : Optional [ StringConfigItem ] = Field ( None , description = \"The username for authenticate against SMTP server\" ) ldap_base_dn : Optional [ StringConfigItem ] = Field ( None , description = \"The Base DN for LDAP binding.\" ) ldap_filter : Optional [ StringConfigItem ] = Field ( None , description = \"The filter for LDAP search\" ) ldap_group_base_dn : Optional [ StringConfigItem ] = Field ( None , description = \"The base DN to search LDAP group.\" ) ldap_group_admin_dn : Optional [ StringConfigItem ] = Field ( None , description = \"Specify the ldap group which have the same privilege with Harbor admin\" , ) ldap_group_attribute_name : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute which is used as identity of the LDAP group, default is cn.'\" , ) ldap_group_search_filter : Optional [ StringConfigItem ] = Field ( None , description = \"The filter to search the ldap group\" ) ldap_group_search_scope : Optional [ IntegerConfigItem ] = Field ( None , description = \"The scope to search ldap group. ''0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE''\" , ) ldap_scope : Optional [ IntegerConfigItem ] = Field ( None , description = \"The scope to search ldap users,'0-LDAP_SCOPE_BASE, 1-LDAP_SCOPE_ONELEVEL, 2-LDAP_SCOPE_SUBTREE'\" , ) ldap_search_dn : Optional [ StringConfigItem ] = Field ( None , description = \"The DN of the user to do the search.\" ) ldap_timeout : Optional [ IntegerConfigItem ] = Field ( None , description = \"Timeout in seconds for connection to LDAP server\" ) ldap_uid : Optional [ StringConfigItem ] = Field ( None , description = 'The attribute which is used as identity for the LDAP binding, such as \"CN\" or \"SAMAccountname\"' , ) ldap_url : Optional [ StringConfigItem ] = Field ( None , description = \"The URL of LDAP server\" ) ldap_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether verify your OIDC server certificate, disable it if your OIDC server is hosted via self-hosted certificate.\" , ) ldap_group_membership_attribute : Optional [ StringConfigItem ] = Field ( None , description = \"The user attribute to identify the group membership\" ) project_creation_restriction : Optional [ StringConfigItem ] = Field ( None , description = \"Indicate who can create projects, it could be ''adminonly'' or ''everyone''.\" , ) read_only : Optional [ BoolConfigItem ] = Field ( None , description = \"The flag to indicate whether Harbor is in readonly mode.\" ) self_registration : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether the Harbor instance supports self-registration. If it''s set to false, admin need to add user to the instance.\" , ) token_expiration : Optional [ IntegerConfigItem ] = Field ( None , description = \"The expiration time of the token for internal Registry, in minutes.\" , ) uaa_client_id : Optional [ StringConfigItem ] = Field ( None , description = \"The client id of UAA\" ) uaa_client_secret : Optional [ StringConfigItem ] = Field ( None , description = \"The client secret of the UAA\" ) uaa_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the UAA\" ) uaa_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the certificate in UAA server\" ) http_authproxy_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the HTTP auth\" ) http_authproxy_tokenreview_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The token review endpoint\" ) http_authproxy_admin_groups : Optional [ StringConfigItem ] = Field ( None , description = \"The group which has the harbor admin privileges\" ) http_authproxy_admin_usernames : Optional [ StringConfigItem ] = Field ( None , description = \"The usernames which has the harbor admin privileges\" ) http_authproxy_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the HTTP auth provider's certificate\" ) http_authproxy_skip_search : Optional [ BoolConfigItem ] = Field ( None , description = \"Search user before onboard\" ) http_authproxy_server_certificate : Optional [ StringConfigItem ] = Field ( None , description = \"The certificate of the HTTP auth provider\" ) oidc_name : Optional [ StringConfigItem ] = Field ( None , description = \"The OIDC provider name\" ) oidc_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the OIDC provider\" ) oidc_client_id : Optional [ StringConfigItem ] = Field ( None , description = \"The client ID of the OIDC provider\" ) oidc_groups_claim : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute claims the group name\" ) oidc_admin_group : Optional [ StringConfigItem ] = Field ( None , description = \"The OIDC group which has the harbor admin privileges\" ) oidc_scope : Optional [ StringConfigItem ] = Field ( None , description = \"The scope of the OIDC provider\" ) oidc_user_claim : Optional [ StringConfigItem ] = Field ( None , description = \"The attribute claims the username\" ) oidc_verify_cert : Optional [ BoolConfigItem ] = Field ( None , description = \"Verify the OIDC provider's certificate'\" ) oidc_auto_onboard : Optional [ BoolConfigItem ] = Field ( None , description = \"Auto onboard the OIDC user\" ) oidc_extra_redirect_parms : Optional [ StringConfigItem ] = Field ( None , description = \"Extra parameters to add when redirect request to OIDC provider\" , ) robot_token_duration : Optional [ IntegerConfigItem ] = Field ( None , description = \"The robot account token duration in days\" ) robot_name_prefix : Optional [ StringConfigItem ] = Field ( None , description = \"The rebot account name prefix\" ) notification_enable : Optional [ BoolConfigItem ] = Field ( None , description = \"Enable notification\" ) quota_per_project_enable : Optional [ BoolConfigItem ] = Field ( None , description = \"Enable quota per project\" ) storage_per_project : Optional [ IntegerConfigItem ] = Field ( None , description = \"The storage quota per project\" ) audit_log_forward_endpoint : Optional [ StringConfigItem ] = Field ( None , description = \"The endpoint of the audit log forwarder\" ) skip_audit_log_database : Optional [ BoolConfigItem ] = Field ( None , description = \"Whether skip the audit log in database\" ) scan_all_policy : Optional [ ScanAllPolicy ] = None","title":"ConfigurationsResponse"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.auth_mode","text":"","title":"auth_mode"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_from","text":"","title":"email_from"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_host","text":"","title":"email_host"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_identity","text":"","title":"email_identity"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_insecure","text":"","title":"email_insecure"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_port","text":"","title":"email_port"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_ssl","text":"","title":"email_ssl"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.email_username","text":"","title":"email_username"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_base_dn","text":"","title":"ldap_base_dn"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_filter","text":"","title":"ldap_filter"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_base_dn","text":"","title":"ldap_group_base_dn"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_admin_dn","text":"","title":"ldap_group_admin_dn"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_attribute_name","text":"","title":"ldap_group_attribute_name"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_search_filter","text":"","title":"ldap_group_search_filter"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_search_scope","text":"","title":"ldap_group_search_scope"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_scope","text":"","title":"ldap_scope"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_search_dn","text":"","title":"ldap_search_dn"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_timeout","text":"","title":"ldap_timeout"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_uid","text":"","title":"ldap_uid"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_url","text":"","title":"ldap_url"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_verify_cert","text":"","title":"ldap_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.ldap_group_membership_attribute","text":"","title":"ldap_group_membership_attribute"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.project_creation_restriction","text":"","title":"project_creation_restriction"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.read_only","text":"","title":"read_only"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.self_registration","text":"","title":"self_registration"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.token_expiration","text":"","title":"token_expiration"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_client_id","text":"","title":"uaa_client_id"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_client_secret","text":"","title":"uaa_client_secret"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_endpoint","text":"","title":"uaa_endpoint"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.uaa_verify_cert","text":"","title":"uaa_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_endpoint","text":"","title":"http_authproxy_endpoint"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_tokenreview_endpoint","text":"","title":"http_authproxy_tokenreview_endpoint"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_admin_groups","text":"","title":"http_authproxy_admin_groups"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_admin_usernames","text":"","title":"http_authproxy_admin_usernames"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_verify_cert","text":"","title":"http_authproxy_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_skip_search","text":"","title":"http_authproxy_skip_search"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.http_authproxy_server_certificate","text":"","title":"http_authproxy_server_certificate"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_name","text":"","title":"oidc_name"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_endpoint","text":"","title":"oidc_endpoint"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_client_id","text":"","title":"oidc_client_id"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_groups_claim","text":"","title":"oidc_groups_claim"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_admin_group","text":"","title":"oidc_admin_group"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_scope","text":"","title":"oidc_scope"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_user_claim","text":"","title":"oidc_user_claim"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_verify_cert","text":"","title":"oidc_verify_cert"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_auto_onboard","text":"","title":"oidc_auto_onboard"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.oidc_extra_redirect_parms","text":"","title":"oidc_extra_redirect_parms"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.robot_token_duration","text":"","title":"robot_token_duration"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.robot_name_prefix","text":"","title":"robot_name_prefix"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.notification_enable","text":"","title":"notification_enable"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.quota_per_project_enable","text":"","title":"quota_per_project_enable"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.storage_per_project","text":"","title":"storage_per_project"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.audit_log_forward_endpoint","text":"","title":"audit_log_forward_endpoint"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.skip_audit_log_database","text":"","title":"skip_audit_log_database"},{"location":"reference/models/models/#harborapi.models.models.ConfigurationsResponse.scan_all_policy","text":"","title":"scan_all_policy"},{"location":"reference/models/models/#harborapi.models.models.ProjectMember","text":"Source code in harborapi/models/models.py 1997 1998 1999 2000 2001 2002 2003 class ProjectMember ( BaseModel ): role_id : Optional [ int ] = Field ( None , description = \"The role id 1 for projectAdmin, 2 for developer, 3 for guest, 4 for maintainer\" , ) member_user : Optional [ UserEntity ] = None member_group : Optional [ UserGroup ] = None","title":"ProjectMember"},{"location":"reference/models/models/#harborapi.models.models.ProjectMember.role_id","text":"","title":"role_id"},{"location":"reference/models/models/#harborapi.models.models.ProjectMember.member_user","text":"","title":"member_user"},{"location":"reference/models/models/#harborapi.models.models.ProjectMember.member_group","text":"","title":"member_group"},{"location":"reference/models/models/#harborapi.models.models.OverallHealthStatus","text":"Source code in harborapi/models/models.py 2006 2007 2008 2009 2010 2011 class OverallHealthStatus ( BaseModel ): status : Optional [ str ] = Field ( None , description = 'The overall health status. It is \"healthy\" only when all the components \\' status are \"healthy\"' , ) components : Optional [ List [ ComponentHealthStatus ]] = None","title":"OverallHealthStatus"},{"location":"reference/models/models/#harborapi.models.models.OverallHealthStatus.status","text":"","title":"status"},{"location":"reference/models/models/#harborapi.models.models.OverallHealthStatus.components","text":"","title":"components"},{"location":"reference/models/models/#harborapi.models.models.SearchResult","text":"Source code in harborapi/models/models.py 2014 2015 2016 2017 2018 2019 class SearchResult ( BaseModel ): name : Optional [ str ] = Field ( None , alias = \"Name\" , description = \"The chart name with repo name\" ) score : Optional [ int ] = Field ( None , alias = \"Score\" , description = \"The matched level\" ) chart : Optional [ ChartVersion ] = Field ( None , alias = \"Chart\" )","title":"SearchResult"},{"location":"reference/models/models/#harborapi.models.models.SearchResult.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.SearchResult.score","text":"","title":"score"},{"location":"reference/models/models/#harborapi.models.models.SearchResult.chart","text":"","title":"chart"},{"location":"reference/models/models/#harborapi.models.models.Artifact","text":"Source code in harborapi/models/models.py 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 class Artifact ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the artifact\" ) type : Optional [ str ] = Field ( None , description = \"The type of the artifact, e.g. image, chart, etc\" ) media_type : Optional [ str ] = Field ( None , description = \"The media type of the artifact\" ) manifest_media_type : Optional [ str ] = Field ( None , description = \"The manifest media type of the artifact\" ) project_id : Optional [ int ] = Field ( None , description = \"The ID of the project that the artifact belongs to\" ) repository_id : Optional [ int ] = Field ( None , description = \"The ID of the repository that the artifact belongs to\" ) digest : Optional [ str ] = Field ( None , description = \"The digest of the artifact\" ) size : Optional [ int ] = Field ( None , description = \"The size of the artifact\" ) icon : Optional [ str ] = Field ( None , description = \"The digest of the icon\" ) push_time : Optional [ datetime ] = Field ( None , description = \"The push time of the artifact\" ) pull_time : Optional [ datetime ] = Field ( None , description = \"The latest pull time of the artifact\" ) extra_attrs : Optional [ ExtraAttrs ] = None annotations : Optional [ Annotations ] = None references : Optional [ List [ Reference ]] = None tags : Optional [ List [ Tag ]] = None addition_links : Optional [ AdditionLinks ] = None labels : Optional [ List [ Label ]] = None scan_overview : Optional [ ScanOverview ] = Field ( None , description = \"The overview of the scan result.\" ) # TODO: change type to Optional[Union[ScanOverview, NativeReportSummary]] accessories : Optional [ List [ Accessory ]] = None","title":"Artifact"},{"location":"reference/models/models/#harborapi.models.models.Artifact.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Artifact.type","text":"","title":"type"},{"location":"reference/models/models/#harborapi.models.models.Artifact.media_type","text":"","title":"media_type"},{"location":"reference/models/models/#harborapi.models.models.Artifact.manifest_media_type","text":"","title":"manifest_media_type"},{"location":"reference/models/models/#harborapi.models.models.Artifact.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.Artifact.repository_id","text":"","title":"repository_id"},{"location":"reference/models/models/#harborapi.models.models.Artifact.digest","text":"","title":"digest"},{"location":"reference/models/models/#harborapi.models.models.Artifact.size","text":"","title":"size"},{"location":"reference/models/models/#harborapi.models.models.Artifact.icon","text":"","title":"icon"},{"location":"reference/models/models/#harborapi.models.models.Artifact.push_time","text":"","title":"push_time"},{"location":"reference/models/models/#harborapi.models.models.Artifact.pull_time","text":"","title":"pull_time"},{"location":"reference/models/models/#harborapi.models.models.Artifact.extra_attrs","text":"","title":"extra_attrs"},{"location":"reference/models/models/#harborapi.models.models.Artifact.annotations","text":"","title":"annotations"},{"location":"reference/models/models/#harborapi.models.models.Artifact.references","text":"","title":"references"},{"location":"reference/models/models/#harborapi.models.models.Artifact.tags","text":"","title":"tags"},{"location":"reference/models/models/#harborapi.models.models.Artifact.addition_links","text":"","title":"addition_links"},{"location":"reference/models/models/#harborapi.models.models.Artifact.labels","text":"","title":"labels"},{"location":"reference/models/models/#harborapi.models.models.Artifact.scan_overview","text":"","title":"scan_overview"},{"location":"reference/models/models/#harborapi.models.models.Artifact.accessories","text":"","title":"accessories"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq","text":"Source code in harborapi/models/models.py 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 class ProjectReq ( BaseModel ): project_name : Optional [ str ] = Field ( None , description = \"The name of the project.\" , max_length = 255 ) public : Optional [ bool ] = Field ( None , description = \"deprecated, reserved for project creation in replication\" ) metadata : Optional [ ProjectMetadata ] = Field ( None , description = \"The metadata of the project.\" ) cve_allowlist : Optional [ CVEAllowlist ] = Field ( None , description = \"The CVE allowlist of the project.\" ) storage_limit : Optional [ int ] = Field ( None , description = \"The storage quota of the project.\" ) registry_id : Optional [ int ] = Field ( None , description = \"The ID of referenced registry when creating the proxy cache project\" , )","title":"ProjectReq"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq.project_name","text":"","title":"project_name"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq.public","text":"","title":"public"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq.metadata","text":"","title":"metadata"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq.cve_allowlist","text":"","title":"cve_allowlist"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq.storage_limit","text":"","title":"storage_limit"},{"location":"reference/models/models/#harborapi.models.models.ProjectReq.registry_id","text":"","title":"registry_id"},{"location":"reference/models/models/#harborapi.models.models.Project","text":"Source code in harborapi/models/models.py 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 class Project ( BaseModel ): project_id : Optional [ int ] = Field ( None , description = \"Project ID\" ) owner_id : Optional [ int ] = Field ( None , description = \"The owner ID of the project always means the creator of the project.\" , ) name : Optional [ str ] = Field ( None , description = \"The name of the project.\" ) registry_id : Optional [ int ] = Field ( None , description = \"The ID of referenced registry when the project is a proxy cache project.\" , ) creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the project.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the project.\" ) deleted : Optional [ bool ] = Field ( None , description = \"A deletion mark of the project.\" ) owner_name : Optional [ str ] = Field ( None , description = \"The owner name of the project.\" ) togglable : Optional [ bool ] = Field ( None , description = \"Correspond to the UI about whether the project's publicity is updatable (for UI)\" , ) current_user_role_id : Optional [ int ] = Field ( None , description = \"The role ID with highest permission of the current user who triggered the API (for UI). This attribute is deprecated and will be removed in future versions.\" , ) current_user_role_ids : Optional [ List [ int ]] = Field ( None , description = \"The list of role ID of the current user who triggered the API (for UI)\" , ) repo_count : Optional [ int ] = Field ( None , description = \"The number of the repositories under this project.\" ) chart_count : Optional [ int ] = Field ( None , description = \"The total number of charts under this project.\" ) metadata : Optional [ ProjectMetadata ] = Field ( None , description = \"The metadata of the project.\" ) cve_allowlist : Optional [ CVEAllowlist ] = Field ( None , description = \"The CVE allowlist of this project.\" )","title":"Project"},{"location":"reference/models/models/#harborapi.models.models.Project.project_id","text":"","title":"project_id"},{"location":"reference/models/models/#harborapi.models.models.Project.owner_id","text":"","title":"owner_id"},{"location":"reference/models/models/#harborapi.models.models.Project.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Project.registry_id","text":"","title":"registry_id"},{"location":"reference/models/models/#harborapi.models.models.Project.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Project.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.Project.deleted","text":"","title":"deleted"},{"location":"reference/models/models/#harborapi.models.models.Project.owner_name","text":"","title":"owner_name"},{"location":"reference/models/models/#harborapi.models.models.Project.togglable","text":"","title":"togglable"},{"location":"reference/models/models/#harborapi.models.models.Project.current_user_role_id","text":"","title":"current_user_role_id"},{"location":"reference/models/models/#harborapi.models.models.Project.current_user_role_ids","text":"","title":"current_user_role_ids"},{"location":"reference/models/models/#harborapi.models.models.Project.repo_count","text":"","title":"repo_count"},{"location":"reference/models/models/#harborapi.models.models.Project.chart_count","text":"","title":"chart_count"},{"location":"reference/models/models/#harborapi.models.models.Project.metadata","text":"","title":"metadata"},{"location":"reference/models/models/#harborapi.models.models.Project.cve_allowlist","text":"","title":"cve_allowlist"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary","text":"Source code in harborapi/models/models.py 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 class ProjectSummary ( BaseModel ): repo_count : Optional [ int ] = Field ( None , description = \"The number of the repositories under this project.\" ) chart_count : Optional [ int ] = Field ( None , description = \"The total number of charts under this project.\" ) project_admin_count : Optional [ int ] = Field ( None , description = \"The total number of project admin members.\" ) maintainer_count : Optional [ int ] = Field ( None , description = \"The total number of maintainer members.\" ) developer_count : Optional [ int ] = Field ( None , description = \"The total number of developer members.\" ) guest_count : Optional [ int ] = Field ( None , description = \"The total number of guest members.\" ) limited_guest_count : Optional [ int ] = Field ( None , description = \"The total number of limited guest members.\" ) quota : Optional [ ProjectSummaryQuota ] = None registry : Optional [ Registry ] = None","title":"ProjectSummary"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.repo_count","text":"","title":"repo_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.chart_count","text":"","title":"chart_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.project_admin_count","text":"","title":"project_admin_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.maintainer_count","text":"","title":"maintainer_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.developer_count","text":"","title":"developer_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.guest_count","text":"","title":"guest_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.limited_guest_count","text":"","title":"limited_guest_count"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.quota","text":"","title":"quota"},{"location":"reference/models/models/#harborapi.models.models.ProjectSummary.registry","text":"","title":"registry"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy","text":"Source code in harborapi/models/models.py 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 class ReplicationPolicy ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The policy ID.\" ) name : Optional [ str ] = Field ( None , description = \"The policy name.\" ) description : Optional [ str ] = Field ( None , description = \"The description of the policy.\" ) src_registry : Optional [ Registry ] = Field ( None , description = \"The source registry.\" ) dest_registry : Optional [ Registry ] = Field ( None , description = \"The destination registry.\" ) dest_namespace : Optional [ str ] = Field ( None , description = \"The destination namespace.\" ) dest_namespace_replace_count : Optional [ int ] = Field ( None , description = \"Specify how many path components will be replaced by the provided destination namespace. \\n The default value is -1 in which case the legacy mode will be applied.\" , ) trigger : Optional [ ReplicationTrigger ] = None filters : Optional [ List [ ReplicationFilter ]] = Field ( None , description = \"The replication policy filter array.\" ) replicate_deletion : Optional [ bool ] = Field ( None , description = \"Whether to replicate the deletion operation.\" ) deletion : Optional [ bool ] = Field ( None , description = 'Deprecated, use \"replicate_deletion\" instead. Whether to replicate the deletion operation.' , ) override : Optional [ bool ] = Field ( None , description = \"Whether to override the resources on the destination registry.\" , ) enabled : Optional [ bool ] = Field ( None , description = \"Whether the policy is enabled or not.\" ) creation_time : Optional [ datetime ] = Field ( None , description = \"The create time of the policy.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the policy.\" ) speed : Optional [ int ] = Field ( None , description = \"speed limit for each task\" )","title":"ReplicationPolicy"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.src_registry","text":"","title":"src_registry"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.dest_registry","text":"","title":"dest_registry"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.dest_namespace","text":"","title":"dest_namespace"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.dest_namespace_replace_count","text":"","title":"dest_namespace_replace_count"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.filters","text":"","title":"filters"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.replicate_deletion","text":"","title":"replicate_deletion"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.deletion","text":"","title":"deletion"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.override","text":"","title":"override"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.enabled","text":"","title":"enabled"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.ReplicationPolicy.speed","text":"","title":"speed"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderInfo","text":"Source code in harborapi/models/models.py 2199 2200 2201 2202 2203 2204 2205 class RegistryProviderInfo ( BaseModel ): endpoint_pattern : Optional [ RegistryProviderEndpointPattern ] = Field ( None , description = \"The endpoint pattern\" ) credential_pattern : Optional [ RegistryProviderCredentialPattern ] = Field ( None , description = \"The credential pattern\" )","title":"RegistryProviderInfo"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderInfo.endpoint_pattern","text":"","title":"endpoint_pattern"},{"location":"reference/models/models/#harborapi.models.models.RegistryProviderInfo.credential_pattern","text":"","title":"credential_pattern"},{"location":"reference/models/models/#harborapi.models.models.Robot","text":"Source code in harborapi/models/models.py 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 class Robot ( BaseModel ): id : Optional [ int ] = Field ( None , description = \"The ID of the robot\" ) name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) description : Optional [ str ] = Field ( None , description = \"The description of the robot\" ) secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) level : Optional [ str ] = Field ( None , description = \"The level of the robot, project or system\" ) duration : Optional [ int ] = Field ( None , description = \"The duration of the robot in days\" ) editable : Optional [ bool ] = Field ( None , description = \"The editable status of the robot\" ) disable : Optional [ bool ] = Field ( None , description = \"The disable status of the robot\" ) expires_at : Optional [ int ] = Field ( None , description = \"The expiration data of the robot\" ) permissions : Optional [ List [ RobotPermission ]] = None creation_time : Optional [ datetime ] = Field ( None , description = \"The creation time of the robot.\" ) update_time : Optional [ datetime ] = Field ( None , description = \"The update time of the robot.\" )","title":"Robot"},{"location":"reference/models/models/#harborapi.models.models.Robot.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.Robot.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.Robot.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.Robot.secret","text":"","title":"secret"},{"location":"reference/models/models/#harborapi.models.models.Robot.level","text":"","title":"level"},{"location":"reference/models/models/#harborapi.models.models.Robot.duration","text":"","title":"duration"},{"location":"reference/models/models/#harborapi.models.models.Robot.editable","text":"","title":"editable"},{"location":"reference/models/models/#harborapi.models.models.Robot.disable","text":"","title":"disable"},{"location":"reference/models/models/#harborapi.models.models.Robot.expires_at","text":"","title":"expires_at"},{"location":"reference/models/models/#harborapi.models.models.Robot.permissions","text":"","title":"permissions"},{"location":"reference/models/models/#harborapi.models.models.Robot.creation_time","text":"","title":"creation_time"},{"location":"reference/models/models/#harborapi.models.models.Robot.update_time","text":"","title":"update_time"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate","text":"Source code in harborapi/models/models.py 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 class RobotCreate ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The name of the tag\" ) description : Optional [ str ] = Field ( None , description = \"The description of the robot\" ) secret : Optional [ str ] = Field ( None , description = \"The secret of the robot\" ) level : Optional [ str ] = Field ( None , description = \"The level of the robot, project or system\" ) disable : Optional [ bool ] = Field ( None , description = \"The disable status of the robot\" ) duration : Optional [ int ] = Field ( None , description = \"The duration of the robot in days\" ) permissions : Optional [ List [ RobotPermission ]] = None","title":"RobotCreate"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.name","text":"","title":"name"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.description","text":"","title":"description"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.secret","text":"","title":"secret"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.level","text":"","title":"level"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.disable","text":"","title":"disable"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.duration","text":"","title":"duration"},{"location":"reference/models/models/#harborapi.models.models.RobotCreate.permissions","text":"","title":"permissions"},{"location":"reference/models/models/#harborapi.models.models.RetentionMetadata","text":"Source code in harborapi/models/models.py 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 class RetentionMetadata ( BaseModel ): templates : Optional [ List [ RetentionRuleMetadata ]] = Field ( None , description = \"templates\" ) scope_selectors : Optional [ List [ RetentionSelectorMetadata ]] = Field ( None , description = \"supported scope selectors\" ) tag_selectors : Optional [ List [ RetentionSelectorMetadata ]] = Field ( None , description = \"supported tag selectors\" )","title":"RetentionMetadata"},{"location":"reference/models/models/#harborapi.models.models.RetentionMetadata.templates","text":"","title":"templates"},{"location":"reference/models/models/#harborapi.models.models.RetentionMetadata.scope_selectors","text":"","title":"scope_selectors"},{"location":"reference/models/models/#harborapi.models.models.RetentionMetadata.tag_selectors","text":"","title":"tag_selectors"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicy","text":"Source code in harborapi/models/models.py 2261 2262 2263 2264 2265 2266 class RetentionPolicy ( BaseModel ): id : Optional [ int ] = None algorithm : Optional [ str ] = None rules : Optional [ List [ RetentionRule ]] = None trigger : Optional [ RetentionRuleTrigger ] = None scope : Optional [ RetentionPolicyScope ] = None","title":"RetentionPolicy"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicy.id","text":"","title":"id"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicy.algorithm","text":"","title":"algorithm"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicy.rules","text":"","title":"rules"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicy.trigger","text":"","title":"trigger"},{"location":"reference/models/models/#harborapi.models.models.RetentionPolicy.scope","text":"","title":"scope"},{"location":"reference/models/models/#harborapi.models.models.Search","text":"Source code in harborapi/models/models.py 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 class Search ( BaseModel ): project : Optional [ List [ Project ]] = Field ( None , description = \"Search results of the projects that matched the filter keywords.\" , ) repository : Optional [ List [ SearchRepository ]] = Field ( None , description = \"Search results of the repositories that matched the filter keywords.\" , ) chart : Optional [ List [ SearchResult ]] = Field ( None , description = \"Search results of the charts that macthed the filter keywords.\" , )","title":"Search"},{"location":"reference/models/models/#harborapi.models.models.Search.project","text":"","title":"project"},{"location":"reference/models/models/#harborapi.models.models.Search.repository","text":"","title":"repository"},{"location":"reference/models/models/#harborapi.models.models.Search.chart","text":"","title":"chart"},{"location":"reference/models/scanner/","text":"Scanner The majority of these models have been auto-generated from the official Harbor Pluggable Scanner OpenAPI 3.0 Schema using datamodel-code-generator . SemVer Source code in harborapi/models/scanner.py 25 26 27 28 29 class SemVer ( NamedTuple ): # TODO: move this and get_version_tuple() to separate module (for reuse) major : int minor : int patch : int major : int class-attribute minor : int class-attribute patch : int class-attribute Scanner Source code in harborapi/models/scanner.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Scanner ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The name of the scanner.\" , example = \"Trivy\" ) vendor : Optional [ str ] = Field ( None , description = \"The name of the scanner's provider.\" , example = \"Aqua Security\" ) version : Optional [ str ] = Field ( None , description = \"The version of the scanner.\" , example = \"0.4.0\" ) def get_version_tuple ( self ) -> SemVer : if self . version is None : return SemVer ( 0 , 0 , 0 ) parts = self . version . split ( \".\" ) return SemVer ( * [ int ( part ) for part in parts ]) # why have to wrap in list? name : Optional [ str ] = Field ( None , description = 'The name of the scanner.' , example = 'Trivy' ) class-attribute vendor : Optional [ str ] = Field ( None , description = \"The name of the scanner's provider.\" , example = 'Aqua Security' ) class-attribute version : Optional [ str ] = Field ( None , description = 'The version of the scanner.' , example = '0.4.0' ) class-attribute get_version_tuple () Source code in harborapi/models/scanner.py 43 44 45 46 47 def get_version_tuple ( self ) -> SemVer : if self . version is None : return SemVer ( 0 , 0 , 0 ) parts = self . version . split ( \".\" ) return SemVer ( * [ int ( part ) for part in parts ]) # why have to wrap in list? ScannerProperties Source code in harborapi/models/scanner.py 50 51 52 53 54 class ScannerProperties ( BaseModel ): pass class Config : extra = Extra . allow Config Source code in harborapi/models/scanner.py 53 54 class Config : extra = Extra . allow extra = Extra . allow class-attribute ScannerCapability Source code in harborapi/models/scanner.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class ScannerCapability ( BaseModel ): consumes_mime_types : List [ str ] = Field ( ... , description = 'The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given \\n mime type should only be present in one capability item. \\n ' , example = [ \"application/vnd.oci.image.manifest.v1+json\" , \"application/vnd.docker.distribution.manifest.v2+json\" , ], ) produces_mime_types : List [ str ] = Field ( ... , description = \"The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record. \\n \" , example = [ \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" ], ) consumes_mime_types : List [ str ] = Field ( Ellipsis , description = 'The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given \\n mime type should only be present in one capability item. \\n ' , example = [ 'application/vnd.oci.image.manifest.v1+json' , 'application/vnd.docker.distribution.manifest.v2+json' ]) class-attribute produces_mime_types : List [ str ] = Field ( Ellipsis , description = 'The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record. \\n ' , example = [ 'application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0' ]) class-attribute ScanRequestId Source code in harborapi/models/scanner.py 75 76 77 78 79 80 class ScanRequestId ( BaseModel ): __root__ : str = Field ( ... , description = \"A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the \\n identifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports. \\n \" , example = \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , ) __root__ : str = Field ( Ellipsis , description = 'A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the \\n identifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports. \\n ' , example = '3fa85f64-5717-4562-b3fc-2c963f66afa6' ) class-attribute Registry Source code in harborapi/models/scanner.py 83 84 85 86 87 88 89 90 91 92 93 class Registry ( BaseModel ): url : Optional [ str ] = Field ( None , description = \"A base URL or the Docker Registry v2 API.\" , example = \"https://core.harbor.domain\" , ) authorization : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API. \\n It's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which \\n allows the underlying scanner to pull the artifact from the Docker Registry. \\n \" , example = \"Basic BASE64_ENCODED_CREDENTIALS\" , ) url : Optional [ str ] = Field ( None , description = 'A base URL or the Docker Registry v2 API.' , example = 'https://core.harbor.domain' ) class-attribute authorization : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API. \\n It's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which \\n allows the underlying scanner to pull the artifact from the Docker Registry. \\n \" , example = 'Basic BASE64_ENCODED_CREDENTIALS' ) class-attribute Artifact Source code in harborapi/models/scanner.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Artifact ( BaseModel ): repository : Optional [ str ] = Field ( None , description = \"The name of the Docker Registry repository containing the artifact.\" , example = \"library/mongo\" , ) digest : Optional [ str ] = Field ( None , description = \"The artifact's digest, consisting of an algorithm and hex portion.\" , example = \"sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b\" , ) tag : Optional [ str ] = Field ( None , description = \"The artifact's tag\" , example = \"3.14-xenial\" ) mime_type : Optional [ str ] = Field ( None , description = \"The MIME type of the artifact.\" , example = \"application/vnd.docker.distribution.manifest.v2+json\" , ) repository : Optional [ str ] = Field ( None , description = 'The name of the Docker Registry repository containing the artifact.' , example = 'library/mongo' ) class-attribute digest : Optional [ str ] = Field ( None , description = \"The artifact's digest, consisting of an algorithm and hex portion.\" , example = 'sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b' ) class-attribute tag : Optional [ str ] = Field ( None , description = \"The artifact's tag\" , example = '3.14-xenial' ) class-attribute mime_type : Optional [ str ] = Field ( None , description = 'The MIME type of the artifact.' , example = 'application/vnd.docker.distribution.manifest.v2+json' ) class-attribute Severity Source code in harborapi/models/scanner.py 117 118 119 120 121 122 123 class Severity ( Enum ): unknown = \"Unknown\" negligible = \"Negligible\" low = \"Low\" medium = \"Medium\" high = \"High\" critical = \"Critical\" unknown = 'Unknown' class-attribute negligible = 'Negligible' class-attribute low = 'Low' class-attribute medium = 'Medium' class-attribute high = 'High' class-attribute critical = 'Critical' class-attribute Error Source code in harborapi/models/scanner.py 126 127 class Error ( BaseModel ): message : Optional [ str ] = Field ( None , example = \"Some unexpected error\" ) message : Optional [ str ] = Field ( None , example = 'Some unexpected error' ) class-attribute CVSSDetails Source code in harborapi/models/scanner.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 class CVSSDetails ( BaseModel ): score_v3 : Optional [ float ] = Field ( None , description = \"The CVSS 3.0 score for the vulnerability. \\n \" , example = 3.2 ) score_v2 : Optional [ float ] = Field ( None , description = \"The CVSS 2.0 score for the vulnerability. \\n \" ) vector_v3 : Optional [ str ] = Field ( None , description = \"The CVSS 3.0 vector for the vulnerability. \\n \" , example = \"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N\" , ) vector_v2 : Optional [ str ] = Field ( None , description = \"The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N \\n \" , example = \"AV:N/AC:L/Au:N/C:N/I:N/A:P\" , ) score_v3 : Optional [ float ] = Field ( None , description = 'The CVSS 3.0 score for the vulnerability. \\n ' , example = 3.2 ) class-attribute score_v2 : Optional [ float ] = Field ( None , description = 'The CVSS 2.0 score for the vulnerability. \\n ' ) class-attribute vector_v3 : Optional [ str ] = Field ( None , description = 'The CVSS 3.0 vector for the vulnerability. \\n ' , example = 'CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N' ) class-attribute vector_v2 : Optional [ str ] = Field ( None , description = 'The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N \\n ' , example = 'AV:N/AC:L/Au:N/C:N/I:N/A:P' ) class-attribute ScannerAdapterMetadata Source code in harborapi/models/scanner.py 149 150 151 152 class ScannerAdapterMetadata ( BaseModel ): scanner : Scanner capabilities : List [ ScannerCapability ] properties : Optional [ ScannerProperties ] = None scanner : Scanner class-attribute capabilities : List [ ScannerCapability ] class-attribute properties : Optional [ ScannerProperties ] = None class-attribute ScanRequest Source code in harborapi/models/scanner.py 155 156 157 class ScanRequest ( BaseModel ): registry : Registry artifact : Artifact registry : Registry class-attribute artifact : Artifact class-attribute ScanResponse Source code in harborapi/models/scanner.py 160 161 class ScanResponse ( BaseModel ): id : ScanRequestId id : ScanRequestId class-attribute VulnerabilityItem Source code in harborapi/models/scanner.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 class VulnerabilityItem ( BaseModel ): id : Optional [ str ] = Field ( None , description = \"The unique identifier of the vulnerability.\" , example = \"CVE-2017-8283\" , ) package : Optional [ str ] = Field ( None , description = \"An operating system package containing the vulnerability. \\n \" , example = \"dpkg\" , ) version : Optional [ str ] = Field ( None , description = \"The version of the package containing the vulnerability. \\n \" , example = \"1.17.27\" , ) fix_version : Optional [ str ] = Field ( None , description = \"The version of the package containing the fix if available. \\n \" , example = \"1.18.0\" , ) severity : Optional [ Severity ] = None description : Optional [ str ] = Field ( None , description = \"The detailed description of the vulnerability. \\n \" , example = \"dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program \\n and does not offer a protection mechanism for blank-indented diff hunks, which \\n allows remote attackers to conduct directory traversal attacks via a crafted \\n Debian source package, as demonstrated by using of dpkg-source on NetBSD. \\n \" , ) links : Optional [ List [ AnyUrl ]] = Field ( None , description = \"The list of links to the upstream databases with the full description of the vulnerability. \\n \" , example = [ \"https://security-tracker.debian.org/tracker/CVE-2017-8283\" ], ) preferred_cvss : Optional [ CVSSDetails ] = None cwe_ids : Optional [ List [ str ]] = Field ( None , description = \"The Common Weakness Enumeration Identifiers associated with this vulnerability. \\n \" , example = [ \"CWE-476\" ], ) vendor_attributes : Optional [ Dict [ str , Any ]] = None def get_cvss_score ( self , scanner : Optional [ Scanner ], version : int = 3 , vendor_priority : Iterable [ str ] = ( \"nvd\" , \"redhat\" ), ) -> Optional [ float ]: \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field. In order to not tightly couple this method with a specific scanner, we use the scanner name to determinehow to retrieve the CVSS score. Forward compatibility is in place in the event that Trivy starts conforming to the spec. \"\"\" # Forward compatibility for Trivy (and others): # try to use the preferred_cvss field first in case it is implemented in the future if self . preferred_cvss is not None : if version == 3 and self . preferred_cvss . score_v3 is not None : return self . preferred_cvss . score_v3 elif version == 2 and self . preferred_cvss . score_v2 is not None : return self . preferred_cvss . score_v2 # fallback to the scanner-specific CVSS score # TODO: refactor: move to a separate function if not scanner : return None if scanner . name == \"Trivy\" : if self . vendor_attributes is None : return None cvss_data = self . vendor_attributes . get ( \"CVSS\" ) if not cvss_data : return None for prio in vendor_priority : # Trivy uses the vendor name as the key for the CVSS data vendor_cvss = cvss_data . get ( prio ) if vendor_cvss is None : continue # NOTE: we can't guarantee these values are floats (dangerous) if version == 3 : return vendor_cvss . get ( \"V3Score\" ) elif version == 2 : return vendor_cvss . get ( \"V2Score\" ) return None id : Optional [ str ] = Field ( None , description = 'The unique identifier of the vulnerability.' , example = 'CVE-2017-8283' ) class-attribute package : Optional [ str ] = Field ( None , description = 'An operating system package containing the vulnerability. \\n ' , example = 'dpkg' ) class-attribute version : Optional [ str ] = Field ( None , description = 'The version of the package containing the vulnerability. \\n ' , example = '1.17.27' ) class-attribute fix_version : Optional [ str ] = Field ( None , description = 'The version of the package containing the fix if available. \\n ' , example = '1.18.0' ) class-attribute severity : Optional [ Severity ] = None class-attribute description : Optional [ str ] = Field ( None , description = 'The detailed description of the vulnerability. \\n ' , example = 'dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program \\n and does not offer a protection mechanism for blank-indented diff hunks, which \\n allows remote attackers to conduct directory traversal attacks via a crafted \\n Debian source package, as demonstrated by using of dpkg-source on NetBSD. \\n ' ) class-attribute links : Optional [ List [ AnyUrl ]] = Field ( None , description = 'The list of links to the upstream databases with the full description of the vulnerability. \\n ' , example = [ 'https://security-tracker.debian.org/tracker/CVE-2017-8283' ]) class-attribute preferred_cvss : Optional [ CVSSDetails ] = None class-attribute cwe_ids : Optional [ List [ str ]] = Field ( None , description = 'The Common Weakness Enumeration Identifiers associated with this vulnerability. \\n ' , example = [ 'CWE-476' ]) class-attribute vendor_attributes : Optional [ Dict [ str , Any ]] = None class-attribute get_cvss_score ( scanner , version = 3 , vendor_priority = ( 'nvd' , 'redhat' )) The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field. In order to not tightly couple this method with a specific scanner, we use the scanner name to determinehow to retrieve the CVSS score. Forward compatibility is in place in the event that Trivy starts conforming to the spec. Source code in harborapi/models/scanner.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def get_cvss_score ( self , scanner : Optional [ Scanner ], version : int = 3 , vendor_priority : Iterable [ str ] = ( \"nvd\" , \"redhat\" ), ) -> Optional [ float ]: \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field. In order to not tightly couple this method with a specific scanner, we use the scanner name to determinehow to retrieve the CVSS score. Forward compatibility is in place in the event that Trivy starts conforming to the spec. \"\"\" # Forward compatibility for Trivy (and others): # try to use the preferred_cvss field first in case it is implemented in the future if self . preferred_cvss is not None : if version == 3 and self . preferred_cvss . score_v3 is not None : return self . preferred_cvss . score_v3 elif version == 2 and self . preferred_cvss . score_v2 is not None : return self . preferred_cvss . score_v2 # fallback to the scanner-specific CVSS score # TODO: refactor: move to a separate function if not scanner : return None if scanner . name == \"Trivy\" : if self . vendor_attributes is None : return None cvss_data = self . vendor_attributes . get ( \"CVSS\" ) if not cvss_data : return None for prio in vendor_priority : # Trivy uses the vendor name as the key for the CVSS data vendor_cvss = cvss_data . get ( prio ) if vendor_cvss is None : continue # NOTE: we can't guarantee these values are floats (dangerous) if version == 3 : return vendor_cvss . get ( \"V3Score\" ) elif version == 2 : return vendor_cvss . get ( \"V2Score\" ) return None ErrorResponse Source code in harborapi/models/scanner.py 254 255 class ErrorResponse ( BaseModel ): error : Optional [ Error ] = None error : Optional [ Error ] = None class-attribute HarborVulnerabilityReport Source code in harborapi/models/scanner.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 class HarborVulnerabilityReport ( BaseModel ): generated_at : Optional [ datetime ] = Field ( None , description = \"The time the report was generated.\" ) artifact : Optional [ Artifact ] = Field ( None , description = \"The artifact scanned.\" ) scanner : Optional [ Scanner ] = Field ( None , description = \"The scanner used to generate the report.\" ) # Changes from spec: these two fields have been given defaults # TODO: document this severity : Severity = Field ( Severity . unknown , description = \"The overall severity of the vulnerabilities.\" ) vulnerabilities : List [ VulnerabilityItem ] = Field ( default_factory = list , description = \"The list of vulnerabilities found.\" ) def __repr__ ( self ): return f \"HarborVulnerabilityReport(generated_at= { self . generated_at } , artifact= { self . artifact } , scanner= { self . scanner } , severity= { self . severity } , vulnerabilities=list(len= { len ( self . vulnerabilities ) } ))\" @property def fixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . fix_version ] @property def unfixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if not v . fix_version ] @property def critical ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . critical ) @property def high ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . high ) @property def medium ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . medium ) @property def low ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . low ) def vulnerabilities_by_severity ( self , severity : Severity ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . severity == severity ] def get_cvss_scores ( self , ignore_none : bool = True ) -> Union [ List [ float ], List [ Optional [ float ]]]: \"\"\"Returns a list of CVSS scores for each vulnerability. Parameters ---- ignore_none: bool Omits None values from the list. Returns ---- List[Optional[float]] A list of CVSS scores for each vulnerability. \"\"\" if ignore_none : f = lambda v : False if v is None else True else : f = lambda v : True return list ( filter ( f , [ v . get_cvss_score ( self . scanner ) for v in self . vulnerabilities ]) ) generated_at : Optional [ datetime ] = Field ( None , description = 'The time the report was generated.' ) class-attribute artifact : Optional [ Artifact ] = Field ( None , description = 'The artifact scanned.' ) class-attribute scanner : Optional [ Scanner ] = Field ( None , description = 'The scanner used to generate the report.' ) class-attribute severity : Severity = Field ( Severity . unknown , description = 'The overall severity of the vulnerabilities.' ) class-attribute vulnerabilities : List [ VulnerabilityItem ] = Field ( default_factory = list , description = 'The list of vulnerabilities found.' ) class-attribute __repr__ () Source code in harborapi/models/scanner.py 275 276 def __repr__ ( self ): return f \"HarborVulnerabilityReport(generated_at= { self . generated_at } , artifact= { self . artifact } , scanner= { self . scanner } , severity= { self . severity } , vulnerabilities=list(len= { len ( self . vulnerabilities ) } ))\" fixable () property Source code in harborapi/models/scanner.py 278 279 280 @property def fixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . fix_version ] unfixable () property Source code in harborapi/models/scanner.py 282 283 284 @property def unfixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if not v . fix_version ] critical () property Source code in harborapi/models/scanner.py 286 287 288 @property def critical ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . critical ) high () property Source code in harborapi/models/scanner.py 290 291 292 @property def high ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . high ) medium () property Source code in harborapi/models/scanner.py 294 295 296 @property def medium ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . medium ) low () property Source code in harborapi/models/scanner.py 298 299 300 @property def low ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . low ) vulnerabilities_by_severity ( severity ) Source code in harborapi/models/scanner.py 302 303 304 305 def vulnerabilities_by_severity ( self , severity : Severity ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . severity == severity ] get_cvss_scores ( ignore_none = True ) Returns a list of CVSS scores for each vulnerability. Parameters: Name Type Description Default ignore_none bool Omits None values from the list. True Returns: Type Description List [ Optional [ float ]] A list of CVSS scores for each vulnerability. Source code in harborapi/models/scanner.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def get_cvss_scores ( self , ignore_none : bool = True ) -> Union [ List [ float ], List [ Optional [ float ]]]: \"\"\"Returns a list of CVSS scores for each vulnerability. Parameters ---- ignore_none: bool Omits None values from the list. Returns ---- List[Optional[float]] A list of CVSS scores for each vulnerability. \"\"\" if ignore_none : f = lambda v : False if v is None else True else : f = lambda v : True return list ( filter ( f , [ v . get_cvss_score ( self . scanner ) for v in self . vulnerabilities ]) )","title":"Scanner"},{"location":"reference/models/scanner/#scanner","text":"The majority of these models have been auto-generated from the official Harbor Pluggable Scanner OpenAPI 3.0 Schema using datamodel-code-generator .","title":"Scanner"},{"location":"reference/models/scanner/#harborapi.models.scanner.SemVer","text":"Source code in harborapi/models/scanner.py 25 26 27 28 29 class SemVer ( NamedTuple ): # TODO: move this and get_version_tuple() to separate module (for reuse) major : int minor : int patch : int","title":"SemVer"},{"location":"reference/models/scanner/#harborapi.models.scanner.SemVer.major","text":"","title":"major"},{"location":"reference/models/scanner/#harborapi.models.scanner.SemVer.minor","text":"","title":"minor"},{"location":"reference/models/scanner/#harborapi.models.scanner.SemVer.patch","text":"","title":"patch"},{"location":"reference/models/scanner/#harborapi.models.scanner.Scanner","text":"Source code in harborapi/models/scanner.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Scanner ( BaseModel ): name : Optional [ str ] = Field ( None , description = \"The name of the scanner.\" , example = \"Trivy\" ) vendor : Optional [ str ] = Field ( None , description = \"The name of the scanner's provider.\" , example = \"Aqua Security\" ) version : Optional [ str ] = Field ( None , description = \"The version of the scanner.\" , example = \"0.4.0\" ) def get_version_tuple ( self ) -> SemVer : if self . version is None : return SemVer ( 0 , 0 , 0 ) parts = self . version . split ( \".\" ) return SemVer ( * [ int ( part ) for part in parts ]) # why have to wrap in list?","title":"Scanner"},{"location":"reference/models/scanner/#harborapi.models.scanner.Scanner.name","text":"","title":"name"},{"location":"reference/models/scanner/#harborapi.models.scanner.Scanner.vendor","text":"","title":"vendor"},{"location":"reference/models/scanner/#harborapi.models.scanner.Scanner.version","text":"","title":"version"},{"location":"reference/models/scanner/#harborapi.models.scanner.Scanner.get_version_tuple","text":"Source code in harborapi/models/scanner.py 43 44 45 46 47 def get_version_tuple ( self ) -> SemVer : if self . version is None : return SemVer ( 0 , 0 , 0 ) parts = self . version . split ( \".\" ) return SemVer ( * [ int ( part ) for part in parts ]) # why have to wrap in list?","title":"get_version_tuple()"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerProperties","text":"Source code in harborapi/models/scanner.py 50 51 52 53 54 class ScannerProperties ( BaseModel ): pass class Config : extra = Extra . allow","title":"ScannerProperties"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerProperties.Config","text":"Source code in harborapi/models/scanner.py 53 54 class Config : extra = Extra . allow","title":"Config"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerProperties.Config.extra","text":"","title":"extra"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerCapability","text":"Source code in harborapi/models/scanner.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class ScannerCapability ( BaseModel ): consumes_mime_types : List [ str ] = Field ( ... , description = 'The set of MIME types of the artifacts supported by the scanner to produce the reports specified in the \"produces_mime_types\". A given \\n mime type should only be present in one capability item. \\n ' , example = [ \"application/vnd.oci.image.manifest.v1+json\" , \"application/vnd.docker.distribution.manifest.v2+json\" , ], ) produces_mime_types : List [ str ] = Field ( ... , description = \"The set of MIME types of reports generated by the scanner for the consumes_mime_types of the same capability record. \\n \" , example = [ \"application/vnd.scanner.adapter.vuln.report.harbor+json; version=1.0\" ], )","title":"ScannerCapability"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerCapability.consumes_mime_types","text":"","title":"consumes_mime_types"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerCapability.produces_mime_types","text":"","title":"produces_mime_types"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanRequestId","text":"Source code in harborapi/models/scanner.py 75 76 77 78 79 80 class ScanRequestId ( BaseModel ): __root__ : str = Field ( ... , description = \"A unique identifier returned by the [/scan](#/operation/AcceptScanRequest] operations. The format of the \\n identifier is not imposed but it should be unique enough to prevent collisons when polling for scan reports. \\n \" , example = \"3fa85f64-5717-4562-b3fc-2c963f66afa6\" , )","title":"ScanRequestId"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanRequestId.__root__","text":"","title":"__root__"},{"location":"reference/models/scanner/#harborapi.models.scanner.Registry","text":"Source code in harborapi/models/scanner.py 83 84 85 86 87 88 89 90 91 92 93 class Registry ( BaseModel ): url : Optional [ str ] = Field ( None , description = \"A base URL or the Docker Registry v2 API.\" , example = \"https://core.harbor.domain\" , ) authorization : Optional [ str ] = Field ( None , description = \"An optional value of the HTTP Authorization header sent with each request to the Docker Registry v2 API. \\n It's used to exchange Base64 encoded robot account credentials to a short lived JWT access token which \\n allows the underlying scanner to pull the artifact from the Docker Registry. \\n \" , example = \"Basic BASE64_ENCODED_CREDENTIALS\" , )","title":"Registry"},{"location":"reference/models/scanner/#harborapi.models.scanner.Registry.url","text":"","title":"url"},{"location":"reference/models/scanner/#harborapi.models.scanner.Registry.authorization","text":"","title":"authorization"},{"location":"reference/models/scanner/#harborapi.models.scanner.Artifact","text":"Source code in harborapi/models/scanner.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Artifact ( BaseModel ): repository : Optional [ str ] = Field ( None , description = \"The name of the Docker Registry repository containing the artifact.\" , example = \"library/mongo\" , ) digest : Optional [ str ] = Field ( None , description = \"The artifact's digest, consisting of an algorithm and hex portion.\" , example = \"sha256:6c3c624b58dbbcd3c0dd82b4c53f04194d1247c6eebdaab7c610cf7d66709b3b\" , ) tag : Optional [ str ] = Field ( None , description = \"The artifact's tag\" , example = \"3.14-xenial\" ) mime_type : Optional [ str ] = Field ( None , description = \"The MIME type of the artifact.\" , example = \"application/vnd.docker.distribution.manifest.v2+json\" , )","title":"Artifact"},{"location":"reference/models/scanner/#harborapi.models.scanner.Artifact.repository","text":"","title":"repository"},{"location":"reference/models/scanner/#harborapi.models.scanner.Artifact.digest","text":"","title":"digest"},{"location":"reference/models/scanner/#harborapi.models.scanner.Artifact.tag","text":"","title":"tag"},{"location":"reference/models/scanner/#harborapi.models.scanner.Artifact.mime_type","text":"","title":"mime_type"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity","text":"Source code in harborapi/models/scanner.py 117 118 119 120 121 122 123 class Severity ( Enum ): unknown = \"Unknown\" negligible = \"Negligible\" low = \"Low\" medium = \"Medium\" high = \"High\" critical = \"Critical\"","title":"Severity"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity.unknown","text":"","title":"unknown"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity.negligible","text":"","title":"negligible"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity.low","text":"","title":"low"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity.medium","text":"","title":"medium"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity.high","text":"","title":"high"},{"location":"reference/models/scanner/#harborapi.models.scanner.Severity.critical","text":"","title":"critical"},{"location":"reference/models/scanner/#harborapi.models.scanner.Error","text":"Source code in harborapi/models/scanner.py 126 127 class Error ( BaseModel ): message : Optional [ str ] = Field ( None , example = \"Some unexpected error\" )","title":"Error"},{"location":"reference/models/scanner/#harborapi.models.scanner.Error.message","text":"","title":"message"},{"location":"reference/models/scanner/#harborapi.models.scanner.CVSSDetails","text":"Source code in harborapi/models/scanner.py 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 class CVSSDetails ( BaseModel ): score_v3 : Optional [ float ] = Field ( None , description = \"The CVSS 3.0 score for the vulnerability. \\n \" , example = 3.2 ) score_v2 : Optional [ float ] = Field ( None , description = \"The CVSS 2.0 score for the vulnerability. \\n \" ) vector_v3 : Optional [ str ] = Field ( None , description = \"The CVSS 3.0 vector for the vulnerability. \\n \" , example = \"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N\" , ) vector_v2 : Optional [ str ] = Field ( None , description = \"The CVSS 2.0 vector for the vulnerability. The string is of the form AV:L/AC:M/Au:N/C:P/I:N/A:N \\n \" , example = \"AV:N/AC:L/Au:N/C:N/I:N/A:P\" , )","title":"CVSSDetails"},{"location":"reference/models/scanner/#harborapi.models.scanner.CVSSDetails.score_v3","text":"","title":"score_v3"},{"location":"reference/models/scanner/#harborapi.models.scanner.CVSSDetails.score_v2","text":"","title":"score_v2"},{"location":"reference/models/scanner/#harborapi.models.scanner.CVSSDetails.vector_v3","text":"","title":"vector_v3"},{"location":"reference/models/scanner/#harborapi.models.scanner.CVSSDetails.vector_v2","text":"","title":"vector_v2"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata","text":"Source code in harborapi/models/scanner.py 149 150 151 152 class ScannerAdapterMetadata ( BaseModel ): scanner : Scanner capabilities : List [ ScannerCapability ] properties : Optional [ ScannerProperties ] = None","title":"ScannerAdapterMetadata"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata.scanner","text":"","title":"scanner"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata.capabilities","text":"","title":"capabilities"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScannerAdapterMetadata.properties","text":"","title":"properties"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanRequest","text":"Source code in harborapi/models/scanner.py 155 156 157 class ScanRequest ( BaseModel ): registry : Registry artifact : Artifact","title":"ScanRequest"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanRequest.registry","text":"","title":"registry"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanRequest.artifact","text":"","title":"artifact"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanResponse","text":"Source code in harborapi/models/scanner.py 160 161 class ScanResponse ( BaseModel ): id : ScanRequestId","title":"ScanResponse"},{"location":"reference/models/scanner/#harborapi.models.scanner.ScanResponse.id","text":"","title":"id"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem","text":"Source code in harborapi/models/scanner.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 class VulnerabilityItem ( BaseModel ): id : Optional [ str ] = Field ( None , description = \"The unique identifier of the vulnerability.\" , example = \"CVE-2017-8283\" , ) package : Optional [ str ] = Field ( None , description = \"An operating system package containing the vulnerability. \\n \" , example = \"dpkg\" , ) version : Optional [ str ] = Field ( None , description = \"The version of the package containing the vulnerability. \\n \" , example = \"1.17.27\" , ) fix_version : Optional [ str ] = Field ( None , description = \"The version of the package containing the fix if available. \\n \" , example = \"1.18.0\" , ) severity : Optional [ Severity ] = None description : Optional [ str ] = Field ( None , description = \"The detailed description of the vulnerability. \\n \" , example = \"dpkg-source in dpkg 1.3.0 through 1.18.23 is able to use a non-GNU patch program \\n and does not offer a protection mechanism for blank-indented diff hunks, which \\n allows remote attackers to conduct directory traversal attacks via a crafted \\n Debian source package, as demonstrated by using of dpkg-source on NetBSD. \\n \" , ) links : Optional [ List [ AnyUrl ]] = Field ( None , description = \"The list of links to the upstream databases with the full description of the vulnerability. \\n \" , example = [ \"https://security-tracker.debian.org/tracker/CVE-2017-8283\" ], ) preferred_cvss : Optional [ CVSSDetails ] = None cwe_ids : Optional [ List [ str ]] = Field ( None , description = \"The Common Weakness Enumeration Identifiers associated with this vulnerability. \\n \" , example = [ \"CWE-476\" ], ) vendor_attributes : Optional [ Dict [ str , Any ]] = None def get_cvss_score ( self , scanner : Optional [ Scanner ], version : int = 3 , vendor_priority : Iterable [ str ] = ( \"nvd\" , \"redhat\" ), ) -> Optional [ float ]: \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field. In order to not tightly couple this method with a specific scanner, we use the scanner name to determinehow to retrieve the CVSS score. Forward compatibility is in place in the event that Trivy starts conforming to the spec. \"\"\" # Forward compatibility for Trivy (and others): # try to use the preferred_cvss field first in case it is implemented in the future if self . preferred_cvss is not None : if version == 3 and self . preferred_cvss . score_v3 is not None : return self . preferred_cvss . score_v3 elif version == 2 and self . preferred_cvss . score_v2 is not None : return self . preferred_cvss . score_v2 # fallback to the scanner-specific CVSS score # TODO: refactor: move to a separate function if not scanner : return None if scanner . name == \"Trivy\" : if self . vendor_attributes is None : return None cvss_data = self . vendor_attributes . get ( \"CVSS\" ) if not cvss_data : return None for prio in vendor_priority : # Trivy uses the vendor name as the key for the CVSS data vendor_cvss = cvss_data . get ( prio ) if vendor_cvss is None : continue # NOTE: we can't guarantee these values are floats (dangerous) if version == 3 : return vendor_cvss . get ( \"V3Score\" ) elif version == 2 : return vendor_cvss . get ( \"V2Score\" ) return None","title":"VulnerabilityItem"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.id","text":"","title":"id"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.package","text":"","title":"package"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.version","text":"","title":"version"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.fix_version","text":"","title":"fix_version"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.severity","text":"","title":"severity"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.description","text":"","title":"description"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.links","text":"","title":"links"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.preferred_cvss","text":"","title":"preferred_cvss"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.cwe_ids","text":"","title":"cwe_ids"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.vendor_attributes","text":"","title":"vendor_attributes"},{"location":"reference/models/scanner/#harborapi.models.scanner.VulnerabilityItem.get_cvss_score","text":"The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field. In order to not tightly couple this method with a specific scanner, we use the scanner name to determinehow to retrieve the CVSS score. Forward compatibility is in place in the event that Trivy starts conforming to the spec. Source code in harborapi/models/scanner.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def get_cvss_score ( self , scanner : Optional [ Scanner ], version : int = 3 , vendor_priority : Iterable [ str ] = ( \"nvd\" , \"redhat\" ), ) -> Optional [ float ]: \"\"\"The default scanner Trivy, as of version 0.29.1, does not use the preferred_cvss field. In order to not tightly couple this method with a specific scanner, we use the scanner name to determinehow to retrieve the CVSS score. Forward compatibility is in place in the event that Trivy starts conforming to the spec. \"\"\" # Forward compatibility for Trivy (and others): # try to use the preferred_cvss field first in case it is implemented in the future if self . preferred_cvss is not None : if version == 3 and self . preferred_cvss . score_v3 is not None : return self . preferred_cvss . score_v3 elif version == 2 and self . preferred_cvss . score_v2 is not None : return self . preferred_cvss . score_v2 # fallback to the scanner-specific CVSS score # TODO: refactor: move to a separate function if not scanner : return None if scanner . name == \"Trivy\" : if self . vendor_attributes is None : return None cvss_data = self . vendor_attributes . get ( \"CVSS\" ) if not cvss_data : return None for prio in vendor_priority : # Trivy uses the vendor name as the key for the CVSS data vendor_cvss = cvss_data . get ( prio ) if vendor_cvss is None : continue # NOTE: we can't guarantee these values are floats (dangerous) if version == 3 : return vendor_cvss . get ( \"V3Score\" ) elif version == 2 : return vendor_cvss . get ( \"V2Score\" ) return None","title":"get_cvss_score()"},{"location":"reference/models/scanner/#harborapi.models.scanner.ErrorResponse","text":"Source code in harborapi/models/scanner.py 254 255 class ErrorResponse ( BaseModel ): error : Optional [ Error ] = None","title":"ErrorResponse"},{"location":"reference/models/scanner/#harborapi.models.scanner.ErrorResponse.error","text":"","title":"error"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport","text":"Source code in harborapi/models/scanner.py 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 class HarborVulnerabilityReport ( BaseModel ): generated_at : Optional [ datetime ] = Field ( None , description = \"The time the report was generated.\" ) artifact : Optional [ Artifact ] = Field ( None , description = \"The artifact scanned.\" ) scanner : Optional [ Scanner ] = Field ( None , description = \"The scanner used to generate the report.\" ) # Changes from spec: these two fields have been given defaults # TODO: document this severity : Severity = Field ( Severity . unknown , description = \"The overall severity of the vulnerabilities.\" ) vulnerabilities : List [ VulnerabilityItem ] = Field ( default_factory = list , description = \"The list of vulnerabilities found.\" ) def __repr__ ( self ): return f \"HarborVulnerabilityReport(generated_at= { self . generated_at } , artifact= { self . artifact } , scanner= { self . scanner } , severity= { self . severity } , vulnerabilities=list(len= { len ( self . vulnerabilities ) } ))\" @property def fixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . fix_version ] @property def unfixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if not v . fix_version ] @property def critical ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . critical ) @property def high ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . high ) @property def medium ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . medium ) @property def low ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . low ) def vulnerabilities_by_severity ( self , severity : Severity ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . severity == severity ] def get_cvss_scores ( self , ignore_none : bool = True ) -> Union [ List [ float ], List [ Optional [ float ]]]: \"\"\"Returns a list of CVSS scores for each vulnerability. Parameters ---- ignore_none: bool Omits None values from the list. Returns ---- List[Optional[float]] A list of CVSS scores for each vulnerability. \"\"\" if ignore_none : f = lambda v : False if v is None else True else : f = lambda v : True return list ( filter ( f , [ v . get_cvss_score ( self . scanner ) for v in self . vulnerabilities ]) )","title":"HarborVulnerabilityReport"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.generated_at","text":"","title":"generated_at"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.artifact","text":"","title":"artifact"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.scanner","text":"","title":"scanner"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.severity","text":"","title":"severity"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vulnerabilities","text":"","title":"vulnerabilities"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.__repr__","text":"Source code in harborapi/models/scanner.py 275 276 def __repr__ ( self ): return f \"HarborVulnerabilityReport(generated_at= { self . generated_at } , artifact= { self . artifact } , scanner= { self . scanner } , severity= { self . severity } , vulnerabilities=list(len= { len ( self . vulnerabilities ) } ))\"","title":"__repr__()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.fixable","text":"Source code in harborapi/models/scanner.py 278 279 280 @property def fixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . fix_version ]","title":"fixable()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.unfixable","text":"Source code in harborapi/models/scanner.py 282 283 284 @property def unfixable ( self ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if not v . fix_version ]","title":"unfixable()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.critical","text":"Source code in harborapi/models/scanner.py 286 287 288 @property def critical ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . critical )","title":"critical()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.high","text":"Source code in harborapi/models/scanner.py 290 291 292 @property def high ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . high )","title":"high()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.medium","text":"Source code in harborapi/models/scanner.py 294 295 296 @property def medium ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . medium )","title":"medium()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.low","text":"Source code in harborapi/models/scanner.py 298 299 300 @property def low ( self ) -> List [ VulnerabilityItem ]: return self . vulnerabilities_by_severity ( Severity . low )","title":"low()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.vulnerabilities_by_severity","text":"Source code in harborapi/models/scanner.py 302 303 304 305 def vulnerabilities_by_severity ( self , severity : Severity ) -> List [ VulnerabilityItem ]: return [ v for v in self . vulnerabilities if v . severity == severity ]","title":"vulnerabilities_by_severity()"},{"location":"reference/models/scanner/#harborapi.models.scanner.HarborVulnerabilityReport.get_cvss_scores","text":"Returns a list of CVSS scores for each vulnerability. Parameters: Name Type Description Default ignore_none bool Omits None values from the list. True Returns: Type Description List [ Optional [ float ]] A list of CVSS scores for each vulnerability. Source code in harborapi/models/scanner.py 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def get_cvss_scores ( self , ignore_none : bool = True ) -> Union [ List [ float ], List [ Optional [ float ]]]: \"\"\"Returns a list of CVSS scores for each vulnerability. Parameters ---- ignore_none: bool Omits None values from the list. Returns ---- List[Optional[float]] A list of CVSS scores for each vulnerability. \"\"\" if ignore_none : f = lambda v : False if v is None else True else : f = lambda v : True return list ( filter ( f , [ v . get_cvss_score ( self . scanner ) for v in self . vulnerabilities ]) )","title":"get_cvss_scores()"},{"location":"usage/_intro/","text":"Preface Async Client harborapi is predominantly focused on providing an async API for interacting with the Harbor API. The various pages in this section all assume the client is running within a coroutine where await can be used. Non-Async Client harborapi provides HarborClient as a non-async alternative. HarborClient provides all the same methods as HarborAsyncClient , except it schedules the asynchronous methods to run as coroutines in the event loop by intercepting attribute access on the class. All* methods on HarborClient have the same interface as the methods on HarborAsyncClient , except await is not required. It is not recommended to use this client, but is provided as an alternative if you absolutely don't want to deal with anything related to asyncio . See: Sync Client * Private methods (prefixed with _ ) and HTTP methods such as get , post , etc. cannot be called without await .","title":"Preface"},{"location":"usage/_intro/#preface","text":"","title":"Preface"},{"location":"usage/_intro/#async-client","text":"harborapi is predominantly focused on providing an async API for interacting with the Harbor API. The various pages in this section all assume the client is running within a coroutine where await can be used.","title":"Async Client"},{"location":"usage/_intro/#non-async-client","text":"harborapi provides HarborClient as a non-async alternative. HarborClient provides all the same methods as HarborAsyncClient , except it schedules the asynchronous methods to run as coroutines in the event loop by intercepting attribute access on the class. All* methods on HarborClient have the same interface as the methods on HarborAsyncClient , except await is not required. It is not recommended to use this client, but is provided as an alternative if you absolutely don't want to deal with anything related to asyncio . See: Sync Client * Private methods (prefixed with _ ) and HTTP methods such as get , post , etc. cannot be called without await .","title":"Non-Async Client"},{"location":"usage/creating-system-robot/","text":"Creating Privileged Robot Accounts By default, the Robot account creation process in the Harbor web interface only allows for a limited permission scope when creating new Robot accounts. As of Harbor v.2.5.2, this is still the case. In order to circumvent this limitation, one can create robot accounts through the API with system resource permissions that go beyond the options offered in the web interface. This page is based on this comment by Harbor developer wy65701436 . Also check out the source code for more information on all the possible resource permissions that can be granted to Robot accounts. All examples on this page will be using harborapi to create privileged robot accounts. Project Creation Privileges Following the example provided in the GitHub comment above, harborapi uses HarborAsyncClient.create_robot to achieve the same functionality: # Client is instantiated with administrator account await client . create_robot ( RobotCreate ( name = \"from_api\" , description = \"Created from harborapi Python client\" , secret = \"Secret1234\" , level = \"system\" , duration = 30 , permissions = [ RobotPermission ( kind = \"system\" , namespace = \"/\" , access = [ Access ( resource = \"project\" , action = \"create\" ), ], ) ], ) ) Produces: RobotCreated ( id = 11 , name = 'robot$from_api' , secret = 'tBuDZ700tPkKLNQ0z1EAYndMOFEzvgM8' , creation_time = datetime . datetime ( 2022 , 7 , 14 , 10 , 3 , 40 , 906000 , tzinfo = datetime . timezone . utc ), expires_at = 1660385020 , ) Saving Credentials to File The resulting Robot account can be saved to a Harbor credentials file by providing an argument to the path parameter specifying the location to save the credentials to. await client . create_robot ( RobotCreate ( ... ), path = \"/path/to/file.json\" ) By default, the file must not already exist. This can be overriden by adding overwrite=True : await client . create_robot ( RobotCreate ( ... ), path = \"/path/to/file.json\" , overwrite = True ) For more information, see HarborAsyncClient.create_robot .","title":"Creating Privileged Robot Accounts"},{"location":"usage/creating-system-robot/#creating-privileged-robot-accounts","text":"By default, the Robot account creation process in the Harbor web interface only allows for a limited permission scope when creating new Robot accounts. As of Harbor v.2.5.2, this is still the case. In order to circumvent this limitation, one can create robot accounts through the API with system resource permissions that go beyond the options offered in the web interface. This page is based on this comment by Harbor developer wy65701436 . Also check out the source code for more information on all the possible resource permissions that can be granted to Robot accounts. All examples on this page will be using harborapi to create privileged robot accounts.","title":"Creating Privileged Robot Accounts"},{"location":"usage/creating-system-robot/#project-creation-privileges","text":"Following the example provided in the GitHub comment above, harborapi uses HarborAsyncClient.create_robot to achieve the same functionality: # Client is instantiated with administrator account await client . create_robot ( RobotCreate ( name = \"from_api\" , description = \"Created from harborapi Python client\" , secret = \"Secret1234\" , level = \"system\" , duration = 30 , permissions = [ RobotPermission ( kind = \"system\" , namespace = \"/\" , access = [ Access ( resource = \"project\" , action = \"create\" ), ], ) ], ) ) Produces: RobotCreated ( id = 11 , name = 'robot$from_api' , secret = 'tBuDZ700tPkKLNQ0z1EAYndMOFEzvgM8' , creation_time = datetime . datetime ( 2022 , 7 , 14 , 10 , 3 , 40 , 906000 , tzinfo = datetime . timezone . utc ), expires_at = 1660385020 , )","title":"Project Creation Privileges"},{"location":"usage/creating-system-robot/#saving-credentials-to-file","text":"The resulting Robot account can be saved to a Harbor credentials file by providing an argument to the path parameter specifying the location to save the credentials to. await client . create_robot ( RobotCreate ( ... ), path = \"/path/to/file.json\" ) By default, the file must not already exist. This can be overriden by adding overwrite=True : await client . create_robot ( RobotCreate ( ... ), path = \"/path/to/file.json\" , overwrite = True ) For more information, see HarborAsyncClient.create_robot .","title":"Saving Credentials to File"},{"location":"usage/examples/","text":"Getting Started This page contains examples on how to instantiate and use HarborAsyncClient . Instantiate Client The client can be instatiated with either a username and password, a base64-encoded HTTP Basic Access Authentication credential string, or JSON-encoded Harbor credentials file. Username and Password Username and password (titled secret to conform with Harbor naming schemes) can be used by instantiating the client with the username and secret parameters. This is the most straight forward method of authenticating. from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , username = \"username\" , secret = \"secret\" , ) Basic Access Authentication Credentials In place of username and secret , a Base64-encoded HTTP Basic Access Authentication credentials string can be used to authenticate. This string is simply username:secret encoded to Base64, and as such provides no stronger security than username and password authentication; it only obscures the actual values. from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , credentials = \"base64_string_here\" , ) Credentials File When creating Robot accounts , the robot account's credentials can be exported as a JSON file. The credentials_file parameter takes an argument specifying the path to such a file. from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , credentials_file = \"/path/to/file.json\" , ) See Creating Privileged Robot Accounts for information about how to create Robot accounts with extended privileges using harborapi . Examples This section contains some basic examples showing the general usage of harborapi . Consult the Endpoints Reference for an overview of all the available client methods. Get Current User import asyncio from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , username = \"username\" , secret = \"secret\" , ) async def main (): res = await client . get_current_user () print ( repr ( res )) asyncio . run ( main ()) Produces: UserResp ( email = None , realname = 'Firstname Lastname' , comment = 'from LDAP.' , user_id = 123 , username = 'firstname-lastname' , sysadmin_flag = False , admin_role_in_auth = True , oidc_user_meta = None , creation_time = datetime . datetime ( 2022 , 7 , 1 , 13 , 19 , 36 , 26000 , tzinfo = datetime . timezone . utc ), update_time = datetime . datetime ( 2022 , 7 , 1 , 13 , 19 , 36 , 26000 , tzinfo = datetime . timezone . utc ) ) Get Artifacts await client . get_artifacts ( \"project\" , \"repository\" ) Produces: [ Artifact ( id = 1 , type = 'IMAGE' , media_type = 'application/vnd.docker.container.image.v1+json' , manifest_media_type = 'application/vnd.docker.distribution.manifest.v2+json' , project_id = 1 , repository_id = 1 , digest = 'sha256:f8410cc846de810e23ada839511f04efd998e0e4728d63ea997001f4ead0acac' , size = 106474226 , icon = 'sha256:0048162a053eef4d4ce3fe7518615bef084403614f8bca43b40ae2e762e11e06' , push_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 18 , 46 , 891000 , tzinfo = datetime . timezone . utc ), pull_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 19 , 7 , 131000 , tzinfo = datetime . timezone . utc ), extra_attrs = ExtraAttrs ( ... ), annotations = None , references = None , tags = [ Tag [ ... ], Tag [ ... ]], labels = None , scan_overview = None , accessories = None , ), Artifact ( ... ), ... ] Passing with_scan_overview=True will also include a NativeReportSummary if possible (otherwise ScanOverview ) along with the artifact if the artifact has a scan report associated with it. await client . get_artifacts ( \"project\" , \"repository\" , with_scan_overview = True ) Artifact ( ... , scan_overview = NativeReportSummary ( report_id = 'a0c40f3b-0403-441b-72e6-38cc725e3bfb' , scan_status = 'Success' , severity = 'Critical' , duration = 20 , summary = VulnerabilitySummary ( total = 1179 , fixable = 394 , critical = 3 , high = 50 , medium = 615 , low = 511 , summary = { 'Critical' : 3 , 'High' : 50 , 'Low' : 511 , 'Medium' : 615 }, ), start_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 18 , 58 , tzinfo = datetime . timezone . utc ), end_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 19 , 18 , tzinfo = datetime . timezone . utc ), complete_percent = 100 , version = 'v0.29.2' ), )","title":"Getting Started"},{"location":"usage/examples/#getting-started","text":"This page contains examples on how to instantiate and use HarborAsyncClient .","title":"Getting Started"},{"location":"usage/examples/#instantiate-client","text":"The client can be instatiated with either a username and password, a base64-encoded HTTP Basic Access Authentication credential string, or JSON-encoded Harbor credentials file.","title":"Instantiate Client"},{"location":"usage/examples/#username-and-password","text":"Username and password (titled secret to conform with Harbor naming schemes) can be used by instantiating the client with the username and secret parameters. This is the most straight forward method of authenticating. from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , username = \"username\" , secret = \"secret\" , )","title":"Username and Password"},{"location":"usage/examples/#basic-access-authentication-credentials","text":"In place of username and secret , a Base64-encoded HTTP Basic Access Authentication credentials string can be used to authenticate. This string is simply username:secret encoded to Base64, and as such provides no stronger security than username and password authentication; it only obscures the actual values. from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , credentials = \"base64_string_here\" , )","title":"Basic Access Authentication Credentials"},{"location":"usage/examples/#credentials-file","text":"When creating Robot accounts , the robot account's credentials can be exported as a JSON file. The credentials_file parameter takes an argument specifying the path to such a file. from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , credentials_file = \"/path/to/file.json\" , ) See Creating Privileged Robot Accounts for information about how to create Robot accounts with extended privileges using harborapi .","title":"Credentials File"},{"location":"usage/examples/#examples","text":"This section contains some basic examples showing the general usage of harborapi . Consult the Endpoints Reference for an overview of all the available client methods.","title":"Examples"},{"location":"usage/examples/#get-current-user","text":"import asyncio from harborapi import HarborAsyncClient client = HarborAsyncClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , username = \"username\" , secret = \"secret\" , ) async def main (): res = await client . get_current_user () print ( repr ( res )) asyncio . run ( main ()) Produces: UserResp ( email = None , realname = 'Firstname Lastname' , comment = 'from LDAP.' , user_id = 123 , username = 'firstname-lastname' , sysadmin_flag = False , admin_role_in_auth = True , oidc_user_meta = None , creation_time = datetime . datetime ( 2022 , 7 , 1 , 13 , 19 , 36 , 26000 , tzinfo = datetime . timezone . utc ), update_time = datetime . datetime ( 2022 , 7 , 1 , 13 , 19 , 36 , 26000 , tzinfo = datetime . timezone . utc ) )","title":"Get Current User"},{"location":"usage/examples/#get-artifacts","text":"await client . get_artifacts ( \"project\" , \"repository\" ) Produces: [ Artifact ( id = 1 , type = 'IMAGE' , media_type = 'application/vnd.docker.container.image.v1+json' , manifest_media_type = 'application/vnd.docker.distribution.manifest.v2+json' , project_id = 1 , repository_id = 1 , digest = 'sha256:f8410cc846de810e23ada839511f04efd998e0e4728d63ea997001f4ead0acac' , size = 106474226 , icon = 'sha256:0048162a053eef4d4ce3fe7518615bef084403614f8bca43b40ae2e762e11e06' , push_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 18 , 46 , 891000 , tzinfo = datetime . timezone . utc ), pull_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 19 , 7 , 131000 , tzinfo = datetime . timezone . utc ), extra_attrs = ExtraAttrs ( ... ), annotations = None , references = None , tags = [ Tag [ ... ], Tag [ ... ]], labels = None , scan_overview = None , accessories = None , ), Artifact ( ... ), ... ] Passing with_scan_overview=True will also include a NativeReportSummary if possible (otherwise ScanOverview ) along with the artifact if the artifact has a scan report associated with it. await client . get_artifacts ( \"project\" , \"repository\" , with_scan_overview = True ) Artifact ( ... , scan_overview = NativeReportSummary ( report_id = 'a0c40f3b-0403-441b-72e6-38cc725e3bfb' , scan_status = 'Success' , severity = 'Critical' , duration = 20 , summary = VulnerabilitySummary ( total = 1179 , fixable = 394 , critical = 3 , high = 50 , medium = 615 , low = 511 , summary = { 'Critical' : 3 , 'High' : 50 , 'Low' : 511 , 'Medium' : 615 }, ), start_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 18 , 58 , tzinfo = datetime . timezone . utc ), end_time = datetime . datetime ( 2022 , 7 , 4 , 8 , 19 , 18 , tzinfo = datetime . timezone . utc ), complete_percent = 100 , version = 'v0.29.2' ), )","title":"Get Artifacts"},{"location":"usage/exceptions/","text":"Exceptions All methods that interact with the Harbor API raise exceptions derived from StatusError for responses with non-2xx status codes unless otherwise specified. Status Code try : await client . delete_artifact ( \"project\" , \"repository\" , \"latest\" ) except StatusError as e : print ( e . status_code ) Granular Exception Handling If more granular exception handling is required, all documented HTTP exceptions in the API spec are implemented as discrete classes derived from StatusError from harborapi.exceptions import ( BadRequest , Forbidden , NotFound , MethodNotAllowed , Conflict , Unauthorized , PreconditionFailed , UnsupportedMediaType , InternalServerError , StatusError ) project , repo , tag = \"testproj\" , \"testrepo\" , \"latest\" try : await client . delete_artifact ( project , repo , tag ) except NotFound as e : print ( f \"' { repo } : { tag } ' not found for project ' { project } '\" ) except StatusError as e : # catch all other HTTP exceptions Inspecting Errors The StatusError.errors attribute is a list of Error objects that contain more detailed information about the error(s) that have occured. try : await client . delete_artifact ( \"project\" , \"repository\" , \"latest\" ) except StatusError as e : for error in e . errors : print ( error . code , error . message ) An Error object has the following structure: class Error ( BaseModel ): code : Optional [ str ] = Field ( None , description = \"The error code\" ) message : Optional [ str ] = Field ( None , description = \"The error message\" ) (It is likely that code and message are both not None on runtime, but the API specification states that both these fields are optional.)","title":"Exceptions"},{"location":"usage/exceptions/#exceptions","text":"All methods that interact with the Harbor API raise exceptions derived from StatusError for responses with non-2xx status codes unless otherwise specified.","title":"Exceptions"},{"location":"usage/exceptions/#status-code","text":"try : await client . delete_artifact ( \"project\" , \"repository\" , \"latest\" ) except StatusError as e : print ( e . status_code )","title":"Status Code"},{"location":"usage/exceptions/#granular-exception-handling","text":"If more granular exception handling is required, all documented HTTP exceptions in the API spec are implemented as discrete classes derived from StatusError from harborapi.exceptions import ( BadRequest , Forbidden , NotFound , MethodNotAllowed , Conflict , Unauthorized , PreconditionFailed , UnsupportedMediaType , InternalServerError , StatusError ) project , repo , tag = \"testproj\" , \"testrepo\" , \"latest\" try : await client . delete_artifact ( project , repo , tag ) except NotFound as e : print ( f \"' { repo } : { tag } ' not found for project ' { project } '\" ) except StatusError as e : # catch all other HTTP exceptions","title":"Granular Exception Handling"},{"location":"usage/exceptions/#inspecting-errors","text":"The StatusError.errors attribute is a list of Error objects that contain more detailed information about the error(s) that have occured. try : await client . delete_artifact ( \"project\" , \"repository\" , \"latest\" ) except StatusError as e : for error in e . errors : print ( error . code , error . message ) An Error object has the following structure: class Error ( BaseModel ): code : Optional [ str ] = Field ( None , description = \"The error code\" ) message : Optional [ str ] = Field ( None , description = \"The error message\" ) (It is likely that code and message are both not None on runtime, but the API specification states that both these fields are optional.)","title":"Inspecting Errors"},{"location":"usage/sync-client/","text":"Sync Client When using the non-async client HarborClient , all methods are invoked identically to methods on HarborAsyncClient , except the await keyword in front of the method call is omitted. Example import asyncio from harborapi import HarborClient client = HarborClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , username = \"username\" , secret = \"secret\" , ) res = client . get_current_user ()","title":"Sync Client"},{"location":"usage/sync-client/#sync-client","text":"When using the non-async client HarborClient , all methods are invoked identically to methods on HarborAsyncClient , except the await keyword in front of the method call is omitted.","title":"Sync Client"},{"location":"usage/sync-client/#example","text":"import asyncio from harborapi import HarborClient client = HarborClient ( url = \"https://your-harbor-instance.com/api/v2.0\" , username = \"username\" , secret = \"secret\" , ) res = client . get_current_user ()","title":"Example"}]}